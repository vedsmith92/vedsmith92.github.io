(()=>{var e={987:e=>{"use strict";var t={single_source_shortest_paths:function(e,n,r){var o={},a={};a[n]=0;var i,c,l,u,s,d,f,h=t.PriorityQueue.make();for(h.push(n,0);!h.empty();)for(l in c=(i=h.pop()).value,u=i.cost,s=e[c]||{})s.hasOwnProperty(l)&&(d=u+s[l],f=a[l],(void 0===a[l]||f>d)&&(a[l]=d,h.push(l,d),o[l]=c));if(void 0!==r&&void 0===a[r]){var p=["Could not find a path from ",n," to ",r,"."].join("");throw new Error(p)}return o},extract_shortest_path_from_predecessor_list:function(e,t){for(var n=[],r=t;r;)n.push(r),e[r],r=e[r];return n.reverse(),n},find_path:function(e,n,r){var o=t.single_source_shortest_paths(e,n,r);return t.extract_shortest_path_from_predecessor_list(o,r)},PriorityQueue:{make:function(e){var n,r=t.PriorityQueue,o={};for(n in e=e||{},r)r.hasOwnProperty(n)&&(o[n]=r[n]);return o.queue=[],o.sorter=e.sorter||r.default_sorter,o},default_sorter:function(e,t){return e.cost-t.cost},push:function(e,t){var n={value:e,cost:t};this.queue.push(n),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}};e.exports=t},378:e=>{"use strict";e.exports=function(e){for(var t=[],n=e.length,r=0;r<n;r++){var o=e.charCodeAt(r);if(o>=55296&&o<=56319&&n>r+1){var a=e.charCodeAt(r+1);a>=56320&&a<=57343&&(o=1024*(o-55296)+a-56320+65536,r+=1)}o<128?t.push(o):o<2048?(t.push(o>>6|192),t.push(63&o|128)):o<55296||o>=57344&&o<65536?(t.push(o>>12|224),t.push(o>>6&63|128),t.push(63&o|128)):o>=65536&&o<=1114111?(t.push(o>>18|240),t.push(o>>12&63|128),t.push(o>>6&63|128),t.push(63&o|128)):t.push(239,191,189)}return new Uint8Array(t).buffer}},661:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Children:()=>h,Component:()=>o.wA,Fragment:()=>o.HY,PureComponent:()=>c,StrictMode:()=>G,Suspense:()=>v,SuspenseList:()=>g,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:()=>D,cloneElement:()=>H,createContext:()=>o.kr,createElement:()=>o.az,createFactory:()=>z,createPortal:()=>S,createRef:()=>o.Vf,default:()=>K,findDOMNode:()=>V,flushSync:()=>Z,forwardRef:()=>d,hydrate:()=>k,isValidElement:()=>F,lazy:()=>y,memo:()=>l,render:()=>O,unmountComponentAtNode:()=>Y,unstable_batchedUpdates:()=>$,useCallback:()=>r.I4,useContext:()=>r.qp,useDebugValue:()=>r.Qb,useEffect:()=>r.d4,useErrorBoundary:()=>r.cO,useImperativeHandle:()=>r.aP,useLayoutEffect:()=>r.bt,useMemo:()=>r.Ye,useReducer:()=>r._Y,useRef:()=>r.sO,useState:()=>r.eJ,version:()=>U});var r=n(396),o=n(400);function a(e,t){for(var n in t)e[n]=t[n];return e}function i(e,t){for(var n in e)if("__source"!==n&&!(n in t))return!0;for(var r in t)if("__source"!==r&&e[r]!==t[r])return!0;return!1}function c(e){this.props=e}function l(e,t){function n(e){var n=this.props.ref,r=n==e.ref;return!r&&n&&(n.call?n(null):n.current=null),t?!t(this.props,e)||!r:i(this.props,e)}function r(t){return this.shouldComponentUpdate=n,(0,o.az)(e,t)}return r.displayName="Memo("+(e.displayName||e.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(c.prototype=new o.wA).isPureReactComponent=!0,c.prototype.shouldComponentUpdate=function(e,t){return i(this.props,e)||i(this.state,t)};var u=o.YM.__b;o.YM.__b=function(e){e.type&&e.type.__f&&e.ref&&(e.props.ref=e.ref,e.ref=null),u&&u(e)};var s="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function d(e){function t(t){var n=a({},t);return delete n.ref,e(n,t.ref||null)}return t.$$typeof=s,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t}var f=function(e,t){return null==e?null:(0,o.bR)((0,o.bR)(e).map(t))},h={map:f,forEach:f,count:function(e){return e?(0,o.bR)(e).length:0},only:function(e){var t=(0,o.bR)(e);if(1!==t.length)throw"Children.only";return t[0]},toArray:o.bR},p=o.YM.__e;o.YM.__e=function(e,t,n,r){if(e.then)for(var o,a=t;a=a.__;)if((o=a.__c)&&o.__c)return null==t.__e&&(t.__e=n.__e,t.__k=n.__k),o.__c(e,t);p(e,t,n,r)};var m=o.YM.unmount;function v(){this.__u=0,this.t=null,this.__b=null}function _(e){var t=e.__.__c;return t&&t.__e&&t.__e(e)}function y(e){var t,n,r;function a(a){if(t||(t=e()).then((function(e){n=e.default||e}),(function(e){r=e})),r)throw r;if(!n)throw t;return(0,o.az)(n,a)}return a.displayName="Lazy",a.__f=!0,a}function g(){this.u=null,this.o=null}o.YM.unmount=function(e){var t=e.__c;t&&t.__R&&t.__R(),t&&!0===e.__h&&(e.type=null),m&&m(e)},(v.prototype=new o.wA).__c=function(e,t){var n=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(n);var o=_(r.__v),a=!1,i=function(){a||(a=!0,n.__R=null,o?o(c):c())};n.__R=i;var c=function(){if(!--r.__u){if(r.state.__e){var e=r.state.__e;r.__v.__k[0]=function e(t,n,r){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map((function(t){return e(t,n,r)})),t.__c&&t.__c.__P===n&&(t.__e&&r.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=r)),t}(e,e.__c.__P,e.__c.__O)}var t;for(r.setState({__e:r.__b=null});t=r.t.pop();)t.forceUpdate()}},l=!0===t.__h;r.__u++||l||r.setState({__e:r.__b=r.__v.__k[0]}),e.then(i,i)},v.prototype.componentWillUnmount=function(){this.t=[]},v.prototype.render=function(e,t){if(this.__b){if(this.__v.__k){var n=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=function e(t,n,r){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach((function(e){"function"==typeof e.__c&&e.__c()})),t.__c.__H=null),null!=(t=a({},t)).__c&&(t.__c.__P===r&&(t.__c.__P=n),t.__c=null),t.__k=t.__k&&t.__k.map((function(t){return e(t,n,r)}))),t}(this.__b,n,r.__O=r.__P)}this.__b=null}var i=t.__e&&(0,o.az)(o.HY,null,e.fallback);return i&&(i.__h=null),[(0,o.az)(o.HY,null,t.__e?null:e.children),i]};var b=function(e,t,n){if(++n[1]===n[0]&&e.o.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.o.size))for(n=e.u;n;){for(;n.length>3;)n.pop()();if(n[1]<n[0])break;e.u=n=n[2]}};function C(e){return this.getChildContext=function(){return e.context},e.children}function w(e){var t=this,n=e.i;t.componentWillUnmount=function(){(0,o.sY)(null,t.l),t.l=null,t.i=null},t.i&&t.i!==n&&t.componentWillUnmount(),e.__v?(t.l||(t.i=n,t.l={nodeType:1,parentNode:n,childNodes:[],appendChild:function(e){this.childNodes.push(e),t.i.appendChild(e)},insertBefore:function(e,n){this.childNodes.push(e),t.i.appendChild(e)},removeChild:function(e){this.childNodes.splice(this.childNodes.indexOf(e)>>>1,1),t.i.removeChild(e)}}),(0,o.sY)((0,o.az)(C,{context:t.context},e.__v),t.l)):t.l&&t.componentWillUnmount()}function S(e,t){return(0,o.az)(w,{__v:e,i:t})}(g.prototype=new o.wA).__e=function(e){var t=this,n=_(t.__v),r=t.o.get(e);return r[0]++,function(o){var a=function(){t.props.revealOrder?(r.push(o),b(t,e,r)):o()};n?n(a):a()}},g.prototype.render=function(e){this.u=null,this.o=new Map;var t=(0,o.bR)(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var n=t.length;n--;)this.o.set(t[n],this.u=[1,0,this.u]);return e.children},g.prototype.componentDidUpdate=g.prototype.componentDidMount=function(){var e=this;this.o.forEach((function(t,n){b(e,n,t)}))};var A="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,M=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,E="undefined"!=typeof document,L=function(e){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(e)};function O(e,t,n){return null==t.__k&&(t.textContent=""),(0,o.sY)(e,t),"function"==typeof n&&n(),e?e.__c:null}function k(e,t,n){return(0,o.ZB)(e,t),"function"==typeof n&&n(),e?e.__c:null}o.wA.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(e){Object.defineProperty(o.wA.prototype,e,{configurable:!0,get:function(){return this["UNSAFE_"+e]},set:function(t){Object.defineProperty(this,e,{configurable:!0,writable:!0,value:t})}})}));var x=o.YM.event;function N(){}function P(){return this.cancelBubble}function I(){return this.defaultPrevented}o.YM.event=function(e){return x&&(e=x(e)),e.persist=N,e.isPropagationStopped=P,e.isDefaultPrevented=I,e.nativeEvent=e};var j,R={configurable:!0,get:function(){return this.class}},T=o.YM.vnode;o.YM.vnode=function(e){var t=e.type,n=e.props,r=n;if("string"==typeof t){var a=-1===t.indexOf("-");for(var i in r={},n){var c=n[i];E&&"children"===i&&"noscript"===t||"value"===i&&"defaultValue"in n&&null==c||("defaultValue"===i&&"value"in n&&null==n.value?i="value":"download"===i&&!0===c?c="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!L(n.type)?i="oninput":/^onfocus$/i.test(i)?i="onfocusin":/^onblur$/i.test(i)?i="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i)?i=i.toLowerCase():a&&M.test(i)?i=i.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===c&&(c=void 0),r[i]=c)}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=(0,o.bR)(n.children).forEach((function(e){e.props.selected=-1!=r.value.indexOf(e.props.value)}))),"select"==t&&null!=r.defaultValue&&(r.value=(0,o.bR)(n.children).forEach((function(e){e.props.selected=r.multiple?-1!=r.defaultValue.indexOf(e.props.value):r.defaultValue==e.props.value}))),e.props=r,n.class!=n.className&&(R.enumerable="className"in n,null!=n.className&&(r.class=n.className),Object.defineProperty(r,"className",R))}e.$$typeof=A,T&&T(e)};var B=o.YM.__r;o.YM.__r=function(e){B&&B(e),j=e.__c};var D={ReactCurrentDispatcher:{current:{readContext:function(e){return j.__n[e.__c].props.value}}}},U="17.0.2";function z(e){return o.az.bind(null,e)}function F(e){return!!e&&e.$$typeof===A}function H(e){return F(e)?o.Tm.apply(null,arguments):e}function Y(e){return!!e.__k&&((0,o.sY)(null,e),!0)}function V(e){return e&&(e.base||1===e.nodeType&&e)||null}var $=function(e,t){return e(t)},Z=function(e,t){return e(t)},G=o.HY;const K={useState:r.eJ,useReducer:r._Y,useEffect:r.d4,useLayoutEffect:r.bt,useRef:r.sO,useImperativeHandle:r.aP,useMemo:r.Ye,useCallback:r.I4,useContext:r.qp,useDebugValue:r.Qb,version:"17.0.2",Children:h,render:O,hydrate:k,unmountComponentAtNode:Y,createPortal:S,createElement:o.az,createContext:o.kr,createFactory:z,cloneElement:H,createRef:o.Vf,Fragment:o.HY,isValidElement:F,findDOMNode:V,Component:o.wA,PureComponent:c,memo:l,forwardRef:d,flushSync:Z,unstable_batchedUpdates:$,StrictMode:o.HY,Suspense:v,SuspenseList:g,lazy:y,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:D}},400:(e,t,n)=>{"use strict";n.d(t,{HY:()=>y,Tm:()=>z,Vf:()=>_,YM:()=>o,ZB:()=>U,az:()=>m,bR:()=>E,h:()=>m,kr:()=>F,sY:()=>D,wA:()=>g});var r,o,a,i,c,l,u,s={},d=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function h(e,t){for(var n in t)e[n]=t[n];return e}function p(e){var t=e.parentNode;t&&t.removeChild(e)}function m(e,t,n){var o,a,i,c={};for(i in t)"key"==i?o=t[i]:"ref"==i?a=t[i]:c[i]=t[i];if(arguments.length>2&&(c.children=arguments.length>3?r.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(i in e.defaultProps)void 0===c[i]&&(c[i]=e.defaultProps[i]);return v(e,c,o,a,null)}function v(e,t,n,r,i){var c={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==i?++a:i};return null==i&&null!=o.vnode&&o.vnode(c),c}function _(){return{current:null}}function y(e){return e.children}function g(e,t){this.props=e,this.context=t}function b(e,t){if(null==t)return e.__?b(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?b(e):null}function C(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return C(e)}}function w(e){(!e.__d&&(e.__d=!0)&&i.push(e)&&!S.__r++||l!==o.debounceRendering)&&((l=o.debounceRendering)||c)(S)}function S(){for(var e;S.__r=i.length;)e=i.sort((function(e,t){return e.__v.__b-t.__v.__b})),i=[],e.some((function(e){var t,n,r,o,a,i;e.__d&&(a=(o=(t=e).__v).__e,(i=t.__P)&&(n=[],(r=h({},o)).__v=o.__v+1,P(i,o,r,t.__n,void 0!==i.ownerSVGElement,null!=o.__h?[a]:null,n,null==a?b(o):a,o.__h),I(n,o),o.__e!=a&&C(o)))}))}function A(e,t,n,r,o,a,i,c,l,u){var f,h,p,m,_,g,C,w=r&&r.__k||d,S=w.length;for(n.__k=[],f=0;f<t.length;f++)if(null!=(m=n.__k[f]=null==(m=t[f])||"boolean"==typeof m?null:"string"==typeof m||"number"==typeof m||"bigint"==typeof m?v(null,m,null,null,m):Array.isArray(m)?v(y,{children:m},null,null,null):m.__b>0?v(m.type,m.props,m.key,null,m.__v):m)){if(m.__=n,m.__b=n.__b+1,null===(p=w[f])||p&&m.key==p.key&&m.type===p.type)w[f]=void 0;else for(h=0;h<S;h++){if((p=w[h])&&m.key==p.key&&m.type===p.type){w[h]=void 0;break}p=null}P(e,m,p=p||s,o,a,i,c,l,u),_=m.__e,(h=m.ref)&&p.ref!=h&&(C||(C=[]),p.ref&&C.push(p.ref,null,m),C.push(h,m.__c||_,m)),null!=_?(null==g&&(g=_),"function"==typeof m.type&&m.__k===p.__k?m.__d=l=M(m,l,e):l=L(e,m,p,w,_,l),"function"==typeof n.type&&(n.__d=l)):l&&p.__e==l&&l.parentNode!=e&&(l=b(p))}for(n.__e=g,f=S;f--;)null!=w[f]&&("function"==typeof n.type&&null!=w[f].__e&&w[f].__e==n.__d&&(n.__d=b(r,f+1)),T(w[f],w[f]));if(C)for(f=0;f<C.length;f++)R(C[f],C[++f],C[++f])}function M(e,t,n){for(var r,o=e.__k,a=0;o&&a<o.length;a++)(r=o[a])&&(r.__=e,t="function"==typeof r.type?M(r,t,n):L(n,r,r,o,r.__e,t));return t}function E(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){E(e,t)})):t.push(e)),t}function L(e,t,n,r,o,a){var i,c,l;if(void 0!==t.__d)i=t.__d,t.__d=void 0;else if(null==n||o!=a||null==o.parentNode)e:if(null==a||a.parentNode!==e)e.appendChild(o),i=null;else{for(c=a,l=0;(c=c.nextSibling)&&l<r.length;l+=2)if(c==o)break e;e.insertBefore(o,a),i=a}return void 0!==i?i:o.nextSibling}function O(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function k(e,t,n,r,o){var a;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||O(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||O(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])a=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+a]=n,n?r||e.addEventListener(t,a?N:x,a):e.removeEventListener(t,a?N:x,a);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null!=n&&(!1!==n||"a"===t[0]&&"r"===t[1])?e.setAttribute(t,n):e.removeAttribute(t))}}function x(e){this.l[e.type+!1](o.event?o.event(e):e)}function N(e){this.l[e.type+!0](o.event?o.event(e):e)}function P(e,t,n,r,a,i,c,l,u){var s,d,f,p,m,v,_,b,C,w,S,M=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(u=n.__h,l=t.__e=n.__e,t.__h=null,i=[l]),(s=o.__b)&&s(t);try{e:if("function"==typeof M){if(b=t.props,C=(s=M.contextType)&&r[s.__c],w=s?C?C.props.value:s.__:r,n.__c?_=(d=t.__c=n.__c).__=d.__E:("prototype"in M&&M.prototype.render?t.__c=d=new M(b,w):(t.__c=d=new g(b,w),d.constructor=M,d.render=B),C&&C.sub(d),d.props=b,d.state||(d.state={}),d.context=w,d.__n=r,f=d.__d=!0,d.__h=[]),null==d.__s&&(d.__s=d.state),null!=M.getDerivedStateFromProps&&(d.__s==d.state&&(d.__s=h({},d.__s)),h(d.__s,M.getDerivedStateFromProps(b,d.__s))),p=d.props,m=d.state,f)null==M.getDerivedStateFromProps&&null!=d.componentWillMount&&d.componentWillMount(),null!=d.componentDidMount&&d.__h.push(d.componentDidMount);else{if(null==M.getDerivedStateFromProps&&b!==p&&null!=d.componentWillReceiveProps&&d.componentWillReceiveProps(b,w),!d.__e&&null!=d.shouldComponentUpdate&&!1===d.shouldComponentUpdate(b,d.__s,w)||t.__v===n.__v){d.props=b,d.state=d.__s,t.__v!==n.__v&&(d.__d=!1),d.__v=t,t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),d.__h.length&&c.push(d);break e}null!=d.componentWillUpdate&&d.componentWillUpdate(b,d.__s,w),null!=d.componentDidUpdate&&d.__h.push((function(){d.componentDidUpdate(p,m,v)}))}d.context=w,d.props=b,d.state=d.__s,(s=o.__r)&&s(t),d.__d=!1,d.__v=t,d.__P=e,s=d.render(d.props,d.state,d.context),d.state=d.__s,null!=d.getChildContext&&(r=h(h({},r),d.getChildContext())),f||null==d.getSnapshotBeforeUpdate||(v=d.getSnapshotBeforeUpdate(p,m)),S=null!=s&&s.type===y&&null==s.key?s.props.children:s,A(e,Array.isArray(S)?S:[S],t,n,r,a,i,c,l,u),d.base=t.__e,t.__h=null,d.__h.length&&c.push(d),_&&(d.__E=d.__=null),d.__e=!1}else null==i&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=j(n.__e,t,n,r,a,i,c,u);(s=o.diffed)&&s(t)}catch(e){t.__v=null,(u||null!=i)&&(t.__e=l,t.__h=!!u,i[i.indexOf(l)]=null),o.__e(e,t,n)}}function I(e,t){o.__c&&o.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){o.__e(e,t.__v)}}))}function j(e,t,n,o,a,i,c,l){var u,d,f,h=n.props,m=t.props,v=t.type,_=0;if("svg"===v&&(a=!0),null!=i)for(;_<i.length;_++)if((u=i[_])&&"setAttribute"in u==!!v&&(v?u.localName===v:3===u.nodeType)){e=u,i[_]=null;break}if(null==e){if(null===v)return document.createTextNode(m);e=a?document.createElementNS("http://www.w3.org/2000/svg",v):document.createElement(v,m.is&&m),i=null,l=!1}if(null===v)h===m||l&&e.data===m||(e.data=m);else{if(i=i&&r.call(e.childNodes),d=(h=n.props||s).dangerouslySetInnerHTML,f=m.dangerouslySetInnerHTML,!l){if(null!=i)for(h={},_=0;_<e.attributes.length;_++)h[e.attributes[_].name]=e.attributes[_].value;(f||d)&&(f&&(d&&f.__html==d.__html||f.__html===e.innerHTML)||(e.innerHTML=f&&f.__html||""))}if(function(e,t,n,r,o){var a;for(a in n)"children"===a||"key"===a||a in t||k(e,a,null,n[a],r);for(a in t)o&&"function"!=typeof t[a]||"children"===a||"key"===a||"value"===a||"checked"===a||n[a]===t[a]||k(e,a,t[a],n[a],r)}(e,m,h,a,l),f)t.__k=[];else if(_=t.props.children,A(e,Array.isArray(_)?_:[_],t,n,o,a&&"foreignObject"!==v,i,c,i?i[0]:n.__k&&b(n,0),l),null!=i)for(_=i.length;_--;)null!=i[_]&&p(i[_]);l||("value"in m&&void 0!==(_=m.value)&&(_!==e.value||"progress"===v&&!_||"option"===v&&_!==h.value)&&k(e,"value",_,h.value,!1),"checked"in m&&void 0!==(_=m.checked)&&_!==e.checked&&k(e,"checked",_,h.checked,!1))}return e}function R(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){o.__e(e,n)}}function T(e,t,n){var r,a;if(o.unmount&&o.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||R(r,null,t)),null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){o.__e(e,t)}r.base=r.__P=null}if(r=e.__k)for(a=0;a<r.length;a++)r[a]&&T(r[a],t,"function"!=typeof e.type);n||null==e.__e||p(e.__e),e.__e=e.__d=void 0}function B(e,t,n){return this.constructor(e,n)}function D(e,t,n){var a,i,c;o.__&&o.__(e,t),i=(a="function"==typeof n)?null:n&&n.__k||t.__k,c=[],P(t,e=(!a&&n||t).__k=m(y,null,[e]),i||s,s,void 0!==t.ownerSVGElement,!a&&n?[n]:i?null:t.firstChild?r.call(t.childNodes):null,c,!a&&n?n:i?i.__e:t.firstChild,a),I(c,e)}function U(e,t){D(e,t,U)}function z(e,t,n){var o,a,i,c=h({},e.props);for(i in t)"key"==i?o=t[i]:"ref"==i?a=t[i]:c[i]=t[i];return arguments.length>2&&(c.children=arguments.length>3?r.call(arguments,2):n),v(e.type,c,o||e.key,a||e.ref,null)}function F(e,t){var n={__c:t="__cC"+u++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some(w)},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}r=d.slice,o={__e:function(e,t,n,r){for(var o,a,i;t=t.__;)if((o=t.__c)&&!o.__)try{if((a=o.constructor)&&null!=a.getDerivedStateFromError&&(o.setState(a.getDerivedStateFromError(e)),i=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),i=o.__d),i)return o.__E=o}catch(t){e=t}throw e}},a=0,g.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h({},this.state),"function"==typeof e&&(e=e(h({},n),this.props)),e&&h(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),w(this))},g.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),w(this))},g.prototype.render=y,i=[],c="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,S.__r=0,u=0},396:(e,t,n)=>{"use strict";n.d(t,{I4:()=>w,Qb:()=>A,Ye:()=>C,_Y:()=>v,aP:()=>b,bt:()=>y,cO:()=>M,d4:()=>_,eJ:()=>m,qp:()=>S,sO:()=>g});var r,o,a,i=n(400),c=0,l=[],u=i.YM.__b,s=i.YM.__r,d=i.YM.diffed,f=i.YM.__c,h=i.YM.unmount;function p(e,t){i.YM.__h&&i.YM.__h(o,e,c||t),c=0;var n=o.__H||(o.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({}),n.__[e]}function m(e){return c=1,v(N,e)}function v(e,t,n){var a=p(r++,2);return a.t=e,a.__c||(a.__=[n?n(t):N(void 0,t),function(e){var t=a.t(a.__[0],e);a.__[0]!==t&&(a.__=[t,a.__[1]],a.__c.setState({}))}],a.__c=o),a.__}function _(e,t){var n=p(r++,3);!i.YM.__s&&x(n.__H,t)&&(n.__=e,n.__H=t,o.__H.__h.push(n))}function y(e,t){var n=p(r++,4);!i.YM.__s&&x(n.__H,t)&&(n.__=e,n.__H=t,o.__h.push(n))}function g(e){return c=5,C((function(){return{current:e}}),[])}function b(e,t,n){c=6,y((function(){return"function"==typeof e?(e(t()),function(){return e(null)}):e?(e.current=t(),function(){return e.current=null}):void 0}),null==n?n:n.concat(e))}function C(e,t){var n=p(r++,7);return x(n.__H,t)&&(n.__=e(),n.__H=t,n.__h=e),n.__}function w(e,t){return c=8,C((function(){return e}),t)}function S(e){var t=o.context[e.__c],n=p(r++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(o)),t.props.value):e.__}function A(e,t){i.YM.useDebugValue&&i.YM.useDebugValue(t?t(e):e)}function M(e){var t=p(r++,10),n=m();return t.__=e,o.componentDidCatch||(o.componentDidCatch=function(e){t.__&&t.__(e),n[1](e)}),[n[0],function(){n[1](void 0)}]}function E(){for(var e;e=l.shift();)if(e.__P)try{e.__H.__h.forEach(O),e.__H.__h.forEach(k),e.__H.__h=[]}catch(t){e.__H.__h=[],i.YM.__e(t,e.__v)}}i.YM.__b=function(e){o=null,u&&u(e)},i.YM.__r=function(e){s&&s(e),r=0;var t=(o=e.__c).__H;t&&(t.__h.forEach(O),t.__h.forEach(k),t.__h=[])},i.YM.diffed=function(e){d&&d(e);var t=e.__c;t&&t.__H&&t.__H.__h.length&&(1!==l.push(t)&&a===i.YM.requestAnimationFrame||((a=i.YM.requestAnimationFrame)||function(e){var t,n=function(){clearTimeout(r),L&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);L&&(t=requestAnimationFrame(n))})(E)),o=null},i.YM.__c=function(e,t){t.some((function(e){try{e.__h.forEach(O),e.__h=e.__h.filter((function(e){return!e.__||k(e)}))}catch(n){t.some((function(e){e.__h&&(e.__h=[])})),t=[],i.YM.__e(n,e.__v)}})),f&&f(e,t)},i.YM.unmount=function(e){h&&h(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach((function(e){try{O(e)}catch(e){t=e}})),t&&i.YM.__e(t,n.__v))};var L="function"==typeof requestAnimationFrame;function O(e){var t=o,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),o=t}function k(e){var t=o;e.__c=e.__(),o=t}function x(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function N(e,t){return"function"==typeof t?t(e):t}},592:(e,t,n)=>{const r=n(138),o=n(115),a=n(907),i=n(776);function c(e,t,n,a,i){const c=[].slice.call(arguments,1),l=c.length,u="function"==typeof c[l-1];if(!u&&!r())throw new Error("Callback required as last argument");if(!u){if(l<1)throw new Error("Too few arguments provided");return 1===l?(n=t,t=a=void 0):2!==l||t.getContext||(a=n,n=t,t=void 0),new Promise((function(r,i){try{const i=o.create(n,a);r(e(i,t,a))}catch(e){i(e)}}))}if(l<2)throw new Error("Too few arguments provided");2===l?(i=n,n=t,t=a=void 0):3===l&&(t.getContext&&void 0===i?(i=a,a=void 0):(i=a,a=n,n=t,t=void 0));try{const r=o.create(n,a);i(null,e(r,t,a))}catch(e){i(e)}}t.create=o.create,t.toCanvas=c.bind(null,a.render),t.toDataURL=c.bind(null,a.renderToDataURL),t.toString=c.bind(null,(function(e,t,n){return i.render(e,n)}))},138:e=>{e.exports=function(){return"function"==typeof Promise&&Promise.prototype&&Promise.prototype.then}},845:(e,t,n)=>{const r=n(242).getSymbolSize;t.getRowColCoords=function(e){if(1===e)return[];const t=Math.floor(e/7)+2,n=r(e),o=145===n?26:2*Math.ceil((n-13)/(2*t-2)),a=[n-7];for(let e=1;e<t-1;e++)a[e]=a[e-1]-o;return a.push(6),a.reverse()},t.getPositions=function(e){const n=[],r=t.getRowColCoords(e),o=r.length;for(let e=0;e<o;e++)for(let t=0;t<o;t++)0===e&&0===t||0===e&&t===o-1||e===o-1&&0===t||n.push([r[e],r[t]]);return n}},260:(e,t,n)=>{const r=n(910),o=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function a(e){this.mode=r.ALPHANUMERIC,this.data=e}a.getBitsLength=function(e){return 11*Math.floor(e/2)+e%2*6},a.prototype.getLength=function(){return this.data.length},a.prototype.getBitsLength=function(){return a.getBitsLength(this.data.length)},a.prototype.write=function(e){let t;for(t=0;t+2<=this.data.length;t+=2){let n=45*o.indexOf(this.data[t]);n+=o.indexOf(this.data[t+1]),e.put(n,11)}this.data.length%2&&e.put(o.indexOf(this.data[t]),6)},e.exports=a},245:e=>{function t(){this.buffer=[],this.length=0}t.prototype={get:function(e){const t=Math.floor(e/8);return 1==(this.buffer[t]>>>7-e%8&1)},put:function(e,t){for(let n=0;n<t;n++)this.putBit(1==(e>>>t-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(e){const t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),e&&(this.buffer[t]|=128>>>this.length%8),this.length++}},e.exports=t},280:e=>{function t(e){if(!e||e<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=e,this.data=new Uint8Array(e*e),this.reservedBit=new Uint8Array(e*e)}t.prototype.set=function(e,t,n,r){const o=e*this.size+t;this.data[o]=n,r&&(this.reservedBit[o]=!0)},t.prototype.get=function(e,t){return this.data[e*this.size+t]},t.prototype.xor=function(e,t,n){this.data[e*this.size+t]^=n},t.prototype.isReserved=function(e,t){return this.reservedBit[e*this.size+t]},e.exports=t},424:(e,t,n)=>{const r=n(378),o=n(910);function a(e){this.mode=o.BYTE,this.data=new Uint8Array(r(e))}a.getBitsLength=function(e){return 8*e},a.prototype.getLength=function(){return this.data.length},a.prototype.getBitsLength=function(){return a.getBitsLength(this.data.length)},a.prototype.write=function(e){for(let t=0,n=this.data.length;t<n;t++)e.put(this.data[t],8)},e.exports=a},393:(e,t,n)=>{const r=n(908),o=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],a=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];t.getBlocksCount=function(e,t){switch(t){case r.L:return o[4*(e-1)+0];case r.M:return o[4*(e-1)+1];case r.Q:return o[4*(e-1)+2];case r.H:return o[4*(e-1)+3];default:return}},t.getTotalCodewordsCount=function(e,t){switch(t){case r.L:return a[4*(e-1)+0];case r.M:return a[4*(e-1)+1];case r.Q:return a[4*(e-1)+2];case r.H:return a[4*(e-1)+3];default:return}}},908:(e,t)=>{t.L={bit:1},t.M={bit:0},t.Q={bit:3},t.H={bit:2},t.isValid=function(e){return e&&void 0!==e.bit&&e.bit>=0&&e.bit<4},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"l":case"low":return t.L;case"m":case"medium":return t.M;case"q":case"quartile":return t.Q;case"h":case"high":return t.H;default:throw new Error("Unknown EC Level: "+e)}}(e)}catch(e){return n}}},526:(e,t,n)=>{const r=n(242).getSymbolSize;t.getPositions=function(e){const t=r(e);return[[0,0],[t-7,0],[0,t-7]]}},642:(e,t,n)=>{const r=n(242),o=r.getBCHDigit(1335);t.getEncodedBits=function(e,t){const n=e.bit<<3|t;let a=n<<10;for(;r.getBCHDigit(a)-o>=0;)a^=1335<<r.getBCHDigit(a)-o;return 21522^(n<<10|a)}},729:(e,t)=>{const n=new Uint8Array(512),r=new Uint8Array(256);!function(){let e=1;for(let t=0;t<255;t++)n[t]=e,r[e]=t,e<<=1,256&e&&(e^=285);for(let e=255;e<512;e++)n[e]=n[e-255]}(),t.log=function(e){if(e<1)throw new Error("log("+e+")");return r[e]},t.exp=function(e){return n[e]},t.mul=function(e,t){return 0===e||0===t?0:n[r[e]+r[t]]}},442:(e,t,n)=>{const r=n(910),o=n(242);function a(e){this.mode=r.KANJI,this.data=e}a.getBitsLength=function(e){return 13*e},a.prototype.getLength=function(){return this.data.length},a.prototype.getBitsLength=function(){return a.getBitsLength(this.data.length)},a.prototype.write=function(e){let t;for(t=0;t<this.data.length;t++){let n=o.toSJIS(this.data[t]);if(n>=33088&&n<=40956)n-=33088;else{if(!(n>=57408&&n<=60351))throw new Error("Invalid SJIS character: "+this.data[t]+"\nMake sure your charset is UTF-8");n-=49472}n=192*(n>>>8&255)+(255&n),e.put(n,13)}},e.exports=a},126:(e,t)=>{t.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};const n=3,r=3,o=40,a=10;function i(e,n,r){switch(e){case t.Patterns.PATTERN000:return(n+r)%2==0;case t.Patterns.PATTERN001:return n%2==0;case t.Patterns.PATTERN010:return r%3==0;case t.Patterns.PATTERN011:return(n+r)%3==0;case t.Patterns.PATTERN100:return(Math.floor(n/2)+Math.floor(r/3))%2==0;case t.Patterns.PATTERN101:return n*r%2+n*r%3==0;case t.Patterns.PATTERN110:return(n*r%2+n*r%3)%2==0;case t.Patterns.PATTERN111:return(n*r%3+(n+r)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}}t.isValid=function(e){return null!=e&&""!==e&&!isNaN(e)&&e>=0&&e<=7},t.from=function(e){return t.isValid(e)?parseInt(e,10):void 0},t.getPenaltyN1=function(e){const t=e.size;let r=0,o=0,a=0,i=null,c=null;for(let l=0;l<t;l++){o=a=0,i=c=null;for(let u=0;u<t;u++){let t=e.get(l,u);t===i?o++:(o>=5&&(r+=n+(o-5)),i=t,o=1),t=e.get(u,l),t===c?a++:(a>=5&&(r+=n+(a-5)),c=t,a=1)}o>=5&&(r+=n+(o-5)),a>=5&&(r+=n+(a-5))}return r},t.getPenaltyN2=function(e){const t=e.size;let n=0;for(let r=0;r<t-1;r++)for(let o=0;o<t-1;o++){const t=e.get(r,o)+e.get(r,o+1)+e.get(r+1,o)+e.get(r+1,o+1);4!==t&&0!==t||n++}return n*r},t.getPenaltyN3=function(e){const t=e.size;let n=0,r=0,a=0;for(let o=0;o<t;o++){r=a=0;for(let i=0;i<t;i++)r=r<<1&2047|e.get(o,i),i>=10&&(1488===r||93===r)&&n++,a=a<<1&2047|e.get(i,o),i>=10&&(1488===a||93===a)&&n++}return n*o},t.getPenaltyN4=function(e){let t=0;const n=e.data.length;for(let r=0;r<n;r++)t+=e.data[r];return Math.abs(Math.ceil(100*t/n/5)-10)*a},t.applyMask=function(e,t){const n=t.size;for(let r=0;r<n;r++)for(let o=0;o<n;o++)t.isReserved(o,r)||t.xor(o,r,i(e,o,r))},t.getBestMask=function(e,n){const r=Object.keys(t.Patterns).length;let o=0,a=1/0;for(let i=0;i<r;i++){n(i),t.applyMask(i,e);const r=t.getPenaltyN1(e)+t.getPenaltyN2(e)+t.getPenaltyN3(e)+t.getPenaltyN4(e);t.applyMask(i,e),r<a&&(a=r,o=i)}return o}},910:(e,t,n)=>{const r=n(114),o=n(7);t.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},t.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},t.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},t.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},t.MIXED={bit:-1},t.getCharCountIndicator=function(e,t){if(!e.ccBits)throw new Error("Invalid mode: "+e);if(!r.isValid(t))throw new Error("Invalid version: "+t);return t>=1&&t<10?e.ccBits[0]:t<27?e.ccBits[1]:e.ccBits[2]},t.getBestModeForData=function(e){return o.testNumeric(e)?t.NUMERIC:o.testAlphanumeric(e)?t.ALPHANUMERIC:o.testKanji(e)?t.KANJI:t.BYTE},t.toString=function(e){if(e&&e.id)return e.id;throw new Error("Invalid mode")},t.isValid=function(e){return e&&e.bit&&e.ccBits},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"numeric":return t.NUMERIC;case"alphanumeric":return t.ALPHANUMERIC;case"kanji":return t.KANJI;case"byte":return t.BYTE;default:throw new Error("Unknown mode: "+e)}}(e)}catch(e){return n}}},85:(e,t,n)=>{const r=n(910);function o(e){this.mode=r.NUMERIC,this.data=e.toString()}o.getBitsLength=function(e){return 10*Math.floor(e/3)+(e%3?e%3*3+1:0)},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(e){let t,n,r;for(t=0;t+3<=this.data.length;t+=3)n=this.data.substr(t,3),r=parseInt(n,10),e.put(r,10);const o=this.data.length-t;o>0&&(n=this.data.substr(t),r=parseInt(n,10),e.put(r,3*o+1))},e.exports=o},143:(e,t,n)=>{const r=n(729);t.mul=function(e,t){const n=new Uint8Array(e.length+t.length-1);for(let o=0;o<e.length;o++)for(let a=0;a<t.length;a++)n[o+a]^=r.mul(e[o],t[a]);return n},t.mod=function(e,t){let n=new Uint8Array(e);for(;n.length-t.length>=0;){const e=n[0];for(let o=0;o<t.length;o++)n[o]^=r.mul(t[o],e);let o=0;for(;o<n.length&&0===n[o];)o++;n=n.slice(o)}return n},t.generateECPolynomial=function(e){let n=new Uint8Array([1]);for(let o=0;o<e;o++)n=t.mul(n,new Uint8Array([1,r.exp(o)]));return n}},115:(e,t,n)=>{const r=n(242),o=n(908),a=n(245),i=n(280),c=n(845),l=n(526),u=n(126),s=n(393),d=n(882),f=n(103),h=n(642),p=n(910),m=n(130);function v(e,t,n){const r=e.size,o=h.getEncodedBits(t,n);let a,i;for(a=0;a<15;a++)i=1==(o>>a&1),a<6?e.set(a,8,i,!0):a<8?e.set(a+1,8,i,!0):e.set(r-15+a,8,i,!0),a<8?e.set(8,r-a-1,i,!0):a<9?e.set(8,15-a-1+1,i,!0):e.set(8,15-a-1,i,!0);e.set(r-8,8,1,!0)}function _(e,t,n){const o=new a;n.forEach((function(t){o.put(t.mode.bit,4),o.put(t.getLength(),p.getCharCountIndicator(t.mode,e)),t.write(o)}));const i=8*(r.getSymbolTotalCodewords(e)-s.getTotalCodewordsCount(e,t));for(o.getLengthInBits()+4<=i&&o.put(0,4);o.getLengthInBits()%8!=0;)o.putBit(0);const c=(i-o.getLengthInBits())/8;for(let e=0;e<c;e++)o.put(e%2?17:236,8);return function(e,t,n){const o=r.getSymbolTotalCodewords(t),a=s.getTotalCodewordsCount(t,n),i=o-a,c=s.getBlocksCount(t,n),l=c-o%c,u=Math.floor(o/c),f=Math.floor(i/c),h=f+1,p=u-f,m=new d(p);let v=0;const _=new Array(c),y=new Array(c);let g=0;const b=new Uint8Array(e.buffer);for(let e=0;e<c;e++){const t=e<l?f:h;_[e]=b.slice(v,v+t),y[e]=m.encode(_[e]),v+=t,g=Math.max(g,t)}const C=new Uint8Array(o);let w,S,A=0;for(w=0;w<g;w++)for(S=0;S<c;S++)w<_[S].length&&(C[A++]=_[S][w]);for(w=0;w<p;w++)for(S=0;S<c;S++)C[A++]=y[S][w];return C}(o,e,t)}function y(e,t,n,o){let a;if(Array.isArray(e))a=m.fromArray(e);else{if("string"!=typeof e)throw new Error("Invalid data");{let r=t;if(!r){const t=m.rawSplit(e);r=f.getBestVersionForData(t,n)}a=m.fromString(e,r||40)}}const s=f.getBestVersionForData(a,n);if(!s)throw new Error("The amount of data is too big to be stored in a QR Code");if(t){if(t<s)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+s+".\n")}else t=s;const d=_(t,n,a),h=r.getSymbolSize(t),p=new i(h);return function(e,t){const n=e.size,r=l.getPositions(t);for(let t=0;t<r.length;t++){const o=r[t][0],a=r[t][1];for(let t=-1;t<=7;t++)if(!(o+t<=-1||n<=o+t))for(let r=-1;r<=7;r++)a+r<=-1||n<=a+r||(t>=0&&t<=6&&(0===r||6===r)||r>=0&&r<=6&&(0===t||6===t)||t>=2&&t<=4&&r>=2&&r<=4?e.set(o+t,a+r,!0,!0):e.set(o+t,a+r,!1,!0))}}(p,t),function(e){const t=e.size;for(let n=8;n<t-8;n++){const t=n%2==0;e.set(n,6,t,!0),e.set(6,n,t,!0)}}(p),function(e,t){const n=c.getPositions(t);for(let t=0;t<n.length;t++){const r=n[t][0],o=n[t][1];for(let t=-2;t<=2;t++)for(let n=-2;n<=2;n++)-2===t||2===t||-2===n||2===n||0===t&&0===n?e.set(r+t,o+n,!0,!0):e.set(r+t,o+n,!1,!0)}}(p,t),v(p,n,0),t>=7&&function(e,t){const n=e.size,r=f.getEncodedBits(t);let o,a,i;for(let t=0;t<18;t++)o=Math.floor(t/3),a=t%3+n-8-3,i=1==(r>>t&1),e.set(o,a,i,!0),e.set(a,o,i,!0)}(p,t),function(e,t){const n=e.size;let r=-1,o=n-1,a=7,i=0;for(let c=n-1;c>0;c-=2)for(6===c&&c--;;){for(let n=0;n<2;n++)if(!e.isReserved(o,c-n)){let r=!1;i<t.length&&(r=1==(t[i]>>>a&1)),e.set(o,c-n,r),a--,-1===a&&(i++,a=7)}if(o+=r,o<0||n<=o){o-=r,r=-r;break}}}(p,d),isNaN(o)&&(o=u.getBestMask(p,v.bind(null,p,n))),u.applyMask(o,p),v(p,n,o),{modules:p,version:t,errorCorrectionLevel:n,maskPattern:o,segments:a}}t.create=function(e,t){if(void 0===e||""===e)throw new Error("No input text");let n,a,i=o.M;return void 0!==t&&(i=o.from(t.errorCorrectionLevel,o.M),n=f.from(t.version),a=u.from(t.maskPattern),t.toSJISFunc&&r.setToSJISFunction(t.toSJISFunc)),y(e,n,i,a)}},882:(e,t,n)=>{const r=n(143);function o(e){this.genPoly=void 0,this.degree=e,this.degree&&this.initialize(this.degree)}o.prototype.initialize=function(e){this.degree=e,this.genPoly=r.generateECPolynomial(this.degree)},o.prototype.encode=function(e){if(!this.genPoly)throw new Error("Encoder not initialized");const t=new Uint8Array(e.length+this.degree);t.set(e);const n=r.mod(t,this.genPoly),o=this.degree-n.length;if(o>0){const e=new Uint8Array(this.degree);return e.set(n,o),e}return n},e.exports=o},7:(e,t)=>{const n="[0-9]+";let r="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";r=r.replace(/u/g,"\\u");const o="(?:(?![A-Z0-9 $%*+\\-./:]|"+r+")(?:.|[\r\n]))+";t.KANJI=new RegExp(r,"g"),t.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),t.BYTE=new RegExp(o,"g"),t.NUMERIC=new RegExp(n,"g"),t.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");const a=new RegExp("^"+r+"$"),i=new RegExp("^[0-9]+$"),c=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");t.testKanji=function(e){return a.test(e)},t.testNumeric=function(e){return i.test(e)},t.testAlphanumeric=function(e){return c.test(e)}},130:(e,t,n)=>{const r=n(910),o=n(85),a=n(260),i=n(424),c=n(442),l=n(7),u=n(242),s=n(987);function d(e){return unescape(encodeURIComponent(e)).length}function f(e,t,n){const r=[];let o;for(;null!==(o=e.exec(n));)r.push({data:o[0],index:o.index,mode:t,length:o[0].length});return r}function h(e){const t=f(l.NUMERIC,r.NUMERIC,e),n=f(l.ALPHANUMERIC,r.ALPHANUMERIC,e);let o,a;u.isKanjiModeEnabled()?(o=f(l.BYTE,r.BYTE,e),a=f(l.KANJI,r.KANJI,e)):(o=f(l.BYTE_KANJI,r.BYTE,e),a=[]);return t.concat(n,o,a).sort((function(e,t){return e.index-t.index})).map((function(e){return{data:e.data,mode:e.mode,length:e.length}}))}function p(e,t){switch(t){case r.NUMERIC:return o.getBitsLength(e);case r.ALPHANUMERIC:return a.getBitsLength(e);case r.KANJI:return c.getBitsLength(e);case r.BYTE:return i.getBitsLength(e)}}function m(e,t){let n;const l=r.getBestModeForData(e);if(n=r.from(t,l),n!==r.BYTE&&n.bit<l.bit)throw new Error('"'+e+'" cannot be encoded with mode '+r.toString(n)+".\n Suggested mode is: "+r.toString(l));switch(n!==r.KANJI||u.isKanjiModeEnabled()||(n=r.BYTE),n){case r.NUMERIC:return new o(e);case r.ALPHANUMERIC:return new a(e);case r.KANJI:return new c(e);case r.BYTE:return new i(e)}}t.fromArray=function(e){return e.reduce((function(e,t){return"string"==typeof t?e.push(m(t,null)):t.data&&e.push(m(t.data,t.mode)),e}),[])},t.fromString=function(e,n){const o=function(e){const t=[];for(let n=0;n<e.length;n++){const o=e[n];switch(o.mode){case r.NUMERIC:t.push([o,{data:o.data,mode:r.ALPHANUMERIC,length:o.length},{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.ALPHANUMERIC:t.push([o,{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.KANJI:t.push([o,{data:o.data,mode:r.BYTE,length:d(o.data)}]);break;case r.BYTE:t.push([{data:o.data,mode:r.BYTE,length:d(o.data)}])}}return t}(h(e,u.isKanjiModeEnabled())),a=function(e,t){const n={},o={start:{}};let a=["start"];for(let i=0;i<e.length;i++){const c=e[i],l=[];for(let e=0;e<c.length;e++){const u=c[e],s=""+i+e;l.push(s),n[s]={node:u,lastCount:0},o[s]={};for(let e=0;e<a.length;e++){const i=a[e];n[i]&&n[i].node.mode===u.mode?(o[i][s]=p(n[i].lastCount+u.length,u.mode)-p(n[i].lastCount,u.mode),n[i].lastCount+=u.length):(n[i]&&(n[i].lastCount=u.length),o[i][s]=p(u.length,u.mode)+4+r.getCharCountIndicator(u.mode,t))}}a=l}for(let e=0;e<a.length;e++)o[a[e]].end=0;return{map:o,table:n}}(o,n),i=s.find_path(a.map,"start","end"),c=[];for(let e=1;e<i.length-1;e++)c.push(a.table[i[e]].node);return t.fromArray(function(e){return e.reduce((function(e,t){const n=e.length-1>=0?e[e.length-1]:null;return n&&n.mode===t.mode?(e[e.length-1].data+=t.data,e):(e.push(t),e)}),[])}(c))},t.rawSplit=function(e){return t.fromArray(h(e,u.isKanjiModeEnabled()))}},242:(e,t)=>{let n;const r=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];t.getSymbolSize=function(e){if(!e)throw new Error('"version" cannot be null or undefined');if(e<1||e>40)throw new Error('"version" should be in range from 1 to 40');return 4*e+17},t.getSymbolTotalCodewords=function(e){return r[e]},t.getBCHDigit=function(e){let t=0;for(;0!==e;)t++,e>>>=1;return t},t.setToSJISFunction=function(e){if("function"!=typeof e)throw new Error('"toSJISFunc" is not a valid function.');n=e},t.isKanjiModeEnabled=function(){return void 0!==n},t.toSJIS=function(e){return n(e)}},114:(e,t)=>{t.isValid=function(e){return!isNaN(e)&&e>=1&&e<=40}},103:(e,t,n)=>{const r=n(242),o=n(393),a=n(908),i=n(910),c=n(114),l=r.getBCHDigit(7973);function u(e,t){return i.getCharCountIndicator(e,t)+4}function s(e,t){let n=0;return e.forEach((function(e){const r=u(e.mode,t);n+=r+e.getBitsLength()})),n}t.from=function(e,t){return c.isValid(e)?parseInt(e,10):t},t.getCapacity=function(e,t,n){if(!c.isValid(e))throw new Error("Invalid QR Code version");void 0===n&&(n=i.BYTE);const a=8*(r.getSymbolTotalCodewords(e)-o.getTotalCodewordsCount(e,t));if(n===i.MIXED)return a;const l=a-u(n,e);switch(n){case i.NUMERIC:return Math.floor(l/10*3);case i.ALPHANUMERIC:return Math.floor(l/11*2);case i.KANJI:return Math.floor(l/13);case i.BYTE:default:return Math.floor(l/8)}},t.getBestVersionForData=function(e,n){let r;const o=a.from(n,a.M);if(Array.isArray(e)){if(e.length>1)return function(e,n){for(let r=1;r<=40;r++)if(s(e,r)<=t.getCapacity(r,n,i.MIXED))return r}(e,o);if(0===e.length)return 1;r=e[0]}else r=e;return function(e,n,r){for(let o=1;o<=40;o++)if(n<=t.getCapacity(o,r,e))return o}(r.mode,r.getLength(),o)},t.getEncodedBits=function(e){if(!c.isValid(e)||e<7)throw new Error("Invalid QR Code version");let t=e<<12;for(;r.getBCHDigit(t)-l>=0;)t^=7973<<r.getBCHDigit(t)-l;return e<<12|t}},907:(e,t,n)=>{const r=n(653);t.render=function(e,t,n){let o=n,a=t;void 0!==o||t&&t.getContext||(o=t,t=void 0),t||(a=function(){try{return document.createElement("canvas")}catch(e){throw new Error("You need to specify a canvas element")}}()),o=r.getOptions(o);const i=r.getImageWidth(e.modules.size,o),c=a.getContext("2d"),l=c.createImageData(i,i);return r.qrToImageData(l.data,e,o),function(e,t,n){e.clearRect(0,0,t.width,t.height),t.style||(t.style={}),t.height=n,t.width=n,t.style.height=n+"px",t.style.width=n+"px"}(c,a,i),c.putImageData(l,0,0),a},t.renderToDataURL=function(e,n,r){let o=r;void 0!==o||n&&n.getContext||(o=n,n=void 0),o||(o={});const a=t.render(e,n,o),i=o.type||"image/png",c=o.rendererOpts||{};return a.toDataURL(i,c.quality)}},776:(e,t,n)=>{const r=n(653);function o(e,t){const n=e.a/255,r=t+'="'+e.hex+'"';return n<1?r+" "+t+'-opacity="'+n.toFixed(2).slice(1)+'"':r}function a(e,t,n){let r=e+t;return void 0!==n&&(r+=" "+n),r}t.render=function(e,t,n){const i=r.getOptions(t),c=e.modules.size,l=e.modules.data,u=c+2*i.margin,s=i.color.light.a?"<path "+o(i.color.light,"fill")+' d="M0 0h'+u+"v"+u+'H0z"/>':"",d="<path "+o(i.color.dark,"stroke")+' d="'+function(e,t,n){let r="",o=0,i=!1,c=0;for(let l=0;l<e.length;l++){const u=Math.floor(l%t),s=Math.floor(l/t);u||i||(i=!0),e[l]?(c++,l>0&&u>0&&e[l-1]||(r+=i?a("M",u+n,.5+s+n):a("m",o,0),o=0,i=!1),u+1<t&&e[l+1]||(r+=a("h",c),c=0)):o++}return r}(l,c,i.margin)+'"/>',f='viewBox="0 0 '+u+" "+u+'"',h='<svg xmlns="http://www.w3.org/2000/svg" '+(i.width?'width="'+i.width+'" height="'+i.width+'" ':"")+f+' shape-rendering="crispEdges">'+s+d+"</svg>\n";return"function"==typeof n&&n(null,h),h}},653:(e,t)=>{function n(e){if("number"==typeof e&&(e=e.toString()),"string"!=typeof e)throw new Error("Color should be defined as hex string");let t=e.slice().replace("#","").split("");if(t.length<3||5===t.length||t.length>8)throw new Error("Invalid hex color: "+e);3!==t.length&&4!==t.length||(t=Array.prototype.concat.apply([],t.map((function(e){return[e,e]})))),6===t.length&&t.push("F","F");const n=parseInt(t.join(""),16);return{r:n>>24&255,g:n>>16&255,b:n>>8&255,a:255&n,hex:"#"+t.slice(0,6).join("")}}t.getOptions=function(e){e||(e={}),e.color||(e.color={});const t=void 0===e.margin||null===e.margin||e.margin<0?4:e.margin,r=e.width&&e.width>=21?e.width:void 0,o=e.scale||4;return{width:r,scale:r?4:o,margin:t,color:{dark:n(e.color.dark||"#000000ff"),light:n(e.color.light||"#ffffffff")},type:e.type,rendererOpts:e.rendererOpts||{}}},t.getScale=function(e,t){return t.width&&t.width>=e+2*t.margin?t.width/(e+2*t.margin):t.scale},t.getImageWidth=function(e,n){const r=t.getScale(e,n);return Math.floor((e+2*n.margin)*r)},t.qrToImageData=function(e,n,r){const o=n.modules.size,a=n.modules.data,i=t.getScale(o,r),c=Math.floor((o+2*r.margin)*i),l=r.margin*i,u=[r.color.light,r.color.dark];for(let t=0;t<c;t++)for(let n=0;n<c;n++){let s=4*(t*c+n),d=r.color.light;if(t>=l&&n>=l&&t<c-l&&n<c-l){d=u[a[Math.floor((t-l)/i)*o+Math.floor((n-l)/i)]?1:0]}e[s++]=d.r,e[s++]=d.g,e[s++]=d.b,e[s]=d.a}}},81:(e,t,n)=>{"use strict";var r=n(661);function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var a=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],a=(0,r.useRef)(Date.now());(0,r.useEffect)((function(){var n=setTimeout((function(){Date.now()-a.current>=t&&(e(),a.current=Date.now())}),t-(Date.now()-a.current));return function(){clearTimeout(n)}}),[t].concat(o(n)))};t.ZP=a}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(400);var t=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),r=Math.abs,o=String.fromCharCode,a=Object.assign;function i(e){return e.trim()}function c(e,t,n){return e.replace(t,n)}function l(e,t){return e.indexOf(t)}function u(e,t){return 0|e.charCodeAt(t)}function s(e,t,n){return e.slice(t,n)}function d(e){return e.length}function f(e){return e.length}function h(e,t){return t.push(e),e}var p=1,m=1,v=0,_=0,y=0,g="";function b(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:p,column:m,length:i,return:""}}function C(e,t){return a(b("",null,null,"",null,null,0),e,{length:-e.length},t)}function w(){return y=_>0?u(g,--_):0,m--,10===y&&(m=1,p--),y}function S(){return y=_<v?u(g,_++):0,m++,10===y&&(m=1,p++),y}function A(){return u(g,_)}function M(){return _}function E(e,t){return s(g,e,t)}function L(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function O(e){return p=m=1,v=d(g=e),_=0,[]}function k(e){return g="",e}function x(e){return i(E(_-1,I(91===e?e+2:40===e?e+1:e)))}function N(e){for(;(y=A())&&y<33;)S();return L(e)>2||L(y)>3?"":" "}function P(e,t){for(;--t&&S()&&!(y<48||y>102||y>57&&y<65||y>70&&y<97););return E(e,M()+(t<6&&32==A()&&32==S()))}function I(e){for(;S();)switch(y){case e:return _;case 34:case 39:34!==e&&39!==e&&I(y);break;case 40:41===e&&I(e);break;case 92:S()}return _}function j(e,t){for(;S()&&e+y!==57&&(e+y!==84||47!==A()););return"/*"+E(t,_-1)+"*"+o(47===e?e:S())}function R(e){for(;!L(A());)S();return E(e,_)}var T="-ms-",B="-moz-",D="-webkit-",U="comm",z="rule",F="decl",H="@keyframes";function Y(e,t){for(var n="",r=f(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function V(e,t,n,r){switch(e.type){case"@import":case F:return e.return=e.return||e.value;case U:return"";case H:return e.return=e.value+"{"+Y(e.children,r)+"}";case z:e.value=e.props.join(",")}return d(n=Y(e.children,r))?e.return=e.value+"{"+n+"}":""}function $(e,t){switch(function(e,t){return(((t<<2^u(e,0))<<2^u(e,1))<<2^u(e,2))<<2^u(e,3)}(e,t)){case 5103:return D+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return D+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return D+e+B+e+T+e+e;case 6828:case 4268:return D+e+T+e+e;case 6165:return D+e+T+"flex-"+e+e;case 5187:return D+e+c(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return D+e+T+"flex-item-"+c(e,/flex-|-self/,"")+e;case 4675:return D+e+T+"flex-line-pack"+c(e,/align-content|flex-|-self/,"")+e;case 5548:return D+e+T+c(e,"shrink","negative")+e;case 5292:return D+e+T+c(e,"basis","preferred-size")+e;case 6060:return D+"box-"+c(e,"-grow","")+D+e+T+c(e,"grow","positive")+e;case 4554:return D+c(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return c(c(c(e,/(zoom-|grab)/,D+"$1"),/(image-set)/,D+"$1"),e,"")+e;case 5495:case 3959:return c(e,/(image-set\([^]*)/,D+"$1$`$1");case 4968:return c(c(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+D+e+e;case 4095:case 3583:case 4068:case 2532:return c(e,/(.+)-inline(.+)/,D+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(d(e)-1-t>6)switch(u(e,t+1)){case 109:if(45!==u(e,t+4))break;case 102:return c(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+B+(108==u(e,t+3)?"$3":"$2-$3"))+e;case 115:return~l(e,"stretch")?$(c(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==u(e,t+1))break;case 6444:switch(u(e,d(e)-3-(~l(e,"!important")&&10))){case 107:return c(e,":",":"+D)+e;case 101:return c(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+D+(45===u(e,14)?"inline-":"")+"box$3$1"+D+"$2$3$1"+T+"$2box$3")+e}break;case 5936:switch(u(e,t+11)){case 114:return D+e+T+c(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return D+e+T+c(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return D+e+T+c(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return D+e+T+e+e}return e}function Z(e){return k(G("",null,null,null,[""],e=O(e),0,[0],e))}function G(e,t,n,r,a,i,u,s,f){for(var p=0,m=0,v=u,_=0,y=0,g=0,b=1,C=1,E=1,L=0,O="",k=a,I=i,T=r,B=O;C;)switch(g=L,L=S()){case 40:if(108!=g&&58==B.charCodeAt(v-1)){-1!=l(B+=c(x(L),"&","&\f"),"&\f")&&(E=-1);break}case 34:case 39:case 91:B+=x(L);break;case 9:case 10:case 13:case 32:B+=N(g);break;case 92:B+=P(M()-1,7);continue;case 47:switch(A()){case 42:case 47:h(W(j(S(),M()),t,n),f);break;default:B+="/"}break;case 123*b:s[p++]=d(B)*E;case 125*b:case 59:case 0:switch(L){case 0:case 125:C=0;case 59+m:y>0&&d(B)-v&&h(y>32?J(B+";",r,n,v-1):J(c(B," ","")+";",r,n,v-2),f);break;case 59:B+=";";default:if(h(T=K(B,t,n,p,m,a,s,O,k=[],I=[],v),i),123===L)if(0===m)G(B,t,T,T,k,i,v,s,I);else switch(_){case 100:case 109:case 115:G(e,T,T,r&&h(K(e,T,T,0,0,a,s,O,a,k=[],v),I),a,I,v,s,r?k:I);break;default:G(B,T,T,T,[""],I,0,s,I)}}p=m=y=0,b=E=1,O=B="",v=u;break;case 58:v=1+d(B),y=g;default:if(b<1)if(123==L)--b;else if(125==L&&0==b++&&125==w())continue;switch(B+=o(L),L*b){case 38:E=m>0?1:(B+="\f",-1);break;case 44:s[p++]=(d(B)-1)*E,E=1;break;case 64:45===A()&&(B+=x(S())),_=A(),m=v=d(O=B+=R(M())),L++;break;case 45:45===g&&2==d(B)&&(b=0)}}return i}function K(e,t,n,o,a,l,u,d,h,p,m){for(var v=a-1,_=0===a?l:[""],y=f(_),g=0,C=0,w=0;g<o;++g)for(var S=0,A=s(e,v+1,v=r(C=u[g])),M=e;S<y;++S)(M=i(C>0?_[S]+" "+A:c(A,/&\f/g,_[S])))&&(h[w++]=M);return b(e,t,n,0===a?z:d,h,p,m)}function W(e,t,n){return b(e,t,n,U,o(y),s(e,2,-2),0)}function J(e,t,n,r){return b(e,t,n,F,s(e,0,r),s(e,r+1,-1),r)}var q=function(e,t,n){for(var r=0,o=0;r=o,o=A(),38===r&&12===o&&(t[n]=1),!L(o);)S();return E(e,_)},Q=function(e,t){return k(function(e,t){var n=-1,r=44;do{switch(L(r)){case 0:38===r&&12===A()&&(t[n]=1),e[n]+=q(_-1,t,n);break;case 2:e[n]+=x(r);break;case 4:if(44===r){e[++n]=58===A()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=o(r)}}while(r=S());return e}(O(e),t))},X=new WeakMap,ee=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||X.get(n))&&!r){X.set(e,!0);for(var o=[],a=Q(t,o),i=n.props,c=0,l=0;c<a.length;c++)for(var u=0;u<i.length;u++,l++)e.props[l]=o[c]?a[c].replace(/&\f/g,i[u]):i[u]+" "+a[c]}}},te=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case F:e.return=$(e.value,e.length);break;case H:return Y([C(e,{value:c(e.value,"@","@"+D)})],r);case z:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=t.exec(e))?e[0]:e}(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return Y([C(e,{props:[c(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return Y([C(e,{props:[c(t,/:(plac\w+)/,":-webkit-input-$1")]}),C(e,{props:[c(t,/:(plac\w+)/,":-moz-$1")]}),C(e,{props:[c(t,/:(plac\w+)/,T+"input-$1")]})],r)}return""}))}}];const re=function(e){var n=e.key;if("css"===n){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o=e.stylisPlugins||ne;var a,i,c={},l=[];a=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+n+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)c[t[n]]=!0;l.push(e)}));var u,s,d,h,p=[V,(h=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&h(e)})],m=(s=[ee,te].concat(o,p),d=f(s),function(e,t,n,r){for(var o="",a=0;a<d;a++)o+=s[a](e,t,n,r)||"";return o});i=function(e,t,n,r){u=n,Y(Z(e?e+"{"+t.styles+"}":t.styles),m),r&&(v.inserted[t.name]=!0)};var v={key:n,sheet:new t({key:n,container:a,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:c,registered:{},insert:i};return v.sheet.hydrate(l),v};const oe=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)};const ae={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};const ie=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var ce=/[A-Z]|^ms/g,le=/_EMO_([^_]+?)_([^]*?)_EMO_/g,ue=function(e){return 45===e.charCodeAt(1)},se=function(e){return null!=e&&"boolean"!=typeof e},de=ie((function(e){return ue(e)?e:e.replace(ce,"-$&").toLowerCase()})),fe=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(le,(function(e,t,n){return pe={name:t,styles:n,next:pe},t}))}return 1===ae[e]||ue(e)||"number"!=typeof t||0===t?t:t+"px"};function he(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return pe={name:n.name,styles:n.styles,next:pe},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)pe={name:r.name,styles:r.styles,next:pe},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=he(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":se(i)&&(r+=de(a)+":"+fe(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var c=he(e,t,i);switch(a){case"animation":case"animationName":r+=de(a)+":"+c+";";break;default:r+=a+"{"+c+"}"}}else for(var l=0;l<i.length;l++)se(i[l])&&(r+=de(a)+":"+fe(a,i[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=pe,a=n(e);return pe=o,he(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var pe,me=/label:\s*([^\s;\n{]+)\s*(;|$)/g;var ve=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";pe=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=he(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=he(n,t,e[i]),r&&(o+=a[i]);me.lastIndex=0;for(var c,l="";null!==(c=me.exec(o));)l+="-"+c[1];return{name:oe(o)+l,styles:o,next:pe}};function _e(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var ye=function(e,t,n){!function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)}(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0);o=o.next}while(void 0!==o)}};function ge(e,t){if(void 0===e.inserted[t.name])return e.insert("",t,e.sheet,!0)}function be(e,t,n){var r=[],o=_e(e,r,n);return r.length<2?n:o+t(r)}var Ce=function e(t){for(var n="",r=0;r<t.length;r++){var o=t[r];if(null!=o){var a=void 0;switch(typeof o){case"boolean":break;case"object":if(Array.isArray(o))a=e(o);else for(var i in a="",o)o[i]&&i&&(a&&(a+=" "),a+=i);break;default:a=o}a&&(n&&(n+=" "),n+=a)}}return n};const we=function(e){var t=re(e);t.sheet.speedy=function(e){this.isSpeedy=e},t.compat=!0;var n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=ve(n,t.registered,void 0);return ye(t,o,!1),t.key+"-"+o.name};return{css:n,cx:function(){for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return be(t.registered,n,Ce(r))},injectGlobal:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=ve(n,t.registered);ge(t,o)},keyframes:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=ve(n,t.registered),a="animation-"+o.name;return ge(t,{name:o.name,styles:"@keyframes "+a+"{"+o.styles+"}"}),a},hydrate:function(e){e.forEach((function(e){t.inserted[e]=!0}))},flush:function(){t.registered={},t.inserted={},t.sheet.flush()},sheet:t.sheet,cache:t,getRegisteredStyles:_e.bind(null,t.registered),merge:be.bind(null,t.registered,n)}};var Se=we({key:"css"}),Ae=(Se.flush,Se.hydrate,Se.cx),Me=(Se.merge,Se.getRegisteredStyles,Se.injectGlobal,Se.keyframes,Se.css),Ee=(Se.sheet,Se.cache,n(661));function Le(e){var t=Ee.default.createContext(null);return{Provider:function(n){var r=e(n.initialState);return Ee.default.createElement(t.Provider,{value:r},n.children)},useContainer:function(){var e=Ee.default.useContext(t);if(null===e)throw new Error("Component must be wrapped with <Container.Provider>");return e}}}var Oe=function(e){return(e+1)%1e6};function ke(){return(0,Ee.useReducer)(Oe,0)[1]}function xe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const Pe=function(e){var t=(0,Ee.useRef)("function"==typeof e?e():function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xe(Object(n),!0).forEach((function(t){Ne(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e)),n=ke(),r=(0,Ee.useRef)({get:function(e,t,r){return/(__set)$/g.test(t)?function(r){e[t.replace(/(__set)$/g,"")]!=r&&(e[t.replace(/(__set)$/g,"")]=r,n())}:Reflect.get.apply(Reflect,arguments)},set:function(e,t,r){return e[t]==r||(Reflect.set.apply(Reflect,arguments),n()),Reflect.set.apply(Reflect,arguments)}});return(0,Ee.useRef)(new Proxy(t.current,r.current)).current};function Ie(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return je(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return je(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function je(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Re=Le((function(){var e=Pe({callbacks:[]});return{register:(0,Ee.useCallback)((function(t){e.callbacks.push(t)}),[]),push:(0,Ee.useCallback)((function(t){var n,r=Ie(e.callbacks);try{for(r.s();!(n=r.n()).done;){(0,n.value)(t)}}catch(e){r.e(e)}finally{r.f()}}),[])}}));var Te=n(81),Be=n(592);Array.prototype.last=function(){return this[this.length-1]};var De=function(e,t){return(e%=t)<0&&(e+=t),e},Ue=function(e,t){return Math.abs(e-t)},ze=[[0,-1],[1,0],[0,1],[-1,0]],Fe=[[-1,-1],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0]],He=[[0,0],[1,0],[1,1],[0,1]],Ye=!1,Ve=["L","M","Q","H"];const $e=Le((function(){var e=Pe({isValid:!1,content:location.href.replace(/(\/+)$/g,""),margin:2,size:21,shapes:[],roundCorner:0,eyeRoundCorner:0,foregroundColor:[0,0,0],backgroundColor:[0,0,100]});return(0,Te.ZP)((function(){if(e.isValid&&e.content&&0!=e.content.length){for(var t=Be.create(e.content,{errorCorrectionLevel:"L"}).modules,n=1;t.size<=21&&n<4;)t=Be.create(e.content,{errorCorrectionLevel:Ve[n]}).modules,n++;for(var r=t.size,o=t.data,a=r+2*e.margin,i=Array(a),c=0;c<a;c++){i[c]=Array(a);for(var l=0;l<a;l++){var u=l-e.margin,s=c-e.margin;i[c][l]={groupIndex:void 0},i[c][l].data=u<0||s<0||u>=r||s>=r?0:o[s*r+u],i[c][l].type=u<0||s<0||u>=r||s>=r?0:u<7&&s<7||u>=r-7&&s<7||u<7&&s>=r-7?1:0}}for(var d=[],f=[],h=-1,p=[],m=!1,v=function e(t){if(null!=i[t[1]][t[0]].groupIndex)return!1;var n=i[t[1]][t[0]].data;for(f[h]||(f[h]={data:n,blocks:[]}),i[t[1]][t[0]].groupIndex=h,f[h].blocks.push([t[0],t[1]]),m=!0,n?Fe.forEach((function(e){var n=t[0]+e[0],r=t[1]+e[1];n<0||r<0||n>=a||r>=a||i[r][n].data&&p.push([n,r])})):ze.forEach((function(e){var n=t[0]+e[0],r=t[1]+e[1];n<0||r<0||n>=a||r>=a||i[r][n].data||p.push([n,r])}));p.length;)e(p.shift());return m},_=0;_<a;_++)for(var y=0;y<a;y++)v([y,_]),m&&(h++,p=[],m=!1);for(var g=function(e){for(var t=f[e],n=[],r=[],o=0,a=!1;!(a||++o>999999999);)if(0!=n.length){var c=n.last(),l=r.last(),u=[[0,-1],[0,0],[-1,0]],s=[[0,-1],[1,0],[0,1]],h=[0,1,2];t.data==Ye?1==l?(u=[[0,0],[0,-1],[-1,-1]],s=[[0,1],[1,0],[0,-1]],h=[2,1,0]):2==l?(u=[[-1,0],[0,0],[0,-1]],s=[[-1,0],[0,1],[1,0]],h=[3,2,1]):3==l?(u=[[-1,-1],[-1,0],[0,0]],s=[[0,-1],[-1,0],[0,1]],h=[0,3,2]):0==l&&(u=[[0,-1],[-1,-1],[-1,0]],s=[[1,0],[0,-1],[-1,0]],h=[1,0,3]):1==l?(u=[[0,-1],[0,0],[-1,0]],s=[[0,-1],[1,0],[0,1]],h=[0,1,2]):2==l?(u=[[0,0],[-1,0],[-1,-1]],s=[[1,0],[0,1],[-1,0]],h=[1,2,3]):3==l?(u=[[-1,0],[-1,-1],[0,-1]],s=[[0,1],[-1,0],[0,-1]],h=[2,3,0]):0==l&&(u=[[-1,-1],[0,-1],[0,0]],s=[[-1,0],[0,-1],[1,0]],h=[3,0,1]);for(var p=0;p<3;p++){var m=u[p],v=c[0]+m[0],_=c[1]+m[1],y=i[_][v];if(t.data==Ye?y.groupIndex!=e:y.groupIndex==e){var g=c[0]+s[p][0],b=c[1]+s[p][1];if(l==h[p]&&n.pop(),g==n[0][0]&&b==n[0][1]){a=!0;break}n.push([g,b]),r.push(h[p]);break}}}else if(t.data==Ye){var C=t.blocks[0][0],w=t.blocks[0][1],S=C+1,A=w;n.push([C,w]),r.push(void 0),n.push([S,A]),r.push(1)}else for(var M=0;M<4;M++){var E=ze[M],L=t.blocks[0][0]+E[0],O=t.blocks[0][1]+E[1];if(i[O][L].groupIndex!=e){var k=t.blocks[0][0],x=t.blocks[0][1],N=De(M+1,4),P=k+He[M][0],I=x+He[M][1],j=P+ze[N][0],R=I+ze[N][1];n.push([P,I]),r.push(void 0),n.push([j,R]),r.push(N);break}}if(0==n.length)return"continue";var T=function(){if(4!=n.length)return!1;if(t.data!=Ye)return!1;for(var e=1/0,r=1/0,o=0,a=0,i=0;i<n.length;i++)e=Math.min(e,n[i][0]),r=Math.min(r,n[i][1]),o=Math.max(o,n[i][0]),a=Math.max(a,n[i][1]);return 3==Ue(e,o)&&3==Ue(r,a)}(),B=i[t.blocks[0][1]][t.blocks[0][0]].type||T;d.push([n,B])},b=0;b<f.length;b++)g(b);e.size=a,e.shapes=d}}),200,[e.content,e.margin]),[e]}));const Ze=Le((function(){return[Pe({size:320,excludeBackground:!1})]}));var Ge=n(396);const Ke=function(t){return(0,e.h)("div",{className:"section-line"},(0,e.h)("div",null,t.children),(0,e.h)("hr",null))};const We=function(e){(0,Ee.useEffect)(e,[])};const Je=function(t){var n=Re.useContainer(),r=Pe({id:0,messages:[]}),o=(0,Ee.useCallback)((function(e){var t=r.id;r.id++,r.messages.push({id:t,text:e}),setTimeout((function(){r.messages=r.messages.filter((function(e){return e.id!=t}))}),5e3)}),[]);return We((function(){n.register(o)})),(0,e.h)("div",{className:"alert"},r.messages.map((function(t){return(0,e.h)("div",{key:t.id,className:"message"},t.text)})))};var qe;function Qe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Xe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Xe(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const et=function(t){var n,r,o=(0,Ge.sO)(),a=Qe((0,Ge.eJ)(null),2),i=a[0],c=a[1],l=(0,Ge.I4)((function(){o.current&&(o.current.classList.add("is-measuring"),c(Math.min(o.current.clientWidth,o.current.clientHeight)),o.current.classList.remove("is-measuring"))})),u=(0,Ge.I4)((function(){return l()}));return We((function(){return l(),window.addEventListener("resize",u),function(){window.removeEventListener("resize",u)}}),[]),(0,e.h)("div",{ref:o,className:"preview-qrcode-wrapper"},(0,e.h)("div",{className:Ae("preview-qrcode-container",Me(qe||(n=["width: ","px; height: ","px;"],r||(r=n.slice(0)),qe=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(r)}}))),i,i))},t.children))};var tt=function(e,t){return(e%=t)<0&&(e+=t),e},nt=function(e){return 0==e?0:e/Math.abs(e)},rt=function(e,t){return e>=0&&t>=0?Math.max(e,t):Math.min(e,t)};const ot=function(e){for(var t=e.size,n=e.shapes,r=e.roundCorner,o=e.eyeRoundCorner,a=e.canvas,i=void 0===a?{size:void 0}:a,c=null!=(null==i?void 0:i.size)?i.size/t:1,l="",u=0;u<n.length;u++){var s=n[u][0],d=n[u][1],f=r/100||0,h=o/100||0;if(!d&&0==f||d&&0==f&&0==h)for(var p=0;p<s.length;p++)l+=0==p?"M":"L",l+="".concat(s[p][0]*c,",").concat(s[p][1]*c);else for(var m=0;m<s.length;m++){l+=0==m?"M":"L";var v=s[tt(m-1,s.length)],_=s[m],y=s[tt(m+1,s.length)],g=nt(v[0]-_[0]),b=nt(v[1]-_[1]),C=nt(y[0]-_[0]),w=nt(y[1]-_[1]),S=_[0],A=_[1],M=_[0],E=_[1],L=_[0],O=_[1];if(d){var k=Math.abs(v[0]-_[0])/2,x=Math.abs(v[1]-_[1])/2,N=Math.abs(y[0]-_[0])/2,P=Math.abs(y[1]-_[1])/2;S=_[0]+g*rt(f/2,k*h),A=_[1]+b*rt(f/2,x*h),L=_[0]+C*rt(f/2,N*h),O=_[1]+w*rt(f/2,P*h)}else S=_[0]+g*f/2,A=_[1]+b*f/2,L=_[0]+C*f/2,O=_[1]+w*f/2;l+="".concat(S*c,",").concat(A*c," L").concat(S*c,",").concat(A*c," Q").concat(M*c,",").concat(E*c," ").concat(L*c,",").concat(O*c)}l+="z"}return l};function at(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return it(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return it(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function it(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ct=function(e){var t=at(e,4),n=t[0],r=t[1],o=t[2],a=t[3],i=void 0===a?100:a;return"hsla(".concat(n,", ").concat(r,"%, ").concat(o,"%, ").concat(i,"%)")};function lt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ut(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ut(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ut(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const st=function(t){var n=lt($e.useContainer(),1)[0],r=Pe({viewBox:"0 0 1 1",d:""});return(0,Te.ZP)((function(){r.d=ot({size:n.size,shapes:n.shapes,roundCorner:n.roundCorner,eyeRoundCorner:n.eyeRoundCorner}),r.viewBox="0 0 ".concat(n.size," ").concat(n.size)}),20,[n.size,n.shapes,n.roundCorner,n.eyeRoundCorner]),(0,Ee.useMemo)((function(){return n.isValid?(0,e.h)("div",{className:Ae("preview",{"is-not-valid":!n.isValid})},(0,e.h)("svg",{viewBox:r.viewBox,style:{backgroundColor:ct(n.backgroundColor)}},(0,e.h)("path",{d:"M0,0H".concat(n.size,"V").concat(n.size,"H0z"),fill:ct(n.backgroundColor)}),(0,e.h)("path",{d:r.d,"fill-rule":"evenodd",fill:ct(n.foregroundColor)}))):(0,e.h)("div",{className:"placeholder"},(0,e.h)("svg",{viewBox:"0 0 19 19"},(0,e.h)("path",{class:"cls-1",d:"M 2 4.5 L 2 3.5 L 2 2.5 C 2 2.362 2.056 2.237 2.147 2.147 C 2.237 2.056 2.362 2 2.5 2 L 3.5 2 L 4.5 2 C 4.638 2 4.763 2.056 4.854 2.147 C 4.944 2.237 5 2.362 5 2.5 L 5 3.5 L 5 4.5 C 5 4.638 4.944 4.763 4.854 4.854 C 4.763 4.944 4.638 5 4.5 5 L 3.5 5 L 2.5 5 C 2.362 5 2.237 4.944 2.147 4.854 C 2.056 4.763 2 4.638 2 4.5 Z M 3 4 L 3.5 4 L 4 4 L 4 3.5 L 4 3 L 3.5 3 L 3 3 L 3 3.5 Z M 7 0.5 L 7 3.5 L 7 6.5 C 7 6.638 6.944 6.763 6.854 6.854 C 6.763 6.944 6.638 7 6.5 7 L 3.5 7 L 0.5 7 C 0.362 7 0.237 6.944 0.147 6.854 C 0.056 6.763 0 6.638 0 6.5 L 0 3.5 L 0 0.5 C 0 0.362 0.056 0.237 0.147 0.147 C 0.237 0.056 0.362 0 0.5 0 L 3.5 0 L 6.5 0 C 6.638 0 6.763 0.056 6.854 0.147 C 6.944 0.237 7 0.362 7 0.5 Z M 6 1 L 3.5 1 L 1 1 L 1 3.5 L 1 6 L 3.5 6 L 6 6 L 6 3.5 Z M 2 16.5 L 2 15.5 L 2 14.5 C 2 14.362 2.056 14.237 2.147 14.147 C 2.237 14.056 2.362 14 2.5 14 L 3.5 14 L 4.5 14 C 4.638 14 4.763 14.056 4.854 14.147 C 4.944 14.237 5 14.362 5 14.5 L 5 15.5 L 5 16.5 C 5 16.638 4.944 16.763 4.854 16.854 C 4.763 16.944 4.638 17 4.5 17 L 3.5 17 L 2.5 17 C 2.362 17 2.237 16.944 2.147 16.854 C 2.056 16.763 2 16.638 2 16.5 Z M 3 16 L 3.5 16 L 4 16 L 4 15.5 L 4 15 L 3.5 15 L 3 15 L 3 15.5 Z M 7 12.5 L 7 15.5 L 7 18.5 C 7 18.638 6.944 18.763 6.854 18.854 C 6.763 18.944 6.638 19 6.5 19 L 3.5 19 L 0.5 19 C 0.362 19 0.237 18.944 0.147 18.854 C 0.056 18.763 0 18.638 0 18.5 L 0 15.5 L 0 12.5 C 0 12.362 0.056 12.237 0.147 12.147 C 0.237 12.056 0.362 12 0.5 12 L 3.5 12 L 6.5 12 C 6.638 12 6.763 12.056 6.854 12.147 C 6.944 12.237 7 12.362 7 12.5 Z M 6 13 L 3.5 13 L 1 13 L 1 15.5 L 1 18 L 3.5 18 L 6 18 L 6 15.5 Z M 14 4.5 L 14 3.5 L 14 2.5 C 14 2.362 14.056 2.237 14.147 2.147 C 14.237 2.056 14.362 2 14.5 2 L 15.5 2 L 16.5 2 C 16.638 2 16.763 2.056 16.854 2.147 C 16.944 2.237 17 2.362 17 2.5 L 17 3.5 L 17 4.5 C 17 4.638 16.944 4.763 16.854 4.854 C 16.763 4.944 16.638 5 16.5 5 L 15.5 5 L 14.5 5 C 14.362 5 14.237 4.944 14.147 4.854 C 14.056 4.763 14 4.638 14 4.5 Z M 15 4 L 15.5 4 L 16 4 L 16 3.5 L 16 3 L 15.5 3 L 15 3 L 15 3.5 Z M 19 0.5 L 19 3.5 L 19 6.5 C 19 6.638 18.944 6.763 18.854 6.854 C 18.763 6.944 18.638 7 18.5 7 L 15.5 7 L 12.5 7 C 12.362 7 12.237 6.944 12.147 6.854 C 12.056 6.763 12 6.638 12 6.5 L 12 3.5 L 12 0.5 C 12 0.362 12.056 0.237 12.147 0.147 C 12.237 0.056 12.362 0 12.5 0 L 15.5 0 L 18.5 0 C 18.638 0 18.763 0.056 18.854 0.147 C 18.944 0.237 19 0.362 19 0.5 Z M 18 1 L 15.5 1 L 13 1 L 13 3.5 L 13 6 L 15.5 6 L 18 6 L 18 3.5 Z M 8.067 0.75 C 7.971 0.584 7.983 0.396 8.067 0.25 C 8.151 0.104 8.308 0 8.5 0 L 9.5 0 L 10.5 0 C 10.59 0 10.676 0.024 10.75 0.067 C 10.825 0.11 10.888 0.173 10.933 0.25 C 11.029 0.417 11.017 0.604 10.933 0.75 C 10.849 0.896 10.692 1 10.5 1 L 9.5 1 L 8.5 1 C 8.411 1 8.325 0.976 8.25 0.933 C 8.175 0.89 8.112 0.828 8.067 0.75 Z M 8.067 4.75 C 7.971 4.584 7.983 4.396 8.067 4.25 C 8.151 4.104 8.308 4 8.5 4 L 9.5 4 L 10.5 4 C 10.59 4 10.676 4.024 10.75 4.067 C 10.825 4.11 10.888 4.172 10.933 4.25 C 11.029 4.417 11.017 4.604 10.933 4.75 C 10.849 4.896 10.692 5 10.5 5 L 9.5 5 L 8.5 5 C 8.411 5 8.325 4.976 8.25 4.933 C 8.175 4.89 8.112 4.828 8.067 4.75 Z M 6.933 10.25 C 7.029 10.417 7.017 10.604 6.933 10.75 C 6.849 10.896 6.692 11 6.5 11 L 5.5 11 L 4.5 11 C 4.41 11 4.324 10.976 4.25 10.933 C 4.175 10.89 4.111 10.828 4.067 10.75 C 3.971 10.584 3.983 10.396 4.067 10.25 C 4.151 10.104 4.307 10 4.5 10 L 5.5 10 L 6.5 10 C 6.589 10 6.675 10.024 6.75 10.067 C 6.825 10.11 6.888 10.172 6.933 10.25 Z M 2.5 9 C 2.411 9 2.325 8.976 2.25 8.933 C 2.175 8.89 2.112 8.828 2.067 8.75 C 1.971 8.584 1.983 8.396 2.067 8.25 C 2.151 8.104 2.308 8 2.5 8 L 3.5 8 L 4.5 8 C 4.59 8 4.676 8.024 4.75 8.067 C 4.825 8.11 4.889 8.172 4.933 8.25 C 5.029 8.417 5.017 8.604 4.933 8.75 C 4.849 8.896 4.693 9 4.5 9 L 3.5 9 Z M 10.75 2.067 C 10.917 2.163 11 2.332 11 2.5 C 11 2.669 10.917 2.837 10.75 2.933 C 10.584 3.029 10.396 3.017 10.25 2.933 C 10.104 2.849 10 2.693 10 2.5 C 10 2.362 10.056 2.237 10.147 2.147 C 10.237 2.056 10.362 2 10.5 2 C 10.544 2 10.588 2.006 10.63 2.017 C 10.672 2.028 10.712 2.045 10.75 2.067 Z M 8 8 C 8 7.732 8.072 7.474 8.201 7.25 C 8.331 7.026 8.518 6.835 8.75 6.701 C 9.25 6.413 9.813 6.448 10.25 6.701 C 10.688 6.954 11 7.422 11 8 C 10.997 8.262 10.935 8.517 10.824 8.747 C 10.713 8.978 10.552 9.184 10.35 9.35 C 10.23 9.475 10.143 9.567 10.085 9.664 C 10.028 9.76 10 9.86 10 10 L 10 10.25 L 10 10.5 C 10 10.59 9.976 10.676 9.933 10.75 C 9.89 10.825 9.828 10.888 9.75 10.933 C 9.583 11.029 9.396 11.017 9.25 10.933 C 9.104 10.849 9 10.692 9 10.5 L 9 10.25 L 9 10 C 9.003 9.738 9.065 9.484 9.176 9.253 C 9.287 9.023 9.448 8.816 9.65 8.65 C 9.77 8.525 9.857 8.433 9.915 8.336 C 9.972 8.24 10 8.14 10 8 C 10 7.911 9.976 7.825 9.933 7.75 C 9.89 7.675 9.828 7.611 9.75 7.567 C 9.584 7.471 9.396 7.483 9.25 7.567 C 9.104 7.651 9 7.808 9 8 C 9 8.138 8.944 8.263 8.854 8.354 C 8.763 8.444 8.638 8.5 8.5 8.5 C 8.362 8.5 8.237 8.444 8.147 8.354 C 8.056 8.263 8 8.138 8 8 Z M 10 12 C 10 12.138 9.944 12.263 9.854 12.354 C 9.763 12.444 9.638 12.5 9.5 12.5 C 9.362 12.5 9.237 12.444 9.147 12.354 C 9.056 12.263 9 12.138 9 12 C 9 11.862 9.056 11.737 9.147 11.647 C 9.237 11.556 9.362 11.5 9.5 11.5 C 9.638 11.5 9.763 11.556 9.854 11.647 C 9.944 11.737 10 11.862 10 12 Z M 7 8.5 C 7 8.638 6.944 8.763 6.854 8.854 C 6.763 8.944 6.638 9 6.5 9 C 6.362 9 6.237 8.944 6.147 8.854 C 6.056 8.763 6 8.638 6 8.5 C 6 8.362 6.056 8.237 6.147 8.147 C 6.237 8.056 6.362 8 6.5 8 C 6.638 8 6.763 8.056 6.854 8.147 C 6.944 8.237 7 8.362 7 8.5 Z M 1 8.5 C 1 8.638 0.944 8.763 0.854 8.854 C 0.763 8.944 0.638 9 0.5 9 C 0.362 9 0.237 8.944 0.147 8.854 C 0.056 8.763 0 8.638 0 8.5 C 0 8.362 0.056 8.237 0.147 8.147 C 0.237 8.056 0.362 8 0.5 8 C 0.638 8 0.763 8.056 0.854 8.147 C 0.944 8.237 1 8.362 1 8.5 Z M 16.933 8.25 C 17.029 8.417 17.017 8.604 16.933 8.75 C 16.849 8.896 16.693 9 16.5 9 L 15.5 9 L 14.5 9 C 14.411 9 14.325 8.976 14.25 8.933 C 14.175 8.89 14.112 8.828 14.067 8.75 C 13.971 8.584 13.983 8.396 14.067 8.25 C 14.151 8.104 14.308 8 14.5 8 L 15.5 8 L 16.5 8 C 16.59 8 16.676 8.024 16.75 8.067 C 16.825 8.11 16.889 8.172 16.933 8.25 Z M 13 8.5 C 13 8.638 12.944 8.763 12.854 8.854 C 12.763 8.944 12.638 9 12.5 9 C 12.362 9 12.237 8.944 12.147 8.854 C 12.056 8.763 12 8.638 12 8.5 C 12 8.362 12.056 8.237 12.147 8.147 C 12.237 8.056 12.362 8 12.5 8 C 12.638 8 12.763 8.056 12.854 8.147 C 12.944 8.237 13 8.362 13 8.5 Z M 13 10.5 C 13 10.638 12.944 10.763 12.854 10.854 C 12.763 10.944 12.638 11 12.5 11 C 12.362 11 12.237 10.944 12.147 10.854 C 12.056 10.763 12 10.638 12 10.5 C 12 10.362 12.056 10.237 12.147 10.147 C 12.237 10.056 12.362 10 12.5 10 C 12.638 10 12.763 10.056 12.854 10.147 C 12.944 10.237 13 10.362 13 10.5 Z M 15 10.5 C 15 10.638 14.944 10.763 14.854 10.854 C 14.763 10.944 14.638 11 14.5 11 C 14.362 11 14.237 10.944 14.147 10.854 C 14.056 10.763 14 10.638 14 10.5 C 14 10.362 14.056 10.237 14.147 10.147 C 14.237 10.056 14.362 10 14.5 10 C 14.638 10 14.763 10.056 14.854 10.147 C 14.944 10.237 15 10.362 15 10.5 Z M 17 10.5 C 17 10.638 16.944 10.763 16.854 10.854 C 16.763 10.944 16.638 11 16.5 11 C 16.362 11 16.237 10.944 16.147 10.854 C 16.056 10.763 16 10.638 16 10.5 C 16 10.362 16.056 10.237 16.147 10.147 C 16.237 10.056 16.362 10 16.5 10 C 16.638 10 16.763 10.056 16.854 10.147 C 16.944 10.237 17 10.362 17 10.5 Z M 19 10.5 C 19 10.638 18.944 10.763 18.854 10.854 C 18.763 10.944 18.638 11 18.5 11 C 18.362 11 18.237 10.944 18.147 10.854 C 18.056 10.763 18 10.638 18 10.5 C 18 10.362 18.056 10.237 18.147 10.147 C 18.237 10.056 18.362 10 18.5 10 C 18.638 10 18.763 10.056 18.854 10.147 C 18.944 10.237 19 10.362 19 10.5 Z M 19 12.5 C 19 12.638 18.944 12.763 18.854 12.854 C 18.763 12.944 18.638 13 18.5 13 C 18.362 13 18.237 12.944 18.147 12.854 C 18.056 12.763 18 12.638 18 12.5 C 18 12.362 18.056 12.237 18.147 12.147 C 18.237 12.056 18.362 12 18.5 12 C 18.638 12 18.763 12.056 18.854 12.147 C 18.944 12.237 19 12.362 19 12.5 Z M 19 8.5 C 19 8.638 18.944 8.763 18.854 8.854 C 18.763 8.944 18.638 9 18.5 9 C 18.362 9 18.237 8.944 18.147 8.854 C 18.056 8.763 18 8.638 18 8.5 C 18 8.362 18.056 8.237 18.147 8.147 C 18.237 8.056 18.362 8 18.5 8 C 18.638 8 18.763 8.056 18.854 8.147 C 18.944 8.237 19 8.362 19 8.5 Z M 9 16.5 C 9 16.638 8.944 16.763 8.854 16.854 C 8.763 16.944 8.638 17 8.5 17 C 8.362 17 8.237 16.944 8.147 16.854 C 8.056 16.763 8 16.638 8 16.5 C 8 16.362 8.056 16.237 8.147 16.147 C 8.237 16.056 8.362 16 8.5 16 C 8.638 16 8.763 16.056 8.854 16.147 C 8.944 16.237 9 16.362 9 16.5 Z M 15 16.5 C 15 16.638 14.944 16.763 14.854 16.854 C 14.763 16.944 14.638 17 14.5 17 C 14.362 17 14.237 16.944 14.147 16.854 C 14.056 16.763 14 16.638 14 16.5 C 14 16.362 14.056 16.237 14.147 16.147 C 14.237 16.056 14.362 16 14.5 16 C 14.638 16 14.763 16.056 14.854 16.147 C 14.944 16.237 15 16.362 15 16.5 Z M 1 10.5 C 1 10.638 0.944 10.763 0.854 10.854 C 0.763 10.944 0.638 11 0.5 11 C 0.362 11 0.237 10.944 0.147 10.854 C 0.056 10.763 0 10.638 0 10.5 C 0 10.362 0.056 10.237 0.147 10.147 C 0.237 10.056 0.362 10 0.5 10 C 0.638 10 0.763 10.056 0.854 10.147 C 0.944 10.237 1 10.362 1 10.5 Z M 3 10.5 C 3 10.638 2.944 10.763 2.854 10.854 C 2.763 10.944 2.638 11 2.5 11 C 2.362 11 2.237 10.944 2.147 10.854 C 2.056 10.763 2 10.638 2 10.5 C 2 10.362 2.056 10.237 2.147 10.147 C 2.237 10.056 2.362 10 2.5 10 C 2.638 10 2.763 10.056 2.854 10.147 C 2.944 10.237 3 10.362 3 10.5 Z M 18.933 14.25 C 19.029 14.417 19.017 14.604 18.933 14.75 C 18.849 14.896 18.693 15 18.5 15 L 17.5 15 L 16.5 15 C 16.411 15 16.325 14.976 16.25 14.933 C 16.175 14.89 16.112 14.828 16.067 14.75 C 15.971 14.584 15.983 14.396 16.067 14.25 C 16.151 14.104 16.307 14 16.5 14 L 17.5 14 L 18.5 14 C 18.59 14 18.676 14.024 18.75 14.067 C 18.825 14.11 18.889 14.172 18.933 14.25 Z M 8.067 14.75 C 7.971 14.584 7.983 14.396 8.067 14.25 C 8.151 14.104 8.308 14 8.5 14 L 9.5 14 L 10.5 14 C 10.59 14 10.676 14.024 10.75 14.067 C 10.825 14.11 10.888 14.172 10.933 14.25 C 11.029 14.417 11.017 14.604 10.933 14.75 C 10.849 14.896 10.692 15 10.5 15 L 9.5 15 L 8.5 15 C 8.411 15 8.325 14.976 8.25 14.933 C 8.175 14.89 8.112 14.828 8.067 14.75 Z M 17 12.5 C 17 12.638 16.944 12.763 16.854 12.854 C 16.763 12.944 16.638 13 16.5 13 C 16.362 13 16.237 12.944 16.147 12.854 C 16.056 12.763 16 12.638 16 12.5 C 16 12.362 16.056 12.237 16.147 12.147 C 16.237 12.056 16.362 12 16.5 12 C 16.638 12 16.763 12.056 16.854 12.147 C 16.944 12.237 17 12.362 17 12.5 Z M 16.933 18.25 C 17.029 18.417 17.017 18.604 16.933 18.75 C 16.849 18.896 16.693 19 16.5 19 L 15.5 19 L 14.5 19 C 14.411 19 14.325 18.976 14.25 18.933 C 14.175 18.89 14.112 18.828 14.067 18.75 C 13.971 18.584 13.983 18.396 14.067 18.25 C 14.151 18.104 14.308 18 14.5 18 L 15.5 18 L 16.5 18 C 16.59 18 16.676 18.024 16.75 18.067 C 16.825 18.11 16.889 18.172 16.933 18.25 Z M 12.933 16.25 C 13.029 16.417 13.017 16.604 12.933 16.75 C 12.849 16.896 12.692 17 12.5 17 L 11.5 17 L 10.5 17 C 10.411 17 10.325 16.976 10.25 16.933 C 10.175 16.89 10.112 16.828 10.067 16.75 C 9.971 16.584 9.983 16.396 10.067 16.25 C 10.151 16.104 10.308 16 10.5 16 L 11.5 16 L 12.5 16 C 12.59 16 12.676 16.024 12.75 16.067 C 12.825 16.11 12.888 16.172 12.933 16.25 Z M 18.933 16.25 C 19.029 16.417 19.017 16.604 18.933 16.75 C 18.849 16.896 18.693 17 18.5 17 L 17.5 17 L 16.5 17 C 16.411 17 16.325 16.976 16.25 16.933 C 16.175 16.89 16.112 16.828 16.067 16.75 C 15.971 16.584 15.983 16.396 16.067 16.25 C 16.151 16.104 16.307 16 16.5 16 L 17.5 16 L 18.5 16 C 18.59 16 18.676 16.024 18.75 16.067 C 18.825 16.11 18.889 16.172 18.933 16.25 Z M 9 18.5 C 9 18.638 8.944 18.763 8.854 18.854 C 8.763 18.944 8.638 19 8.5 19 C 8.362 19 8.237 18.944 8.147 18.854 C 8.056 18.763 8 18.638 8 18.5 C 8 18.362 8.056 18.237 8.147 18.147 C 8.237 18.056 8.362 18 8.5 18 C 8.638 18 8.763 18.056 8.854 18.147 C 8.944 18.237 9 18.362 9 18.5 Z M 13 18.5 C 13 18.638 12.944 18.763 12.854 18.854 C 12.763 18.944 12.638 19 12.5 19 C 12.362 19 12.237 18.944 12.147 18.854 C 12.056 18.763 12 18.638 12 18.5 C 12 18.362 12.056 18.237 12.147 18.147 C 12.237 18.056 12.362 18 12.5 18 C 12.638 18 12.763 18.056 12.854 18.147 C 12.944 18.237 13 18.362 13 18.5 Z M 19 18.5 C 19 18.638 18.944 18.763 18.854 18.854 C 18.763 18.944 18.638 19 18.5 19 C 18.362 19 18.237 18.944 18.147 18.854 C 18.056 18.763 18 18.638 18 18.5 C 18 18.362 18.056 18.237 18.147 18.147 C 18.237 18.056 18.362 18 18.5 18 C 18.638 18 18.763 18.056 18.854 18.147 C 18.944 18.237 19 18.362 19 18.5 Z M 11 18.5 C 11 18.638 10.944 18.763 10.854 18.854 C 10.763 18.944 10.638 19 10.5 19 C 10.362 19 10.237 18.944 10.147 18.854 C 10.056 18.763 10 18.638 10 18.5 C 10 18.362 10.056 18.237 10.147 18.147 C 10.237 18.056 10.362 18 10.5 18 C 10.638 18 10.763 18.056 10.854 18.147 C 10.944 18.237 11 18.362 11 18.5 Z M 8.25 2.933 C 8.084 2.837 8 2.669 8 2.5 C 8 2.332 8.083 2.163 8.25 2.067 C 8.417 1.971 8.604 1.983 8.75 2.067 C 8.896 2.151 9 2.308 9 2.5 C 9 2.638 8.944 2.763 8.854 2.854 C 8.763 2.944 8.638 3 8.5 3 C 8.456 3 8.413 2.994 8.371 2.983 C 8.329 2.972 8.288 2.955 8.25 2.933 Z M 12 14.5 L 12 13.5 L 12 12.5 C 12 12.362 12.056 12.237 12.147 12.147 C 12.237 12.056 12.362 12 12.5 12 L 13.5 12 L 14.5 12 C 14.638 12 14.763 12.056 14.854 12.147 C 14.944 12.237 15 12.362 15 12.5 L 15 13.5 L 15 14.5 C 15 14.638 14.944 14.763 14.854 14.854 C 14.763 14.944 14.638 15 14.5 15 L 13.5 15 L 12.5 15 C 12.362 15 12.237 14.944 12.147 14.854 C 12.056 14.763 12 14.638 12 14.5 Z M 13 14 L 13.5 14 L 14 14 L 14 13.5 L 14 13 L 13.5 13 L 13 13 L 13 13.5 Z"})))}),[r.viewBox,r.d,n.isValid,n.size,n.foregroundColor,n.backgroundColor])};function dt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ft(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const ht=function(e){var t=(0,Ee.useRef)("function"==typeof e?e():function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dt(Object(n),!0).forEach((function(t){ft(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e)),n=(0,Ee.useRef)({get:function(e,t,n){return/(__set)$/g.test(t)?function(n){return e[t.replace(/(__set)$/g,"")]=n}:Reflect.get.apply(Reflect,arguments)},set:function(e,t,n){return Reflect.set.apply(Reflect,arguments),Reflect.set.apply(Reflect,arguments)}});return(0,Ee.useRef)(new Proxy(t.current,n.current)).current};function pt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function vt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return _t(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _t(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const yt=function(t){var n,r=vt($e.useContainer(),1)[0],o=ht(),a=Pe({text:(null===(n=t.defaultFormData)||void 0===n?void 0:n.text)||""}),i=(0,Ee.useCallback)((function(e){var t;a.text=(null===(t=e.target)||void 0===t?void 0:t.value)||""}),[]),c=(0,Ee.useCallback)((function(){return""!=a.text}),[]);return(0,Ee.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pt(Object(n),!0).forEach((function(t){mt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},a)),r.isValid=c(),r.content=a.text}),[a.text]),We((function(){o.text.focus()})),(0,Ee.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("label",null,"Text",(0,e.h)("b",{alt:"Field is required"},"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{ref:o.text__set,type:"text",defaultValue:a.text,placeholder:"Write something..",onChange:i}))}),[])};function gt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function bt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ct(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return wt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return wt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const St=function(t){var n,r=Ct($e.useContainer(),1)[0],o=ht(),a=Pe({link:(null===(n=t.defaultFormData)||void 0===n?void 0:n.link)||""}),i=(0,Ee.useCallback)((function(e){var t;a.link=(null===(t=e.target)||void 0===t?void 0:t.value)||""}),[]),c=(0,Ee.useCallback)((function(){return""!=a.link}),[]);return(0,Ee.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gt(Object(n),!0).forEach((function(t){bt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},a)),r.isValid=c();var e=a.link;/^(https?:\/\/)/.test(e)||(e="https://".concat(e)),r.content=e}),[a.link]),We((function(){o.link.focus()})),(0,Ee.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("label",null,"Link (URL)",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{ref:o.link__set,type:"text",defaultValue:a.link,placeholder:location.href.replace(/(\/+)$/g,"").replace(/^(https?:\/\/)/g,""),onChange:i}))}),[])};const At=function(t){return(0,e.h)("label",{className:"checkbox"},(0,e.h)("input",{type:"checkbox",onChange:function(e){t.onChange&&t.onChange(e.target.checked?null==t.trueValue||t.trueValue:null!=t.falseValue&&t.falseValue)},defaultChecked:t.defaultValue==t.trueValue}),(0,e.h)("div",{className:"checkbox-checkmark"},(0,e.h)("div",{className:"checkbox-checkmark-container"},(0,e.h)("svg",{viewBox:"0 0 60.31 49.97"},(0,e.h)("polygon",{points:"21.66 49.97 0 28.31 11.31 17 21.66 27.34 49 0 60.31 11.31 21.66 49.97"})))),t.children)};function Mt(e){return function(e){if(Array.isArray(e))return Lt(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Et(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Et(e,t){if(e){if("string"==typeof e)return Lt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Lt(e,t):void 0}}function Lt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ot=function(e,t,n,r){var o=(0,Ee.useCallback)((function(r){if(!e)return n(r);Array.isArray(e)||(e=[e]);var o,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=Et(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(e);try{for(a.s();!(o=a.n()).done;){var i=o.value;if(i&&i.contains(r.target))return t(r)}}catch(e){a.e(e)}finally{a.f()}return n(r)}),[e]);(0,Ee.useEffect)((function(){return window.addEventListener("click",o),function(){window.removeEventListener("click",o)}}),[e].concat(Mt(r)))};function kt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||xt(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xt(e,t){if(e){if("string"==typeof e)return Nt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nt(e,t):void 0}}function Nt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Pt=function(t){var n,r=ht({container:null,selected:null,toggle:t.toggleNode,searchInput:null}),o=kt((0,Ee.useState)(t.defaultValue),2),a=o[0],i=o[1],c=kt((0,Ee.useState)(t.options||[]),2),l=c[0],u=c[1],s=kt((0,Ee.useState)(!1),2),d=s[0],f=s[1],h=ke(),p=(0,Ee.useCallback)((function(e){e.stopPropagation();var n=e.target.value;n!=a&&(f(!1),i(n),t.onChange&&t.onChange(n))}),[a]),m=(0,Ee.useCallback)((function(e){u(e.length>0?t.options.filter((function(t){var n,r=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=xt(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(t.keywords);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(new RegExp(e,"ig").test(o))return!0}}catch(e){r.e(e)}finally{r.f()}return!1})):t.options)}),[t.options]);return(0,Ee.useEffect)((function(){r.toggle=t.toggleNode,h()}),[t.toggleNode]),(0,Ee.useEffect)((function(){t.value&&i(t.value)}),[t.value]),Ot([r.container,r.toggle],(function(e){return f(!(r.selected.contains(e.target)||null!=r&&r.toggle&&r.toggle.contains(e.target))||!d)}),(function(e){return f(!1)}),[d]),(0,Ee.useEffect)((function(){t.search&&r.searchInput&&(r.searchInput.value="",r.searchInput.focus(),m(""))}),[d]),(0,e.h)("div",{ref:function(e){r.container=e},className:Ae("input-dropdown",{"is-focus":d})},(0,e.h)("div",{ref:function(e){r.selected=e},className:"input-dropdown-selected"},null===(n=(t.options||[]).find((function(e){return e.value==a})))||void 0===n?void 0:n.label,(0,e.h)("div",{className:"input-dropdown-arrow"},(0,e.h)("svg",{viewBox:"0 0 320 512"},(0,e.h)("path",{d:"M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"})))),(0,e.h)("div",{className:"input-dropdown-options"},t.search&&(0,e.h)("div",{className:"input-dropdown-search"},(0,e.h)("input",{ref:function(e){r.searchInput=e},type:"text",placeholder:t.search.placeholder,onChange:function(e){return m(e.target.value)}}),(0,e.h)("div",{className:"input-dropdown-search-shadow"})),(0,e.h)("div",{className:"input-dropdown-list"},l.map((function(n){return(0,e.h)("label",{className:Ae({"is-selected":n.value==a})},(0,e.h)("input",{type:"radio",name:t.name||"undefined",value:n.value,defaultChecked:n.value==t.defaultValue,onChange:p}),n.label)})))))};function It(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function jt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Rt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Tt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Tt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Bt=function(t){var n,r,o,a,i=Rt($e.useContainer(),1)[0],c=ht(),l=Pe({ssid:(null===(n=t.defaultFormData)||void 0===n?void 0:n.ssid)||"",password:(null===(r=t.defaultFormData)||void 0===r?void 0:r.password)||"",encryption:(null===(o=t.defaultFormData)||void 0===o?void 0:o.encryption)||"WPA",hide:(null===(a=t.defaultFormData)||void 0===a?void 0:a.hide)||""}),u=(0,Ee.useCallback)((function(){return""!=l.ssid}),[]);return(0,Ee.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?It(Object(n),!0).forEach((function(t){jt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):It(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},l)),i.isValid=u(),i.content="WIFI:S:".concat(l.ssid,";P:").concat(l.password,";T:").concat(l.encryption,";H:").concat(l.hide,";")}),[l.ssid,l.password,l.encryption,l.hide]),We((function(){c.ssid.focus()})),(0,Ee.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("label",null,"Wifi Name (SSID)",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{ref:c.ssid__set,type:"text",placeholder:"SSID",defaultValue:l.ssid,onChange:function(e){var t;l.ssid=(null===(t=e.target)||void 0===t?void 0:t.value)||""}}),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,"Password"),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{type:"text",placeholder:"Password",defaultValue:l.password,onChange:function(e){var t;l.password=(null===(t=e.target)||void 0===t?void 0:t.value)||""}}),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,"Encryption"),(0,e.h)("div",{className:"h-8"}),(0,e.h)(Pt,{name:"encryption",options:[{label:"No encryption",value:"nopass"},{label:"WPA/WPA2",value:"WPA"},{label:"WEP",value:"WEP"}],defaultValue:l.encryption,onChange:l.encryption__set}),(0,e.h)("div",{className:"h-16"}),(0,e.h)(At,{trueValue:"true",falseValue:"",defaultValue:l.hide,onChange:l.hide__set},"Is hidden network"))}),[])},Dt=JSON.parse('[{"name":"Afghanistan","dial_code":"+93","code":"AF"},{"name":"Aland Islands","dial_code":"+358","code":"AX"},{"name":"Albania","dial_code":"+355","code":"AL"},{"name":"Algeria","dial_code":"+213","code":"DZ"},{"name":"AmericanSamoa","dial_code":"+1684","code":"AS"},{"name":"Andorra","dial_code":"+376","code":"AD"},{"name":"Angola","dial_code":"+244","code":"AO"},{"name":"Anguilla","dial_code":"+1264","code":"AI"},{"name":"Antarctica","dial_code":"+672","code":"AQ"},{"name":"Antigua and Barbuda","dial_code":"+1268","code":"AG"},{"name":"Argentina","dial_code":"+54","code":"AR"},{"name":"Armenia","dial_code":"+374","code":"AM"},{"name":"Aruba","dial_code":"+297","code":"AW"},{"name":"Australia","dial_code":"+61","code":"AU"},{"name":"Austria","dial_code":"+43","code":"AT"},{"name":"Azerbaijan","dial_code":"+994","code":"AZ"},{"name":"Bahamas","dial_code":"+1242","code":"BS"},{"name":"Bahrain","dial_code":"+973","code":"BH"},{"name":"Bangladesh","dial_code":"+880","code":"BD"},{"name":"Barbados","dial_code":"+1246","code":"BB"},{"name":"Belarus","dial_code":"+375","code":"BY"},{"name":"Belgium","dial_code":"+32","code":"BE"},{"name":"Belize","dial_code":"+501","code":"BZ"},{"name":"Benin","dial_code":"+229","code":"BJ"},{"name":"Bermuda","dial_code":"+1441","code":"BM"},{"name":"Bhutan","dial_code":"+975","code":"BT"},{"name":"Bolivia, Plurinational State of","dial_code":"+591","code":"BO"},{"name":"Bosnia and Herzegovina","dial_code":"+387","code":"BA"},{"name":"Botswana","dial_code":"+267","code":"BW"},{"name":"Brazil","dial_code":"+55","code":"BR"},{"name":"British Indian Ocean Territory","dial_code":"+246","code":"IO"},{"name":"Brunei Darussalam","dial_code":"+673","code":"BN"},{"name":"Bulgaria","dial_code":"+359","code":"BG"},{"name":"Burkina Faso","dial_code":"+226","code":"BF"},{"name":"Burundi","dial_code":"+257","code":"BI"},{"name":"Cambodia","dial_code":"+855","code":"KH"},{"name":"Cameroon","dial_code":"+237","code":"CM"},{"name":"Canada","dial_code":"+1","code":"CA"},{"name":"Cape Verde","dial_code":"+238","code":"CV"},{"name":"Cayman Islands","dial_code":"+ 345","code":"KY"},{"name":"Central African Republic","dial_code":"+236","code":"CF"},{"name":"Chad","dial_code":"+235","code":"TD"},{"name":"Chile","dial_code":"+56","code":"CL"},{"name":"China","dial_code":"+86","code":"CN"},{"name":"Christmas Island","dial_code":"+61","code":"CX"},{"name":"Cocos (Keeling) Islands","dial_code":"+61","code":"CC"},{"name":"Colombia","dial_code":"+57","code":"CO"},{"name":"Comoros","dial_code":"+269","code":"KM"},{"name":"Congo","dial_code":"+242","code":"CG"},{"name":"Congo, The Democratic Republic of the Congo","dial_code":"+243","code":"CD"},{"name":"Cook Islands","dial_code":"+682","code":"CK"},{"name":"Costa Rica","dial_code":"+506","code":"CR"},{"name":"Cote d\'Ivoire","dial_code":"+225","code":"CI"},{"name":"Croatia","dial_code":"+385","code":"HR"},{"name":"Cuba","dial_code":"+53","code":"CU"},{"name":"Cyprus","dial_code":"+357","code":"CY"},{"name":"Czech Republic","dial_code":"+420","code":"CZ"},{"name":"Denmark","dial_code":"+45","code":"DK"},{"name":"Djibouti","dial_code":"+253","code":"DJ"},{"name":"Dominica","dial_code":"+1767","code":"DM"},{"name":"Dominican Republic","dial_code":"+1849","code":"DO"},{"name":"Ecuador","dial_code":"+593","code":"EC"},{"name":"Egypt","dial_code":"+20","code":"EG"},{"name":"El Salvador","dial_code":"+503","code":"SV"},{"name":"Equatorial Guinea","dial_code":"+240","code":"GQ"},{"name":"Eritrea","dial_code":"+291","code":"ER"},{"name":"Estonia","dial_code":"+372","code":"EE"},{"name":"Ethiopia","dial_code":"+251","code":"ET"},{"name":"Falkland Islands (Malvinas)","dial_code":"+500","code":"FK"},{"name":"Faroe Islands","dial_code":"+298","code":"FO"},{"name":"Fiji","dial_code":"+679","code":"FJ"},{"name":"Finland","dial_code":"+358","code":"FI"},{"name":"France","dial_code":"+33","code":"FR"},{"name":"French Guiana","dial_code":"+594","code":"GF"},{"name":"French Polynesia","dial_code":"+689","code":"PF"},{"name":"Gabon","dial_code":"+241","code":"GA"},{"name":"Gambia","dial_code":"+220","code":"GM"},{"name":"Georgia","dial_code":"+995","code":"GE"},{"name":"Germany","dial_code":"+49","code":"DE"},{"name":"Ghana","dial_code":"+233","code":"GH"},{"name":"Gibraltar","dial_code":"+350","code":"GI"},{"name":"Greece","dial_code":"+30","code":"GR"},{"name":"Greenland","dial_code":"+299","code":"GL"},{"name":"Grenada","dial_code":"+1473","code":"GD"},{"name":"Guadeloupe","dial_code":"+590","code":"GP"},{"name":"Guam","dial_code":"+1671","code":"GU"},{"name":"Guatemala","dial_code":"+502","code":"GT"},{"name":"Guernsey","dial_code":"+44","code":"GG"},{"name":"Guinea","dial_code":"+224","code":"GN"},{"name":"Guinea-Bissau","dial_code":"+245","code":"GW"},{"name":"Guyana","dial_code":"+595","code":"GY"},{"name":"Haiti","dial_code":"+509","code":"HT"},{"name":"Holy See (Vatican City State)","dial_code":"+379","code":"VA"},{"name":"Honduras","dial_code":"+504","code":"HN"},{"name":"Hong Kong","dial_code":"+852","code":"HK"},{"name":"Hungary","dial_code":"+36","code":"HU"},{"name":"Iceland","dial_code":"+354","code":"IS"},{"name":"India","dial_code":"+91","code":"IN"},{"name":"Indonesia","dial_code":"+62","code":"ID"},{"name":"Iran, Islamic Republic of Persian Gulf","dial_code":"+98","code":"IR"},{"name":"Iraq","dial_code":"+964","code":"IQ"},{"name":"Ireland","dial_code":"+353","code":"IE"},{"name":"Isle of Man","dial_code":"+44","code":"IM"},{"name":"Israel","dial_code":"+972","code":"IL"},{"name":"Italy","dial_code":"+39","code":"IT"},{"name":"Jamaica","dial_code":"+1876","code":"JM"},{"name":"Japan","dial_code":"+81","code":"JP"},{"name":"Jersey","dial_code":"+44","code":"JE"},{"name":"Jordan","dial_code":"+962","code":"JO"},{"name":"Kazakhstan","dial_code":"+77","code":"KZ"},{"name":"Kenya","dial_code":"+254","code":"KE"},{"name":"Kiribati","dial_code":"+686","code":"KI"},{"name":"Korea, Democratic People\'s Republic of Korea","dial_code":"+850","code":"KP"},{"name":"Korea, Republic of South Korea","dial_code":"+82","code":"KR"},{"name":"Kuwait","dial_code":"+965","code":"KW"},{"name":"Kyrgyzstan","dial_code":"+996","code":"KG"},{"name":"Laos","dial_code":"+856","code":"LA"},{"name":"Latvia","dial_code":"+371","code":"LV"},{"name":"Lebanon","dial_code":"+961","code":"LB"},{"name":"Lesotho","dial_code":"+266","code":"LS"},{"name":"Liberia","dial_code":"+231","code":"LR"},{"name":"Libyan Arab Jamahiriya","dial_code":"+218","code":"LY"},{"name":"Liechtenstein","dial_code":"+423","code":"LI"},{"name":"Lithuania","dial_code":"+370","code":"LT"},{"name":"Luxembourg","dial_code":"+352","code":"LU"},{"name":"Macao","dial_code":"+853","code":"MO"},{"name":"Macedonia","dial_code":"+389","code":"MK"},{"name":"Madagascar","dial_code":"+261","code":"MG"},{"name":"Malawi","dial_code":"+265","code":"MW"},{"name":"Malaysia","dial_code":"+60","code":"MY"},{"name":"Maldives","dial_code":"+960","code":"MV"},{"name":"Mali","dial_code":"+223","code":"ML"},{"name":"Malta","dial_code":"+356","code":"MT"},{"name":"Marshall Islands","dial_code":"+692","code":"MH"},{"name":"Martinique","dial_code":"+596","code":"MQ"},{"name":"Mauritania","dial_code":"+222","code":"MR"},{"name":"Mauritius","dial_code":"+230","code":"MU"},{"name":"Mayotte","dial_code":"+262","code":"YT"},{"name":"Mexico","dial_code":"+52","code":"MX"},{"name":"Micronesia, Federated States of Micronesia","dial_code":"+691","code":"FM"},{"name":"Moldova","dial_code":"+373","code":"MD"},{"name":"Monaco","dial_code":"+377","code":"MC"},{"name":"Mongolia","dial_code":"+976","code":"MN"},{"name":"Montenegro","dial_code":"+382","code":"ME"},{"name":"Montserrat","dial_code":"+1664","code":"MS"},{"name":"Morocco","dial_code":"+212","code":"MA"},{"name":"Mozambique","dial_code":"+258","code":"MZ"},{"name":"Myanmar","dial_code":"+95","code":"MM"},{"name":"Namibia","dial_code":"+264","code":"NA"},{"name":"Nauru","dial_code":"+674","code":"NR"},{"name":"Nepal","dial_code":"+977","code":"NP"},{"name":"Netherlands","dial_code":"+31","code":"NL"},{"name":"New Caledonia","dial_code":"+687","code":"NC"},{"name":"New Zealand","dial_code":"+64","code":"NZ"},{"name":"Nicaragua","dial_code":"+505","code":"NI"},{"name":"Niger","dial_code":"+227","code":"NE"},{"name":"Nigeria","dial_code":"+234","code":"NG"},{"name":"Niue","dial_code":"+683","code":"NU"},{"name":"Norfolk Island","dial_code":"+672","code":"NF"},{"name":"Northern Mariana Islands","dial_code":"+1670","code":"MP"},{"name":"Norway","dial_code":"+47","code":"NO"},{"name":"Oman","dial_code":"+968","code":"OM"},{"name":"Pakistan","dial_code":"+92","code":"PK"},{"name":"Palau","dial_code":"+680","code":"PW"},{"name":"Palestinian Territory, Occupied","dial_code":"+970","code":"PS"},{"name":"Panama","dial_code":"+507","code":"PA"},{"name":"Papua New Guinea","dial_code":"+675","code":"PG"},{"name":"Paraguay","dial_code":"+595","code":"PY"},{"name":"Peru","dial_code":"+51","code":"PE"},{"name":"Philippines","dial_code":"+63","code":"PH"},{"name":"Pitcairn","dial_code":"+872","code":"PN"},{"name":"Poland","dial_code":"+48","code":"PL"},{"name":"Portugal","dial_code":"+351","code":"PT"},{"name":"Puerto Rico","dial_code":"+1939","code":"PR"},{"name":"Qatar","dial_code":"+974","code":"QA"},{"name":"Romania","dial_code":"+40","code":"RO"},{"name":"Russia","dial_code":"+7","code":"RU"},{"name":"Rwanda","dial_code":"+250","code":"RW"},{"name":"Reunion","dial_code":"+262","code":"RE"},{"name":"Saint Barthelemy","dial_code":"+590","code":"BL"},{"name":"Saint Helena, Ascension and Tristan Da Cunha","dial_code":"+290","code":"SH"},{"name":"Saint Kitts and Nevis","dial_code":"+1869","code":"KN"},{"name":"Saint Lucia","dial_code":"+1758","code":"LC"},{"name":"Saint Martin","dial_code":"+590","code":"MF"},{"name":"Saint Pierre and Miquelon","dial_code":"+508","code":"PM"},{"name":"Saint Vincent and the Grenadines","dial_code":"+1784","code":"VC"},{"name":"Samoa","dial_code":"+685","code":"WS"},{"name":"San Marino","dial_code":"+378","code":"SM"},{"name":"Sao Tome and Principe","dial_code":"+239","code":"ST"},{"name":"Saudi Arabia","dial_code":"+966","code":"SA"},{"name":"Senegal","dial_code":"+221","code":"SN"},{"name":"Serbia","dial_code":"+381","code":"RS"},{"name":"Seychelles","dial_code":"+248","code":"SC"},{"name":"Sierra Leone","dial_code":"+232","code":"SL"},{"name":"Singapore","dial_code":"+65","code":"SG"},{"name":"Slovakia","dial_code":"+421","code":"SK"},{"name":"Slovenia","dial_code":"+386","code":"SI"},{"name":"Solomon Islands","dial_code":"+677","code":"SB"},{"name":"Somalia","dial_code":"+252","code":"SO"},{"name":"South Africa","dial_code":"+27","code":"ZA"},{"name":"South Sudan","dial_code":"+211","code":"SS"},{"name":"South Georgia and the South Sandwich Islands","dial_code":"+500","code":"GS"},{"name":"Spain","dial_code":"+34","code":"ES"},{"name":"Sri Lanka","dial_code":"+94","code":"LK"},{"name":"Sudan","dial_code":"+249","code":"SD"},{"name":"Suriname","dial_code":"+597","code":"SR"},{"name":"Svalbard and Jan Mayen","dial_code":"+47","code":"SJ"},{"name":"Swaziland","dial_code":"+268","code":"SZ"},{"name":"Sweden","dial_code":"+46","code":"SE"},{"name":"Switzerland","dial_code":"+41","code":"CH"},{"name":"Syrian Arab Republic","dial_code":"+963","code":"SY"},{"name":"Taiwan","dial_code":"+886","code":"TW"},{"name":"Tajikistan","dial_code":"+992","code":"TJ"},{"name":"Tanzania, United Republic of Tanzania","dial_code":"+255","code":"TZ"},{"name":"Thailand","dial_code":"+66","code":"TH"},{"name":"Timor-Leste","dial_code":"+670","code":"TL"},{"name":"Togo","dial_code":"+228","code":"TG"},{"name":"Tokelau","dial_code":"+690","code":"TK"},{"name":"Tonga","dial_code":"+676","code":"TO"},{"name":"Trinidad and Tobago","dial_code":"+1868","code":"TT"},{"name":"Tunisia","dial_code":"+216","code":"TN"},{"name":"Turkey","dial_code":"+90","code":"TR"},{"name":"Turkmenistan","dial_code":"+993","code":"TM"},{"name":"Turks and Caicos Islands","dial_code":"+1649","code":"TC"},{"name":"Tuvalu","dial_code":"+688","code":"TV"},{"name":"Uganda","dial_code":"+256","code":"UG"},{"name":"Ukraine","dial_code":"+380","code":"UA"},{"name":"United Arab Emirates","dial_code":"+971","code":"AE"},{"name":"United Kingdom","dial_code":"+44","code":"GB"},{"name":"United States","dial_code":"+1","code":"US"},{"name":"Uruguay","dial_code":"+598","code":"UY"},{"name":"Uzbekistan","dial_code":"+998","code":"UZ"},{"name":"Vanuatu","dial_code":"+678","code":"VU"},{"name":"Venezuela, Bolivarian Republic of Venezuela","dial_code":"+58","code":"VE"},{"name":"Vietnam","dial_code":"+84","code":"VN"},{"name":"Virgin Islands, British","dial_code":"+1284","code":"VG"},{"name":"Virgin Islands, U.S.","dial_code":"+1340","code":"VI"},{"name":"Wallis and Futuna","dial_code":"+681","code":"WF"},{"name":"Yemen","dial_code":"+967","code":"YE"},{"name":"Zambia","dial_code":"+260","code":"ZM"},{"name":"Zimbabwe","dial_code":"+263","code":"ZW"}]');
/*! js-cookie v3.0.1 | MIT */
function Ut(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}var zt=function e(t,n){function r(e,r,o){if("undefined"!=typeof document){"number"==typeof(o=Ut({},n,o)).expires&&(o.expires=new Date(Date.now()+864e5*o.expires)),o.expires&&(o.expires=o.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var a="";for(var i in o)o[i]&&(a+="; "+i,!0!==o[i]&&(a+="="+o[i].split(";")[0]));return document.cookie=e+"="+t.write(r,e)+a}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],r={},o=0;o<n.length;o++){var a=n[o].split("="),i=a.slice(1).join("=");try{var c=decodeURIComponent(a[0]);if(r[c]=t.read(i,c),e===c)break}catch(e){}}return e?r[e]:r}},remove:function(e,t){r(e,"",Ut({},t,{expires:-1}))},withAttributes:function(t){return e(this.converter,Ut({},this.attributes,t))},withConverter:function(t){return e(Ut({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"});const Ft=zt;var Ht;function Yt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Zt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Zt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Gt=function(t){var n,r,o=$t($e.useContainer(),1)[0],a=ht(),i=Pe({dialCode:(null===(n=t.defaultFormData)||void 0===n?void 0:n.dialCode)||"0",number:(null===(r=t.defaultFormData)||void 0===r?void 0:r.number)||""}),c=(0,Ee.useCallback)((function(){return""!=i.number}),[]);return(0,Ee.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yt(Object(n),!0).forEach((function(t){Vt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},i)),o.isValid=c(),o.content="tel:".concat(i.dialCode).concat(i.number.replace(/^0/g,""))}),[i.dialCode,i.number]),We((function(){if("0"==i.dialCode){var e=Ft.get("dial_code");if(e)i.dialCode=e;else{if(Ft.get("country_code")){var t=Dt.find((function(e){return e.code.toUpperCase()==data.countryCode.toUpperCase()}));if(null==t||!t.dial_code)return;return Ft.set("dial_code",t.dial_code),void(i.dialCode=t.dial_code)}fetch("http://ip-api.com/json").then((function(e){return e.json()})).then((function(e){if(null!=e&&e.countryCode){var t=Dt.find((function(t){return t.code.toUpperCase()==e.countryCode.toUpperCase()}));null!=t&&t.dial_code&&(null!=t&&t.code&&Ft.set("country_code",t.code),Ft.set("dial_code",t.dial_code),i.dialCode=t.dial_code)}}))}}})),We((function(){a.number.focus()})),(0,Ee.useMemo)((function(){return(0,e.h)("div",{className:"form-phonenumber"},(0,e.h)("label",null,"Phone Number",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("div",{className:Me(Ht||(t=["display: flex; justify-content: center;"],n||(n=t.slice(0)),Ht=Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(n)}}))))},(0,e.h)("input",{type:"text",placeholder:"+00",className:"dial-code",value:i.dialCode,ref:function(e){a.dialCode=e},readOnly:!0}),(0,e.h)("input",{ref:a.number__set,type:"text",placeholder:"Phone Number",className:"phonenumber",defaultValue:i.number,onChange:function(e){i.number=e.target.value}})),(0,e.h)("div",{className:"dial-code-dropdown"},(0,e.h)(Pt,{name:"dial_code",value:i.dialCode,options:Dt.map((function(t){return{label:(0,e.h)(e.HY,null,(0,e.h)("div",{className:"flag"},(0,e.h)("img",{src:"https://raw.githubusercontent.com/lipis/flag-icons/main/flags/4x3/".concat(t.code.toLowerCase(),".svg")})),(0,e.h)("span",null,t.name),(0,e.h)("i",null,"(",t.dial_code,")")),value:t.dial_code,keywords:[t.name,t.code,t.dial_code]}})),onChange:i.dialCode__set,toggleNode:a.dialCode,search:{placeholder:"Search country.."}})));var t,n}),[i.dialCode])};function Kt(e,t,n){void 0===t&&(t=0),void 0===n&&(n=[]);var r=function(e,t){void 0===t&&(t=0);var n=(0,Ee.useRef)(!1),r=(0,Ee.useRef)(),o=(0,Ee.useRef)(e),a=(0,Ee.useCallback)((function(){return n.current}),[]),i=(0,Ee.useCallback)((function(){n.current=!1,r.current&&clearTimeout(r.current),r.current=setTimeout((function(){n.current=!0,o.current()}),t)}),[t]),c=(0,Ee.useCallback)((function(){n.current=null,r.current&&clearTimeout(r.current)}),[]);return(0,Ee.useEffect)((function(){o.current=e}),[e]),(0,Ee.useEffect)((function(){return i(),c}),[t]),[a,c,i]}(e,t),o=r[0],a=r[1],i=r[2];return(0,Ee.useEffect)(i,n),[o,a]}var Wt;const Jt=function(t){var n=t.ratio;"square"===n?n="1:1":"wide"===n||void 0===n?n="16:9":"half"===n&&(n="2:1");var r,o,a=n.split(":"),i=a[1]/a[0]*100;return(0,e.h)("div",{key:"aspect-ratio",className:Ae("aspect-ratio",t.ratio?Me(Wt||(r=["padding-top: ","%;"],o||(o=r.slice(0)),Wt=Object.freeze(Object.defineProperties(r,{raw:{value:Object.freeze(o)}}))),i):"")},(0,e.h)("div",{key:"aspect-ratio-wrapper",className:"aspect-ratio-wrapper"},t.children?t.children:null))};function qt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Xt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return en(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return en(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function en(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const tn=function(t){var n,r=Xt($e.useContainer(),1)[0],o=ht(),a=Pe({query:(null===(n=t.defaultFormData)||void 0===n?void 0:n.query)||""}),i=Pe({preview_url:"about:blank"}),c=(0,Ee.useCallback)((function(){return""!=a.number}),[]);(0,Ee.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qt(Object(n),!0).forEach((function(t){Qt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},a)),r.isValid=c(),r.content="https://maps.google.com/?q=".concat(encodeURIComponent(a.query).replace(/%20/g,"+")||"")}),[a.query]);Xt(Kt((function(){i.preview_url="".concat(r.content,"&output=embed")}),1e3,[r.content]),2)[1];return We((function(){o.place.focus()})),(0,Ee.useMemo)((function(){return(0,e.h)("div",{className:"input-location"},(0,e.h)("label",null,"Place Name  or  Coordinate",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{ref:o.place__set,type:"text",placeholder:"Shibuya Scramble Crossing",value:a.query,onChange:function(e){a.query=e.target.value}}),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,"Preview"),(0,e.h)("div",{className:"h-8"}),(0,e.h)("div",{className:"google-map"},(0,e.h)(Jt,{ratio:"4:3"},(0,e.h)("iframe",{src:"".concat(i.preview_url,"&output=embed"),frameBorder:"0"}))))}),[i.preview_url])};function nn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return rn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return rn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function rn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function on(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function an(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?on(Object(n),!0).forEach((function(t){cn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):on(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function cn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ln={default:function(e){var t=e.currency,n=e.address,r=e.amount;return r?"".concat(t,":").concat(n,"?amount=").concat(r):"".concat(t,":").concat(n)},XRP:function(e){var t=e.address,n=e.amount;return n?"xrpl://to=".concat(t,"&amount=").concat(n):"xrpl://to=".concat(t)}},un=[{name:"Bitcoin",value:"bitcoin",symbol:"BTC"},{name:"Bitcoin Cash",value:"bitcoincash",symbol:"BTC"},{name:"Ethereum",value:"ethereum",symbol:"ETH"},{name:"Litecoin",value:"litecoin",symbol:"LTC"},{name:"Dash",value:"dash",symbol:"DASH"},{name:"Monero",value:"monero",symbol:"XMR"},{name:"XRP",value:"xrpl",template:ln.XRP,symbol:"XRP"}].sort((function(e,t){return e.value<t.value?-1:e.value>t.value?1:0})),sn=un.map((function(t){return an({label:(0,e.h)(e.HY,null,(0,e.h)("img",{src:"https://raw.githubusercontent.com/chainbitdev/logos/main/logos/".concat(t.symbol.toUpperCase(),"/logo.svg")}),t.name)},t)}));const dn=function(t){var n,r,o,a=nn($e.useContainer(),1)[0],i=ht(),c=Pe({currency:(null===(n=t.defaultFormData)||void 0===n?void 0:n.btc)||"bitcoin",address:(null===(r=t.defaultFormData)||void 0===r?void 0:r.address)||"",amount:(null===(o=t.defaultFormData)||void 0===o?void 0:o.amount)||0}),l=(0,Ee.useCallback)((function(){return!!c.currency&&c.address.length>0}),[]);return(0,Ee.useEffect)((function(){t.saveFormData(an({},c)),a.isValid=l();var e=un.find((function(e){return e.value==c.currency}));e.template?a.content=e.template(an({},c)):a.content=ln.default(an({},c))}),[c.currency,c.address,c.amount]),We((function(){i.address.focus()})),(0,Ee.useMemo)((function(){return(0,e.h)("div",{className:"input-crypto-currency"},(0,e.h)("label",null,"Currency",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("div",{className:"currency"},(0,e.h)(Pt,{name:"currency",options:sn,defaultValue:c.currency,onChange:c.currency__set})),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,"Address",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{ref:i.address__set,type:"text",placeholder:"Your address..",defaultValue:c.address,onChange:function(e){var t;c.address=(null===(t=e.target)||void 0===t?void 0:t.value)||""}}),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,"Amount",(0,e.h)("i",null," (Optional)")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{type:"text",placeholder:"100.00",defaultValue:c.amount,onChange:function(e){var t;c.amount=Number((null===(t=e.target)||void 0===t?void 0:t.value)||"")||0}}))}),[])};function fn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return hn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return hn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var pn=[{label:"Raw Text",type:1,form:yt},{label:"Link",type:2,form:St},{label:"Wifi",type:3,form:Bt},{label:"Phone",type:4,form:Gt},{label:"Location",type:5,form:tn},{label:"Crypto / Bitcoin",type:6,form:dn}];const mn=function(){var t,n=ht({}),r=fn((0,Ge.eJ)(2),2),o=r[0],a=r[1],i=null===(t=pn.find((function(e){return e.type==o})))||void 0===t?void 0:t.form,c=(0,Ge.I4)((function(e){n[o]=e}),[n,o]);return(0,e.h)(e.HY,null,(0,e.h)("div",{className:"type-list"},pn.map((function(t){return(0,e.h)("a",{className:Ae({"is-selected":t.type==o}),onClick:function(e){a(t.type)}},t.label)}))),(0,e.h)("div",{className:"h-16"}),(0,e.h)(i,{defaultFormData:n[o],saveFormData:c}))};var vn,_n=function(e,t,n){return Math.min(Math.max(e,t),n)},yn=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return Math.round(e/t)*t},gn=function(e,t,n,r,o){return r+(e-t)*(o-r)/(n-t)},bn=function(e){var t=0,n=0;do{t+=e.offsetTop||0,n+=e.offsetLeft||0,e=e.offsetParent}while(e);return{top:t,left:n}};const Cn=function(t){var n=ht({slider:null}),r=Pe((function(){var e=t.min||0,n=t.max||100,r=t.step||1,o=n-e,a=t.defaultValue||t.value||e;return{min:e,max:n,step:r,range:o,isFocus:!1,value:a,pvalue:gn(a,e,n,0,100)}})),o=function(e){var o;if(e.nativeEvent.stopPropagation(),e.preventDefault(),n.slider){var a=bn(n.slider).left,c=n.slider.clientWidth,l=e.x||(null===(o=e.touches[0])||void 0===o?void 0:o.pageX);r.pvalue=gn(l,a,a+c,0,100),r.pvalue=yn(r.pvalue,r.step/r.range*100),r.pvalue=_n(r.pvalue,0,100),r.value=gn(r.pvalue,0,100,r.min,r.max),r.value=yn(r.value,r.step),r.isFocus=!0,t.onChange&&t.onChange(r.value),window.addEventListener("mousemove",i),window.addEventListener("touchmove",i)}},a=function(e){r.isFocus=!1,window.removeEventListener("mousemove",i),window.removeEventListener("touchmove",i)},i=function(e){var o;if(n.slider&&r.isFocus){var a=bn(n.slider).left,i=n.slider.clientWidth,c=e.x||(null===(o=e.touches[0])||void 0===o?void 0:o.pageX);r.pvalue=gn(c,a,a+i,0,100),r.pvalue=yn(r.pvalue,r.step/r.range*100),r.pvalue=_n(r.pvalue,0,100),r.value=gn(r.pvalue,0,100,r.min,r.max),r.value=yn(r.value,r.step),t.onChange&&t.onChange(r.value)}};return We((function(){return window.addEventListener("mouseup",a),window.addEventListener("touchend",a),function(){window.removeEventListener("mouseup",a),window.removeEventListener("touchend",a),window.removeEventListener("mousemove",i),window.removeEventListener("touchmove",i)}})),(0,Ee.useEffect)((function(){r.value=t.value,r.pvalue=gn(r.value,r.min,r.max,0,100)}),[t.value]),(0,e.h)("div",{className:Ae("input-range",r.isFocus?"is-focus":""),onMouseDown:o,onTouchStart:o},(0,e.h)("div",{className:"input-range-slider",style:t.sliderBackground?{background:t.sliderBackground}:{}},(0,e.h)("div",{ref:n.slider__set,className:"input-range-slider-container"},(0,e.h)("div",{className:"input-range-button",style:{left:"".concat(r.pvalue,"%")}}),(t.axis||[]).map((function(t){return(0,e.h)("div",{className:Ae("input-range-axis",Me(vn||(n=["left: ","%;"],r||(r=n.slice(0)),vn=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(r)}}))),100*t))});var n,r})))))};var wn;function Sn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return An(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return An(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function An(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Mn=function(t){var n=Sn($e.useContainer(),1)[0];return(0,Ee.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("div",{className:Me(wn||(t=["display: flex; justify-content: space-between;"],r||(r=t.slice(0)),wn=Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(r)}}))))},(0,e.h)("label",null,"Margin"),(0,e.h)("small",null,(0,e.h)("output",null,"x",n.margin))),(0,e.h)("div",{className:"h-2"}),(0,e.h)(Cn,{min:1,max:4,defaultValue:n.margin,onChange:n.margin__set,axis:[.3333,.6667]}));var t,r}),[n.margin])};var En;function Ln(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return On(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return On(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function On(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const kn=function(t){var n,r,o=Ln($e.useContainer(),1)[0],a=Pe({value:0});return(0,Ee.useEffect)((function(){o.roundCorner=Math.min(a.value,100),o.eyeRoundCorner=Math.max(0,a.value-100)}),[a.value]),(0,e.h)(e.HY,null,(0,e.h)("div",{className:Me(En||(n=["display: flex; justify-content: space-between;"],r||(r=n.slice(0)),En=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(r)}}))))},(0,e.h)("label",null,"Smoothness"),(0,e.h)("small",null,(0,e.h)("output",null,0==a.value?"Sharp":a.value<=100?(0,e.h)(e.HY,null,o.roundCorner,"%"):(0,e.h)(e.HY,null,"Pixel ",o.roundCorner,"%,  Eyes ",o.eyeRoundCorner,"%")))),(0,e.h)("div",{className:"h-2"}),(0,e.h)(Cn,{type:"range",min:0,max:200,step:5,defaultValue:0,onChange:a.value__set,axis:[.5]}))};function xn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Nn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Nn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Pn=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t*Math.min(n,1-n)+n;return[e,r?2-2*n/r:0,r]},In=function(t){var n=xn((0,Ee.useState)(t.value),2),r=n[0],o=n[1],a=(0,Ee.useCallback)((function(e){var n=e.target.value;t.postfix&&(n=n.replace(new RegExp("(\\".concat(t.postfix,")$"),"g"),"")),o(n),t.onChange&&t.onChange(n)}),[r]);return(0,Ee.useEffect)((function(){o(t.value)}),[t.value]),(0,e.h)("input",{type:"text",value:"".concat(r).concat(t.postfix||""),onChange:a})};const jn=function(t){var n=ht({container:null,preview:null,swatches:null}),r=Pe({isFocus:!1,isFocusSwatches:!1,h:t.value[0],s:t.value[1],l:t.value[2],a:t.value[3]||100,swatchesSelectionX:100*Pn(t.value[0],t.value[1]/100,t.value[2]/100)[1],swatchesSelectionY:-100*Pn(t.value[0],t.value[1]/100,t.value[2]/100)[2]+100});Ot(n.container,(function(e){r.isFocus=!n.preview.contains(e.target)||!r.isFocus}),(function(e){r.isFocus=!1}),[n,r.isFocus]);var o=(0,Ee.useCallback)((function(e){e.preventDefault(),r.isFocusSwatches=!0,window.addEventListener("mousemove",a),window.addEventListener("touchmove",a)}),[]),a=(0,Ee.useCallback)((function(e){var t,o,a=e.x||(null===(t=e.touches[0])||void 0===t?void 0:t.pageX),i=e.y||(null===(o=e.touches[0])||void 0===o?void 0:o.pageY),c=bn(n.swatches),l=c.left,u=c.top,s=n.swatches.clientWidth,d=n.swatches.clientHeight;r.swatchesSelectionX=_n(gn(a,l,l+s,0,100),0,100),r.swatchesSelectionY=_n(gn(i,u,u+d,0,100),0,100);var f=r.h,h=1-r.swatchesSelectionY/100,p=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:n-n*t/2,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Math.min(r,1-r);return[e,o?(n-r)/o:0,r]}(f,r.swatchesSelectionX/100,h);r.s=yn(100*(p[1]||0)),r.l=yn(100*(p[2]||0))}),[]),i=(0,Ee.useCallback)((function(e){r.isFocusSwatches=!1,window.removeEventListener("mousemove",a),window.removeEventListener("touchmove",a)}),[]);return We((function(){return window.addEventListener("mouseup",i),window.addEventListener("touchend",i),function(){window.removeEventListener("mouseup",i),window.removeEventListener("touchend",i),window.removeEventListener("mousemove",a),window.removeEventListener("touchmove",a)}})),(0,Ee.useEffect)((function(){r.h=t.value[0],r.s=t.value[1],r.l=t.value[2],r.a=t.value[3]||100}),[t.value]),(0,Ee.useEffect)((function(){if(t.onChange&&(t.onChange([r.h,r.s,r.l,r.a]),!r.isFocusSwatches)){var e=Pn(r.h,r.s/100,r.l/100),n=100*e[1],o=-100*e[2]+100;r.swatchesSelectionX=n,r.swatchesSelectionY=o}}),[r.h,r.s,r.l,r.a]),(0,e.h)("div",{ref:function(e){n.container=e},className:Ae("input-color-picker",{"is-focus":r.isFocus,"in-right":t.inRight})},(0,e.h)("div",{ref:function(e){n.preview=e},className:"input-color-picker-preview-container"},(0,e.h)("div",{className:"input-color-picker-preview-checker"}),(0,e.h)("div",{className:"input-color-picker-preview",style:{backgroundColor:"hsla(".concat(r.h,", ").concat(r.s,"%, ").concat(r.l,"%, ").concat(r.a,"%)")}})),(0,e.h)("div",{className:"input-color-picker-options"},(0,e.h)("div",{ref:n.swatches__set,className:"swatches",style:{background:"linear-gradient(180deg, hsla(0, 0%, 0%, 0%) 0%, hsla(0, 0%, 0%, 100%) 100%), linear-gradient(90deg, hsla(".concat(r.h,", 0%, 100%, 100%) 0%, hsla(").concat(r.h,", 100%, 50%, 100%) 100%)")},onMouseDown:o,onTouchStart:o},(0,e.h)("div",{className:"swatches-pointer-area"},(0,e.h)("div",{className:"swatches-pointer",style:{left:"".concat(r.swatchesSelectionX,"%"),top:"".concat(r.swatchesSelectionY,"%")}}))),(0,e.h)("div",{className:"h-12"}),(0,e.h)("div",{className:"slider hue"},(0,e.h)("span",null,"H"),(0,e.h)(Cn,{min:0,max:360,value:r.h,onChange:r.h__set}),(0,e.h)(In,{value:r.h,onChange:r.h__set})),(0,e.h)("div",{className:"slider saturation"},(0,e.h)("span",null,"S"),(0,e.h)(Cn,{min:0,max:100,value:r.s,onChange:r.s__set,sliderBackground:"linear-gradient(90deg, hsl(".concat(r.h,", 0%, 50%) 0%, hsl(").concat(r.h,", 100%, 50%) 100%)")}),(0,e.h)(In,{value:r.s,onChange:r.s__set,postfix:"%"})),(0,e.h)("div",{className:"slider lightness"},(0,e.h)("span",null,"L"),(0,e.h)(Cn,{min:0,max:100,value:r.l,onChange:r.l__set,sliderBackground:"linear-gradient(90deg, hsl(".concat(r.h,", ").concat(r.s,"%, 0%) 0%, hsl(").concat(r.h,", ").concat(r.s,"%, 50%) 50%, hsl(").concat(r.h,", ").concat(r.s,"%, 100%) 100%)")}),(0,e.h)(In,{value:r.l,onChange:r.l__set,postfix:"%"}))))};var Rn,Tn,Bn;function Dn(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function Un(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return zn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return zn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.SVG_CREDITS="\x3c!-- Create at example.com --\x3e";var Fn=function(t){var n=Un($e.useContainer(),1)[0];return(0,e.h)(jn,{value:n.foregroundColor,onChange:n.foregroundColor__set})},Hn=function(t){var n=Un($e.useContainer(),1)[0];return(0,Ee.useMemo)((function(){return(0,e.h)(jn,{value:n.backgroundColor,onChange:n.backgroundColor__set,inRight:!0})}),[n.backgroundColor])};const Yn=function(t){var n=Un($e.useContainer(),1)[0],r=(0,Ee.useCallback)((function(){var e=[n.backgroundColor,n.foregroundColor];n.foregroundColor=e[0],n.backgroundColor=e[1]}),[]);return(0,e.h)("div",{className:Ae("colorpicker",Me(Rn||(Rn=Dn(["display: flex;"]))))},(0,e.h)("div",{className:Me(Tn||(Tn=Dn(["flex: 1;"])))},(0,e.h)("label",null,"Foreground Color"),(0,e.h)("div",{className:"h-12"}),(0,e.h)("div",{className:"h-32"},(0,e.h)(Fn,null))),(0,e.h)("div",{className:"swap"},(0,e.h)("button",{onClick:r},(0,e.h)("svg",{viewBox:"0 0 512 512"},(0,e.h)("path",{d:"M0 168v-16c0-13.255 10.745-24 24-24h360V80c0-21.367 25.899-32.042 40.971-16.971l80 80c9.372 9.373 9.372 24.569 0 33.941l-80 80C409.956 271.982 384 261.456 384 240v-48H24c-13.255 0-24-10.745-24-24zm488 152H128v-48c0-21.314-25.862-32.08-40.971-16.971l-80 80c-9.372 9.373-9.372 24.569 0 33.941l80 80C102.057 463.997 128 453.437 128 432v-48h360c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24z"})))),(0,e.h)("div",{className:Me(Bn||(Bn=Dn(["flex: 1;"])))},(0,e.h)("label",null,"Background Color"),(0,e.h)("div",{className:"h-12"}),(0,e.h)("div",{className:"h-32"},(0,e.h)(Hn,null))))};var Vn;function $n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Zn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Zn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Gn=function(t){var n=$n(Ze.useContainer(),1)[0];return(0,Ee.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("div",{className:Me(Vn||(t=["display: flex; justify-content: space-between;"],r||(r=t.slice(0)),Vn=Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(r)}}))))},(0,e.h)("label",null,"Size"),(0,e.h)("small",null,(0,e.h)("output",null,n.size,"px"))),(0,e.h)("div",{className:"h-2"}),(0,e.h)(Cn,{min:320,max:8e3,step:320,defaultValue:n.size,onChange:function(e){n.size=e}}));var t,r}),[n.size])};function Kn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Wn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Wn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Jn=function(){var t=Kn(Ze.useContainer(),1)[0];return(0,Ee.useMemo)((function(){return(0,e.h)(At,{defaultValue:!1,onChange:t.excludeBackground__set},"Exclude background")}),[])};function qn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Qn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Qn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Qn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Xn=function(t){var n=ht({canvas:null,dummyAnchor:null}),r=qn($e.useContainer(),1)[0],o=qn(Ze.useContainer(),1)[0];return(0,e.h)("div",{className:"button-download-png"},(0,e.h)("div",{className:"dummy"},(0,e.h)("canvas",{ref:n.canvas__set}),(0,e.h)("a",{ref:n.dummyAnchor__set})),(0,e.h)("button",{className:"large orange",onClick:function(e){var t=o.size;if(n.canvas&&n.dummyAnchor){var a=ot({size:r.size,shapes:r.shapes,roundCorner:r.roundCorner,eyeRoundCorner:r.eyeRoundCorner,canvas:{size:t}}),i=n.canvas,c=n.dummyAnchor;i.width=t,i.height=t;var l=i.getContext("2d");l.clearRect(0,0,t,t),o.excludeBackground||(l.fillStyle=ct(r.backgroundColor),l.fillRect(0,0,t,t)),l.fillStyle=ct(r.foregroundColor),l.fill(new Path2D(a),"evenodd"),c.download="QRCode.png",c.href=i.toDataURL("image/png"),c.click()}},disabled:!r.isValid},"PNG"))};function er(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return tr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return tr(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function tr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const nr=function(t){var n=ht({dummyAnchor:null}),r=er($e.useContainer(),1)[0],o=er(Ze.useContainer(),1)[0];return(0,e.h)("div",{className:"button-download-png"},(0,e.h)("div",{className:"dummy"},(0,e.h)("a",{ref:n.dummyAnchor__set})),(0,e.h)("button",{className:"large orange",onClick:function(e){var t=o.size;if(n.dummyAnchor){var a=ot({size:r.size,shapes:r.shapes,roundCorner:r.roundCorner,eyeRoundCorner:r.eyeRoundCorner,canvas:{size:t}}),i="".concat(window.SVG_CREDITS,'\n<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ').concat(t," ").concat(t,'">\n').concat(o.excludeBackground?"":'<path d="M0,0H'.concat(t,"V").concat(t,'H0z" fill="').concat(ct(r.backgroundColor),'" />'),'\n<path d="').concat(a,'" fill-rule="evenodd" fill="').concat(ct(r.foregroundColor),'" />\n</svg>').replace(/\n/g,""),c=n.dummyAnchor;c.download="QRCode.svg",c.href="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(i),c.click()}},disabled:!r.isValid},"SVG"))};function rr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return or(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return or(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function or(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ar=function(t){var n=Re.useContainer(),r=rr($e.useContainer(),1)[0],o=rr(Ze.useContainer(),1)[0];return(0,e.h)("div",{className:"button-download-png"},(0,e.h)("button",{className:"large orange",onClick:function(e){var t=o.size,a=ot({size:r.size,shapes:r.shapes,roundCorner:r.roundCorner,eyeRoundCorner:r.eyeRoundCorner,canvas:{size:t}}),i='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 '.concat(t," ").concat(t,'">\n').concat(window.SVG_CREDITS,"\n").concat(o.excludeBackground?"":'<path d="M0,0H'.concat(t,"V").concat(t,'H0z" fill="').concat(ct(r.backgroundColor),'" />'),'\n<path d="').concat(a,'" fill-rule="evenodd" fill="').concat(ct(r.foregroundColor),'" />\n</svg>').replace(/\n/g,"");navigator.clipboard.writeText(i),n.push("SVG code copied to clipboard !")},disabled:!r.isValid},"SVG"))};window.SVG_CREDITS="\x3c!-- Create at example.com --\x3e";(0,e.sY)("http:"==location.protocol||"https:"==location.protocol?(0,e.h)(Re.Provider,null,(0,e.h)($e.Provider,null,(0,e.h)(Ze.Provider,null,(0,e.h)(Je,null),(0,e.h)((function(){return(0,e.h)("div",{className:"layout"},(0,e.h)("div",{className:"layout-preview"},(0,e.h)("div",{className:"layout-preview-container"},(0,e.h)(et,null,(0,e.h)(st,null)))),(0,e.h)("div",{className:"layout-options"},(0,e.h)("div",{className:"layout-options-container"},(0,e.h)("div",{className:"layout-options-body"},(0,e.h)(Ke,null,"Content"),(0,e.h)(mn,null),(0,e.h)(Ke,null,"Styles"),(0,e.h)(Mn,null),(0,e.h)("div",{className:"h-16"}),(0,e.h)(kn,null),(0,e.h)("div",{className:"h-16"}),(0,e.h)(Yn,null),(0,e.h)("div",{className:"h-4"})),(0,e.h)("div",{className:"layout-options-footer"},(0,e.h)(Ke,null,"Export"),(0,e.h)(Gn,null),(0,e.h)("div",{className:"h-8"}),(0,e.h)(Jn,null),(0,e.h)("div",{className:"h-24"}),(0,e.h)("label",null,(0,e.h)("svg",{viewBox:"0 0 512 512"},(0,e.h)("path",{d:"M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"})),"Download"),(0,e.h)("div",{className:"h-12"}),(0,e.h)("div",{className:"row"},(0,e.h)("div",{className:"f-1"},(0,e.h)(Xn,null)),(0,e.h)("div",{className:"w-16 nw-16"}),(0,e.h)("div",{className:"f-1"},(0,e.h)(nr,null))),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,(0,e.h)("svg",{viewBox:"0 0 640 512"},(0,e.h)("path",{d:"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z"})),"Copy Code"),(0,e.h)("div",{className:"h-12"}),(0,e.h)(ar,null)))))}),null)))):(0,e.h)("div",{className:"app-error"},"Oops! Something went wrong!"),document.querySelector("#app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLElBR1JDLEVBQXFCLENBRXpCLEVBQUcsR0FBSSxHQUFJLEdBQ1gsR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxJQUNaLEdBQUksR0FBSSxJQUFLLElBQ2IsR0FBSSxHQUFJLElBQUssSUFDYixHQUFJLElBQUssSUFBSyxJQUNkLEdBQUksSUFBSyxJQUFLLElBQ2QsR0FBSSxJQUFLLElBQUssSUFDZCxHQUFJLElBQUssSUFBSyxJQUNkLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLEtBQ2YsSUFBSyxJQUFLLElBQUssS0FDZixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJ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QUFLQSxVQUFVLFVBRWYscUJBQ0MsY0FBSzZaLFFBQVEsZ0JBQ1osZUFBTXZrQixFQUFFLGtpQkFGVixjQU9BLGNBQUswSyxVQUFVLFVBRWYsT0FBQyxHQUFELFlBd0JBLFVBS0gsY0FBS0EsVUFBVSxhQUFmLCtCQUlEekQsU0FBU29nQyxjQUFjLFUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL2RpamtzdHJhanMvZGlqa3N0cmEuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9lbmNvZGUtdXRmOC9pbmRleC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9jb21wYXQvZGlzdC9jb21wYXQubW9kdWxlLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcHJlYWN0L2Rpc3QvcHJlYWN0Lm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3ByZWFjdC9ob29rcy9kaXN0L2hvb2tzLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY2FuLXByb21pc2UuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxpZ25tZW50LXBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxwaGFudW1lcmljLWRhdGEuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYml0LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtbWF0cml4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2J5dGUtZGF0YS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9lcnJvci1jb3JyZWN0aW9uLWNvZGUuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZXJyb3ItY29ycmVjdGlvbi1sZXZlbC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9maW5kZXItcGF0dGVybi5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9mb3JtYXQtaW5mby5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9nYWxvaXMtZmllbGQuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUva2FuamktZGF0YS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9tYXNrLXBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbW9kZS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9udW1lcmljLWRhdGEuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcG9seW5vbWlhbC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9xcmNvZGUuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVlZC1zb2xvbW9uLWVuY29kZXIuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVnZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvc2VnbWVudHMuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdmVyc2lvbi1jaGVjay5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS92ZXJzaW9uLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9jYW52YXMuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3N2Zy10YWcuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3V0aWxzLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvdXNlLXRocm90dGxlZC1lZmZlY3QvbGliL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3Ivd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3Ivd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3QvZW1vdGlvbi1zaGVldC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVG9rZW5pemVyLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9FbnVtLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9QcmVmaXhlci5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUGFyc2VyLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY2FjaGUvZGlzdC9lbW90aW9uLWNhY2hlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9NaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2hhc2guYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NlcmlhbGl6ZS9kaXN0L2Vtb3Rpb24tc2VyaWFsaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY3NzL2NyZWF0ZS1pbnN0YW5jZS9kaXN0L2Vtb3Rpb24tY3NzLWNyZWF0ZS1pbnN0YW5jZS5lc20uanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jc3MvZGlzdC9lbW90aW9uLWNzcy5lc20uanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy91bnN0YXRlZC1uZXh0L2Rpc3QvdW5zdGF0ZWQtbmV4dC5tanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC11c2UvZXNtL3VzZVVwZGF0ZS5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vc3JjL2xpYi91c2VXaXNlU3RhdGUuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9jb250YWluZXJzL0FsZXJ0LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvY29udGFpbmVycy9RUkNvZGUuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9jb250YWluZXJzL0V4cG9ydC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbkxpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC11c2UvZXNtL3VzZUVmZmVjdE9uY2UuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9BbGVydC9pbmRleC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vc3JjL3BhcnRpYWxzL1ByZXZpZXdRUkNvZGVDb250YWluZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9saWIvZ2VuZXJhdGUtc3ZnLXBhdGgtY29tbWFuZC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vc3JjL2xpYi9hcnJUb0hTTEEuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9QcmV2aWV3UVJDb2RlL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvbGliL3VzZVdpc2VSZWYuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9JbnB1dENvbnRlbnQvVGV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vc3JjL3BhcnRpYWxzL0lucHV0Q29udGVudC9MaW5rL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvY29tcG9uZW50cy9JbnB1dENoZWNrYm94L2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvbGliL3VzZUNsaWNrSU8uanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9jb21wb25lbnRzL0lucHV0RHJvcGRvd24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9JbnB1dENvbnRlbnQvV2lmaS9pbmRleC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL2pzLWNvb2tpZS9kaXN0L2pzLmNvb2tpZS5tanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9JbnB1dENvbnRlbnQvUGhvbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9yZWFjdC11c2UvZXNtL3VzZURlYm91bmNlLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9ub2RlX21vZHVsZXMvcmVhY3QtdXNlL2VzbS91c2VUaW1lb3V0Rm4uanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9jb21wb25lbnRzL0FzcGVjdFJhdGlvL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvcGFydGlhbHMvSW5wdXRDb250ZW50L0xvY2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvcGFydGlhbHMvSW5wdXRDb250ZW50L0NyeXB0by9pbmRleC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vc3JjL3BhcnRpYWxzL0lucHV0Q29udGVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vc3JjL2xpYi9tYXRoLmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvbGliL25vZGUuanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9jb21wb25lbnRzL0lucHV0UmFuZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9PcHRpb25NYXJnaW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9PcHRpb25TbW9vdGhuZXNzL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvY29tcG9uZW50cy9JbnB1dENvbG9yUGlja2VyL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvcGFydGlhbHMvQ29sb3JQaWNrZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9FeHBvcnRTaXplL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvcGFydGlhbHMvRXhjbHVkZWJhY2tncm91bmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9wYXJ0aWFscy9CdXR0b25Eb3dubG9hZFBORy9pbmRleC5qcyIsIndlYnBhY2s6Ly9xcmNvZGUtZ2VuZXJhdG9yLy4vc3JjL3BhcnRpYWxzL0J1dHRvbkRvd25sb2FkU1ZHL2luZGV4LmpzIiwid2VicGFjazovL3FyY29kZS1nZW5lcmF0b3IvLi9zcmMvcGFydGlhbHMvQnV0dG9uQ29weVNWR0NvZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcXJjb2RlLWdlbmVyYXRvci8uL3NyYy9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDcmVhdGVkIDIwMDgtMDgtMTkuXG4gKlxuICogRGlqa3N0cmEgcGF0aC1maW5kaW5nIGZ1bmN0aW9ucy4gQWRhcHRlZCBmcm9tIHRoZSBEaWprc3RhciBQeXRob24gcHJvamVjdC5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDhcbiAqICAgV3lhdHQgQmFsZHdpbiA8c2VsZkB3eWF0dGJhbGR3aW4uY29tPlxuICogICBBbGwgcmlnaHRzIHJlc2VydmVkXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICpcbiAqICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBkaWprc3RyYSA9IHtcbiAgc2luZ2xlX3NvdXJjZV9zaG9ydGVzdF9wYXRoczogZnVuY3Rpb24oZ3JhcGgsIHMsIGQpIHtcbiAgICAvLyBQcmVkZWNlc3NvciBtYXAgZm9yIGVhY2ggbm9kZSB0aGF0IGhhcyBiZWVuIGVuY291bnRlcmVkLlxuICAgIC8vIG5vZGUgSUQgPT4gcHJlZGVjZXNzb3Igbm9kZSBJRFxuICAgIHZhciBwcmVkZWNlc3NvcnMgPSB7fTtcblxuICAgIC8vIENvc3RzIG9mIHNob3J0ZXN0IHBhdGhzIGZyb20gcyB0byBhbGwgbm9kZXMgZW5jb3VudGVyZWQuXG4gICAgLy8gbm9kZSBJRCA9PiBjb3N0XG4gICAgdmFyIGNvc3RzID0ge307XG4gICAgY29zdHNbc10gPSAwO1xuXG4gICAgLy8gQ29zdHMgb2Ygc2hvcnRlc3QgcGF0aHMgZnJvbSBzIHRvIGFsbCBub2RlcyBlbmNvdW50ZXJlZDsgZGlmZmVycyBmcm9tXG4gICAgLy8gYGNvc3RzYCBpbiB0aGF0IGl0IHByb3ZpZGVzIGVhc3kgYWNjZXNzIHRvIHRoZSBub2RlIHRoYXQgY3VycmVudGx5IGhhc1xuICAgIC8vIHRoZSBrbm93biBzaG9ydGVzdCBwYXRoIGZyb20gcy5cbiAgICAvLyBYWFg6IERvIHdlIGFjdHVhbGx5IG5lZWQgYm90aCBgY29zdHNgIGFuZCBgb3BlbmA/XG4gICAgdmFyIG9wZW4gPSBkaWprc3RyYS5Qcmlvcml0eVF1ZXVlLm1ha2UoKTtcbiAgICBvcGVuLnB1c2gocywgMCk7XG5cbiAgICB2YXIgY2xvc2VzdCxcbiAgICAgICAgdSwgdixcbiAgICAgICAgY29zdF9vZl9zX3RvX3UsXG4gICAgICAgIGFkamFjZW50X25vZGVzLFxuICAgICAgICBjb3N0X29mX2UsXG4gICAgICAgIGNvc3Rfb2Zfc190b191X3BsdXNfY29zdF9vZl9lLFxuICAgICAgICBjb3N0X29mX3NfdG9fdixcbiAgICAgICAgZmlyc3RfdmlzaXQ7XG4gICAgd2hpbGUgKCFvcGVuLmVtcHR5KCkpIHtcbiAgICAgIC8vIEluIHRoZSBub2RlcyByZW1haW5pbmcgaW4gZ3JhcGggdGhhdCBoYXZlIGEga25vd24gY29zdCBmcm9tIHMsXG4gICAgICAvLyBmaW5kIHRoZSBub2RlLCB1LCB0aGF0IGN1cnJlbnRseSBoYXMgdGhlIHNob3J0ZXN0IHBhdGggZnJvbSBzLlxuICAgICAgY2xvc2VzdCA9IG9wZW4ucG9wKCk7XG4gICAgICB1ID0gY2xvc2VzdC52YWx1ZTtcbiAgICAgIGNvc3Rfb2Zfc190b191ID0gY2xvc2VzdC5jb3N0O1xuXG4gICAgICAvLyBHZXQgbm9kZXMgYWRqYWNlbnQgdG8gdS4uLlxuICAgICAgYWRqYWNlbnRfbm9kZXMgPSBncmFwaFt1XSB8fCB7fTtcblxuICAgICAgLy8gLi4uYW5kIGV4cGxvcmUgdGhlIGVkZ2VzIHRoYXQgY29ubmVjdCB1IHRvIHRob3NlIG5vZGVzLCB1cGRhdGluZ1xuICAgICAgLy8gdGhlIGNvc3Qgb2YgdGhlIHNob3J0ZXN0IHBhdGhzIHRvIGFueSBvciBhbGwgb2YgdGhvc2Ugbm9kZXMgYXNcbiAgICAgIC8vIG5lY2Vzc2FyeS4gdiBpcyB0aGUgbm9kZSBhY3Jvc3MgdGhlIGN1cnJlbnQgZWRnZSBmcm9tIHUuXG4gICAgICBmb3IgKHYgaW4gYWRqYWNlbnRfbm9kZXMpIHtcbiAgICAgICAgaWYgKGFkamFjZW50X25vZGVzLmhhc093blByb3BlcnR5KHYpKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBjb3N0IG9mIHRoZSBlZGdlIHJ1bm5pbmcgZnJvbSB1IHRvIHYuXG4gICAgICAgICAgY29zdF9vZl9lID0gYWRqYWNlbnRfbm9kZXNbdl07XG5cbiAgICAgICAgICAvLyBDb3N0IG9mIHMgdG8gdSBwbHVzIHRoZSBjb3N0IG9mIHUgdG8gdiBhY3Jvc3MgZS0tdGhpcyBpcyAqYSpcbiAgICAgICAgICAvLyBjb3N0IGZyb20gcyB0byB2IHRoYXQgbWF5IG9yIG1heSBub3QgYmUgbGVzcyB0aGFuIHRoZSBjdXJyZW50XG4gICAgICAgICAgLy8ga25vd24gY29zdCB0byB2LlxuICAgICAgICAgIGNvc3Rfb2Zfc190b191X3BsdXNfY29zdF9vZl9lID0gY29zdF9vZl9zX3RvX3UgKyBjb3N0X29mX2U7XG5cbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IHZpc2l0ZWQgdiB5ZXQgT1IgaWYgdGhlIGN1cnJlbnQga25vd24gY29zdCBmcm9tIHMgdG9cbiAgICAgICAgICAvLyB2IGlzIGdyZWF0ZXIgdGhhbiB0aGUgbmV3IGNvc3Qgd2UganVzdCBmb3VuZCAoY29zdCBvZiBzIHRvIHUgcGx1c1xuICAgICAgICAgIC8vIGNvc3Qgb2YgdSB0byB2IGFjcm9zcyBlKSwgdXBkYXRlIHYncyBjb3N0IGluIHRoZSBjb3N0IGxpc3QgYW5kXG4gICAgICAgICAgLy8gdXBkYXRlIHYncyBwcmVkZWNlc3NvciBpbiB0aGUgcHJlZGVjZXNzb3IgbGlzdCAoaXQncyBub3cgdSkuXG4gICAgICAgICAgY29zdF9vZl9zX3RvX3YgPSBjb3N0c1t2XTtcbiAgICAgICAgICBmaXJzdF92aXNpdCA9ICh0eXBlb2YgY29zdHNbdl0gPT09ICd1bmRlZmluZWQnKTtcbiAgICAgICAgICBpZiAoZmlyc3RfdmlzaXQgfHwgY29zdF9vZl9zX3RvX3YgPiBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZSkge1xuICAgICAgICAgICAgY29zdHNbdl0gPSBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZTtcbiAgICAgICAgICAgIG9wZW4ucHVzaCh2LCBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZSk7XG4gICAgICAgICAgICBwcmVkZWNlc3NvcnNbdl0gPSB1O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvc3RzW2RdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIG1zZyA9IFsnQ291bGQgbm90IGZpbmQgYSBwYXRoIGZyb20gJywgcywgJyB0byAnLCBkLCAnLiddLmpvaW4oJycpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWRlY2Vzc29ycztcbiAgfSxcblxuICBleHRyYWN0X3Nob3J0ZXN0X3BhdGhfZnJvbV9wcmVkZWNlc3Nvcl9saXN0OiBmdW5jdGlvbihwcmVkZWNlc3NvcnMsIGQpIHtcbiAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICB2YXIgdSA9IGQ7XG4gICAgdmFyIHByZWRlY2Vzc29yO1xuICAgIHdoaWxlICh1KSB7XG4gICAgICBub2Rlcy5wdXNoKHUpO1xuICAgICAgcHJlZGVjZXNzb3IgPSBwcmVkZWNlc3NvcnNbdV07XG4gICAgICB1ID0gcHJlZGVjZXNzb3JzW3VdO1xuICAgIH1cbiAgICBub2Rlcy5yZXZlcnNlKCk7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9LFxuXG4gIGZpbmRfcGF0aDogZnVuY3Rpb24oZ3JhcGgsIHMsIGQpIHtcbiAgICB2YXIgcHJlZGVjZXNzb3JzID0gZGlqa3N0cmEuc2luZ2xlX3NvdXJjZV9zaG9ydGVzdF9wYXRocyhncmFwaCwgcywgZCk7XG4gICAgcmV0dXJuIGRpamtzdHJhLmV4dHJhY3Rfc2hvcnRlc3RfcGF0aF9mcm9tX3ByZWRlY2Vzc29yX2xpc3QoXG4gICAgICBwcmVkZWNlc3NvcnMsIGQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBIHZlcnkgbmFpdmUgcHJpb3JpdHkgcXVldWUgaW1wbGVtZW50YXRpb24uXG4gICAqL1xuICBQcmlvcml0eVF1ZXVlOiB7XG4gICAgbWFrZTogZnVuY3Rpb24gKG9wdHMpIHtcbiAgICAgIHZhciBUID0gZGlqa3N0cmEuUHJpb3JpdHlRdWV1ZSxcbiAgICAgICAgICB0ID0ge30sXG4gICAgICAgICAga2V5O1xuICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICBmb3IgKGtleSBpbiBUKSB7XG4gICAgICAgIGlmIChULmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICB0W2tleV0gPSBUW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHQucXVldWUgPSBbXTtcbiAgICAgIHQuc29ydGVyID0gb3B0cy5zb3J0ZXIgfHwgVC5kZWZhdWx0X3NvcnRlcjtcbiAgICAgIHJldHVybiB0O1xuICAgIH0sXG5cbiAgICBkZWZhdWx0X3NvcnRlcjogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmNvc3QgLSBiLmNvc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyBpdGVtIHRvIHRoZSBxdWV1ZSBhbmQgZW5zdXJlIHRoZSBoaWdoZXN0IHByaW9yaXR5IGVsZW1lbnRcbiAgICAgKiBpcyBhdCB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlLlxuICAgICAqL1xuICAgIHB1c2g6IGZ1bmN0aW9uICh2YWx1ZSwgY29zdCkge1xuICAgICAgdmFyIGl0ZW0gPSB7dmFsdWU6IHZhbHVlLCBjb3N0OiBjb3N0fTtcbiAgICAgIHRoaXMucXVldWUucHVzaChpdGVtKTtcbiAgICAgIHRoaXMucXVldWUuc29ydCh0aGlzLnNvcnRlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgaGlnaGVzdCBwcmlvcml0eSBlbGVtZW50IGluIHRoZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBwb3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXVlLnNoaWZ0KCk7XG4gICAgfSxcblxuICAgIGVtcHR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZS5sZW5ndGggPT09IDA7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIG5vZGUuanMgbW9kdWxlIGV4cG9ydHNcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGRpamtzdHJhO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5jb2RlVXRmOCAoaW5wdXQpIHtcbiAgdmFyIHJlc3VsdCA9IFtdXG4gIHZhciBzaXplID0gaW5wdXQubGVuZ3RoXG5cbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHNpemU7IGluZGV4KyspIHtcbiAgICB2YXIgcG9pbnQgPSBpbnB1dC5jaGFyQ29kZUF0KGluZGV4KVxuXG4gICAgaWYgKHBvaW50ID49IDB4RDgwMCAmJiBwb2ludCA8PSAweERCRkYgJiYgc2l6ZSA+IGluZGV4ICsgMSkge1xuICAgICAgdmFyIHNlY29uZCA9IGlucHV0LmNoYXJDb2RlQXQoaW5kZXggKyAxKVxuXG4gICAgICBpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgICBwb2ludCA9IChwb2ludCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDBcbiAgICAgICAgaW5kZXggKz0gMVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVTLUFTQ0lJXG4gICAgaWYgKHBvaW50IDwgMHg4MCkge1xuICAgICAgcmVzdWx0LnB1c2gocG9pbnQpXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIDItYnl0ZSBVVEYtOFxuICAgIGlmIChwb2ludCA8IDB4ODAwKSB7XG4gICAgICByZXN1bHQucHVzaCgocG9pbnQgPj4gNikgfCAxOTIpXG4gICAgICByZXN1bHQucHVzaCgocG9pbnQgJiA2MykgfCAxMjgpXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIDMtYnl0ZSBVVEYtOFxuICAgIGlmIChwb2ludCA8IDB4RDgwMCB8fCAocG9pbnQgPj0gMHhFMDAwICYmIHBvaW50IDwgMHgxMDAwMCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKChwb2ludCA+PiAxMikgfCAyMjQpXG4gICAgICByZXN1bHQucHVzaCgoKHBvaW50ID4+IDYpICYgNjMpIHwgMTI4KVxuICAgICAgcmVzdWx0LnB1c2goKHBvaW50ICYgNjMpIHwgMTI4KVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICAvLyA0LWJ5dGUgVVRGLThcbiAgICBpZiAocG9pbnQgPj0gMHgxMDAwMCAmJiBwb2ludCA8PSAweDEwRkZGRikge1xuICAgICAgcmVzdWx0LnB1c2goKHBvaW50ID4+IDE4KSB8IDI0MClcbiAgICAgIHJlc3VsdC5wdXNoKCgocG9pbnQgPj4gMTIpICYgNjMpIHwgMTI4KVxuICAgICAgcmVzdWx0LnB1c2goKChwb2ludCA+PiA2KSAmIDYzKSB8IDEyOClcbiAgICAgIHJlc3VsdC5wdXNoKChwb2ludCAmIDYzKSB8IDEyOClcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgLy8gSW52YWxpZCBjaGFyYWN0ZXJcbiAgICByZXN1bHQucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuYnVmZmVyXG59XG4iLCJpbXBvcnR7dXNlU3RhdGUgYXMgbix1c2VSZWR1Y2VyIGFzIHQsdXNlRWZmZWN0IGFzIGUsdXNlTGF5b3V0RWZmZWN0IGFzIHIsdXNlUmVmIGFzIHUsdXNlSW1wZXJhdGl2ZUhhbmRsZSBhcyBvLHVzZU1lbW8gYXMgaSx1c2VDYWxsYmFjayBhcyBsLHVzZUNvbnRleHQgYXMgZix1c2VEZWJ1Z1ZhbHVlIGFzIGN9ZnJvbVwicHJlYWN0L2hvb2tzXCI7ZXhwb3J0KmZyb21cInByZWFjdC9ob29rc1wiO2ltcG9ydHtDb21wb25lbnQgYXMgYSxjcmVhdGVFbGVtZW50IGFzIHMsb3B0aW9ucyBhcyBoLHRvQ2hpbGRBcnJheSBhcyBkLEZyYWdtZW50IGFzIHYscmVuZGVyIGFzIHAsaHlkcmF0ZSBhcyBtLGNsb25lRWxlbWVudCBhcyB5LGNyZWF0ZVJlZiBhcyBiLGNyZWF0ZUNvbnRleHQgYXMgX31mcm9tXCJwcmVhY3RcIjtleHBvcnR7Y3JlYXRlRWxlbWVudCxjcmVhdGVDb250ZXh0LGNyZWF0ZVJlZixGcmFnbWVudCxDb21wb25lbnR9ZnJvbVwicHJlYWN0XCI7ZnVuY3Rpb24gQyhuLHQpe2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtyZXR1cm4gbn1mdW5jdGlvbiBTKG4sdCl7Zm9yKHZhciBlIGluIG4paWYoXCJfX3NvdXJjZVwiIT09ZSYmIShlIGluIHQpKXJldHVybiEwO2Zvcih2YXIgciBpbiB0KWlmKFwiX19zb3VyY2VcIiE9PXImJm5bcl0hPT10W3JdKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIEUobil7dGhpcy5wcm9wcz1ufWZ1bmN0aW9uIGcobix0KXtmdW5jdGlvbiBlKG4pe3ZhciBlPXRoaXMucHJvcHMucmVmLHI9ZT09bi5yZWY7cmV0dXJuIXImJmUmJihlLmNhbGw/ZShudWxsKTplLmN1cnJlbnQ9bnVsbCksdD8hdCh0aGlzLnByb3BzLG4pfHwhcjpTKHRoaXMucHJvcHMsbil9ZnVuY3Rpb24gcih0KXtyZXR1cm4gdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZSxzKG4sdCl9cmV0dXJuIHIuZGlzcGxheU5hbWU9XCJNZW1vKFwiKyhuLmRpc3BsYXlOYW1lfHxuLm5hbWUpK1wiKVwiLHIucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9ITAsci5fX2Y9ITAscn0oRS5wcm90b3R5cGU9bmV3IGEpLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwLEUucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuLHQpe3JldHVybiBTKHRoaXMucHJvcHMsbil8fFModGhpcy5zdGF0ZSx0KX07dmFyIHc9aC5fX2I7aC5fX2I9ZnVuY3Rpb24obil7bi50eXBlJiZuLnR5cGUuX19mJiZuLnJlZiYmKG4ucHJvcHMucmVmPW4ucmVmLG4ucmVmPW51bGwpLHcmJncobil9O3ZhciBSPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKXx8MzkxMTtmdW5jdGlvbiB4KG4pe2Z1bmN0aW9uIHQodCl7dmFyIGU9Qyh7fSx0KTtyZXR1cm4gZGVsZXRlIGUucmVmLG4oZSx0LnJlZnx8bnVsbCl9cmV0dXJuIHQuJCR0eXBlb2Y9Uix0LnJlbmRlcj10LHQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9dC5fX2Y9ITAsdC5kaXNwbGF5TmFtZT1cIkZvcndhcmRSZWYoXCIrKG4uZGlzcGxheU5hbWV8fG4ubmFtZSkrXCIpXCIsdH12YXIgTj1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsPT1uP251bGw6ZChkKG4pLm1hcCh0KSl9LGs9e21hcDpOLGZvckVhY2g6Tixjb3VudDpmdW5jdGlvbihuKXtyZXR1cm4gbj9kKG4pLmxlbmd0aDowfSxvbmx5OmZ1bmN0aW9uKG4pe3ZhciB0PWQobik7aWYoMSE9PXQubGVuZ3RoKXRocm93XCJDaGlsZHJlbi5vbmx5XCI7cmV0dXJuIHRbMF19LHRvQXJyYXk6ZH0sQT1oLl9fZTtoLl9fZT1mdW5jdGlvbihuLHQsZSxyKXtpZihuLnRoZW4pZm9yKHZhciB1LG89dDtvPW8uX187KWlmKCh1PW8uX19jKSYmdS5fX2MpcmV0dXJuIG51bGw9PXQuX19lJiYodC5fX2U9ZS5fX2UsdC5fX2s9ZS5fX2spLHUuX19jKG4sdCk7QShuLHQsZSxyKX07dmFyIE89aC51bm1vdW50O2Z1bmN0aW9uIEwoKXt0aGlzLl9fdT0wLHRoaXMudD1udWxsLHRoaXMuX19iPW51bGx9ZnVuY3Rpb24gVShuKXt2YXIgdD1uLl9fLl9fYztyZXR1cm4gdCYmdC5fX2UmJnQuX19lKG4pfWZ1bmN0aW9uIEYobil7dmFyIHQsZSxyO2Z1bmN0aW9uIHUodSl7aWYodHx8KHQ9bigpKS50aGVuKGZ1bmN0aW9uKG4pe2U9bi5kZWZhdWx0fHxufSxmdW5jdGlvbihuKXtyPW59KSxyKXRocm93IHI7aWYoIWUpdGhyb3cgdDtyZXR1cm4gcyhlLHUpfXJldHVybiB1LmRpc3BsYXlOYW1lPVwiTGF6eVwiLHUuX19mPSEwLHV9ZnVuY3Rpb24gTSgpe3RoaXMudT1udWxsLHRoaXMubz1udWxsfWgudW5tb3VudD1mdW5jdGlvbihuKXt2YXIgdD1uLl9fYzt0JiZ0Ll9fUiYmdC5fX1IoKSx0JiYhMD09PW4uX19oJiYobi50eXBlPW51bGwpLE8mJk8obil9LChMLnByb3RvdHlwZT1uZXcgYSkuX19jPWZ1bmN0aW9uKG4sdCl7dmFyIGU9dC5fX2Mscj10aGlzO251bGw9PXIudCYmKHIudD1bXSksci50LnB1c2goZSk7dmFyIHU9VShyLl9fdiksbz0hMSxpPWZ1bmN0aW9uKCl7b3x8KG89ITAsZS5fX1I9bnVsbCx1P3UobCk6bCgpKX07ZS5fX1I9aTt2YXIgbD1mdW5jdGlvbigpe2lmKCEtLXIuX191KXtpZihyLnN0YXRlLl9fZSl7dmFyIG49ci5zdGF0ZS5fX2U7ci5fX3YuX19rWzBdPWZ1bmN0aW9uIG4odCxlLHIpe3JldHVybiB0JiYodC5fX3Y9bnVsbCx0Ll9faz10Ll9fayYmdC5fX2subWFwKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZSxyKX0pLHQuX19jJiZ0Ll9fYy5fX1A9PT1lJiYodC5fX2UmJnIuaW5zZXJ0QmVmb3JlKHQuX19lLHQuX19kKSx0Ll9fYy5fX2U9ITAsdC5fX2MuX19QPXIpKSx0fShuLG4uX19jLl9fUCxuLl9fYy5fX08pfXZhciB0O2ZvcihyLnNldFN0YXRlKHtfX2U6ci5fX2I9bnVsbH0pO3Q9ci50LnBvcCgpOyl0LmZvcmNlVXBkYXRlKCl9fSxmPSEwPT09dC5fX2g7ci5fX3UrK3x8Znx8ci5zZXRTdGF0ZSh7X19lOnIuX19iPXIuX192Ll9fa1swXX0pLG4udGhlbihpLGkpfSxMLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3RoaXMudD1bXX0sTC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKG4sdCl7aWYodGhpcy5fX2Ipe2lmKHRoaXMuX192Ll9fayl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxyPXRoaXMuX192Ll9fa1swXS5fX2M7dGhpcy5fX3YuX19rWzBdPWZ1bmN0aW9uIG4odCxlLHIpe3JldHVybiB0JiYodC5fX2MmJnQuX19jLl9fSCYmKHQuX19jLl9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIG4uX19jJiZuLl9fYygpfSksdC5fX2MuX19IPW51bGwpLG51bGwhPSh0PUMoe30sdCkpLl9fYyYmKHQuX19jLl9fUD09PXImJih0Ll9fYy5fX1A9ZSksdC5fX2M9bnVsbCksdC5fX2s9dC5fX2smJnQuX19rLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gbih0LGUscil9KSksdH0odGhpcy5fX2IsZSxyLl9fTz1yLl9fUCl9dGhpcy5fX2I9bnVsbH12YXIgdT10Ll9fZSYmcyh2LG51bGwsbi5mYWxsYmFjayk7cmV0dXJuIHUmJih1Ll9faD1udWxsKSxbcyh2LG51bGwsdC5fX2U/bnVsbDpuLmNoaWxkcmVuKSx1XX07dmFyIFQ9ZnVuY3Rpb24obix0LGUpe2lmKCsrZVsxXT09PWVbMF0mJm4uby5kZWxldGUodCksbi5wcm9wcy5yZXZlYWxPcmRlciYmKFwidFwiIT09bi5wcm9wcy5yZXZlYWxPcmRlclswXXx8IW4uby5zaXplKSlmb3IoZT1uLnU7ZTspe2Zvcig7ZS5sZW5ndGg+MzspZS5wb3AoKSgpO2lmKGVbMV08ZVswXSlicmVhaztuLnU9ZT1lWzJdfX07ZnVuY3Rpb24gRChuKXtyZXR1cm4gdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gbi5jb250ZXh0fSxuLmNoaWxkcmVufWZ1bmN0aW9uIEkobil7dmFyIHQ9dGhpcyxlPW4uaTt0LmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7cChudWxsLHQubCksdC5sPW51bGwsdC5pPW51bGx9LHQuaSYmdC5pIT09ZSYmdC5jb21wb25lbnRXaWxsVW5tb3VudCgpLG4uX192Pyh0Lmx8fCh0Lmk9ZSx0Lmw9e25vZGVUeXBlOjEscGFyZW50Tm9kZTplLGNoaWxkTm9kZXM6W10sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24obil7dGhpcy5jaGlsZE5vZGVzLnB1c2gobiksdC5pLmFwcGVuZENoaWxkKG4pfSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24obixlKXt0aGlzLmNoaWxkTm9kZXMucHVzaChuKSx0LmkuYXBwZW5kQ2hpbGQobil9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKG4pe3RoaXMuY2hpbGROb2Rlcy5zcGxpY2UodGhpcy5jaGlsZE5vZGVzLmluZGV4T2Yobik+Pj4xLDEpLHQuaS5yZW1vdmVDaGlsZChuKX19KSxwKHMoRCx7Y29udGV4dDp0LmNvbnRleHR9LG4uX192KSx0LmwpKTp0LmwmJnQuY29tcG9uZW50V2lsbFVubW91bnQoKX1mdW5jdGlvbiBXKG4sdCl7cmV0dXJuIHMoSSx7X192Om4saTp0fSl9KE0ucHJvdG90eXBlPW5ldyBhKS5fX2U9ZnVuY3Rpb24obil7dmFyIHQ9dGhpcyxlPVUodC5fX3YpLHI9dC5vLmdldChuKTtyZXR1cm4gclswXSsrLGZ1bmN0aW9uKHUpe3ZhciBvPWZ1bmN0aW9uKCl7dC5wcm9wcy5yZXZlYWxPcmRlcj8oci5wdXNoKHUpLFQodCxuLHIpKTp1KCl9O2U/ZShvKTpvKCl9fSxNLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24obil7dGhpcy51PW51bGwsdGhpcy5vPW5ldyBNYXA7dmFyIHQ9ZChuLmNoaWxkcmVuKTtuLnJldmVhbE9yZGVyJiZcImJcIj09PW4ucmV2ZWFsT3JkZXJbMF0mJnQucmV2ZXJzZSgpO2Zvcih2YXIgZT10Lmxlbmd0aDtlLS07KXRoaXMuby5zZXQodFtlXSx0aGlzLnU9WzEsMCx0aGlzLnVdKTtyZXR1cm4gbi5jaGlsZHJlbn0sTS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlPU0ucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50PWZ1bmN0aW9uKCl7dmFyIG49dGhpczt0aGlzLm8uZm9yRWFjaChmdW5jdGlvbih0LGUpe1QobixlLHQpfSl9O3ZhciBQPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyxWPS9eKD86YWNjZW50fGFsaWdubWVudHxhcmFiaWN8YmFzZWxpbmV8Y2FwfGNsaXAoPyFQYXRoVSl8Y29sb3J8ZG9taW5hbnR8ZmlsbHxmbG9vZHxmb250fGdseXBoKD8hUil8aG9yaXp8bWFya2VyKD8hSHxXfFUpfG92ZXJsaW5lfHBhaW50fHN0b3B8c3RyaWtldGhyb3VnaHxzdHJva2V8dGV4dCg/IUwpfHVuZGVybGluZXx1bmljb2RlfHVuaXRzfHZ8dmVjdG9yfHZlcnR8d29yZHx3cml0aW5nfHgoPyFDKSlbQS1aXS8saj1cInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQsej1mdW5jdGlvbihuKXtyZXR1cm4oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbCgpPy9maWx8Y2hlfHJhZC9pOi9maWx8Y2hlfHJhL2kpLnRlc3Qobil9O2Z1bmN0aW9uIEIobix0LGUpe3JldHVybiBudWxsPT10Ll9fayYmKHQudGV4dENvbnRlbnQ9XCJcIikscChuLHQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUoKSxuP24uX19jOm51bGx9ZnVuY3Rpb24gJChuLHQsZSl7cmV0dXJuIG0obix0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlKCksbj9uLl9fYzpudWxsfWEucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e30sW1wiY29tcG9uZW50V2lsbE1vdW50XCIsXCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXCIsXCJjb21wb25lbnRXaWxsVXBkYXRlXCJdLmZvckVhY2goZnVuY3Rpb24obil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEucHJvdG90eXBlLG4se2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tcIlVOU0FGRV9cIituXX0sc2V0OmZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLG4se2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTp0fSl9fSl9KTt2YXIgSD1oLmV2ZW50O2Z1bmN0aW9uIFooKXt9ZnVuY3Rpb24gWSgpe3JldHVybiB0aGlzLmNhbmNlbEJ1YmJsZX1mdW5jdGlvbiBxKCl7cmV0dXJuIHRoaXMuZGVmYXVsdFByZXZlbnRlZH1oLmV2ZW50PWZ1bmN0aW9uKG4pe3JldHVybiBIJiYobj1IKG4pKSxuLnBlcnNpc3Q9WixuLmlzUHJvcGFnYXRpb25TdG9wcGVkPVksbi5pc0RlZmF1bHRQcmV2ZW50ZWQ9cSxuLm5hdGl2ZUV2ZW50PW59O3ZhciBHLEo9e2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jbGFzc319LEs9aC52bm9kZTtoLnZub2RlPWZ1bmN0aW9uKG4pe3ZhciB0PW4udHlwZSxlPW4ucHJvcHMscj1lO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXt2YXIgdT0tMT09PXQuaW5kZXhPZihcIi1cIik7Zm9yKHZhciBvIGluIHI9e30sZSl7dmFyIGk9ZVtvXTtqJiZcImNoaWxkcmVuXCI9PT1vJiZcIm5vc2NyaXB0XCI9PT10fHxcInZhbHVlXCI9PT1vJiZcImRlZmF1bHRWYWx1ZVwiaW4gZSYmbnVsbD09aXx8KFwiZGVmYXVsdFZhbHVlXCI9PT1vJiZcInZhbHVlXCJpbiBlJiZudWxsPT1lLnZhbHVlP289XCJ2YWx1ZVwiOlwiZG93bmxvYWRcIj09PW8mJiEwPT09aT9pPVwiXCI6L29uZG91YmxlY2xpY2svaS50ZXN0KG8pP289XCJvbmRibGNsaWNrXCI6L15vbmNoYW5nZSh0ZXh0YXJlYXxpbnB1dCkvaS50ZXN0KG8rdCkmJiF6KGUudHlwZSk/bz1cIm9uaW5wdXRcIjovXm9uZm9jdXMkL2kudGVzdChvKT9vPVwib25mb2N1c2luXCI6L15vbmJsdXIkL2kudGVzdChvKT9vPVwib25mb2N1c291dFwiOi9eb24oQW5pfFRyYXxUb3V8QmVmb3JlSW5wfENvbXBvKS8udGVzdChvKT9vPW8udG9Mb3dlckNhc2UoKTp1JiZWLnRlc3Qobyk/bz1vLnJlcGxhY2UoL1tBLVowLTldLyxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpOm51bGw9PT1pJiYoaT12b2lkIDApLHJbb109aSl9XCJzZWxlY3RcIj09dCYmci5tdWx0aXBsZSYmQXJyYXkuaXNBcnJheShyLnZhbHVlKSYmKHIudmFsdWU9ZChlLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe24ucHJvcHMuc2VsZWN0ZWQ9LTEhPXIudmFsdWUuaW5kZXhPZihuLnByb3BzLnZhbHVlKX0pKSxcInNlbGVjdFwiPT10JiZudWxsIT1yLmRlZmF1bHRWYWx1ZSYmKHIudmFsdWU9ZChlLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe24ucHJvcHMuc2VsZWN0ZWQ9ci5tdWx0aXBsZT8tMSE9ci5kZWZhdWx0VmFsdWUuaW5kZXhPZihuLnByb3BzLnZhbHVlKTpyLmRlZmF1bHRWYWx1ZT09bi5wcm9wcy52YWx1ZX0pKSxuLnByb3BzPXIsZS5jbGFzcyE9ZS5jbGFzc05hbWUmJihKLmVudW1lcmFibGU9XCJjbGFzc05hbWVcImluIGUsbnVsbCE9ZS5jbGFzc05hbWUmJihyLmNsYXNzPWUuY2xhc3NOYW1lKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImNsYXNzTmFtZVwiLEopKX1uLiQkdHlwZW9mPVAsSyYmSyhuKX07dmFyIFE9aC5fX3I7aC5fX3I9ZnVuY3Rpb24obil7USYmUShuKSxHPW4uX19jfTt2YXIgWD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjp7Y3VycmVudDp7cmVhZENvbnRleHQ6ZnVuY3Rpb24obil7cmV0dXJuIEcuX19uW24uX19jXS5wcm9wcy52YWx1ZX19fX0sbm49XCIxNy4wLjJcIjtmdW5jdGlvbiB0bihuKXtyZXR1cm4gcy5iaW5kKG51bGwsbil9ZnVuY3Rpb24gZW4obil7cmV0dXJuISFuJiZuLiQkdHlwZW9mPT09UH1mdW5jdGlvbiBybihuKXtyZXR1cm4gZW4obik/eS5hcHBseShudWxsLGFyZ3VtZW50cyk6bn1mdW5jdGlvbiB1bihuKXtyZXR1cm4hIW4uX19rJiYocChudWxsLG4pLCEwKX1mdW5jdGlvbiBvbihuKXtyZXR1cm4gbiYmKG4uYmFzZXx8MT09PW4ubm9kZVR5cGUmJm4pfHxudWxsfXZhciBsbj1mdW5jdGlvbihuLHQpe3JldHVybiBuKHQpfSxmbj1mdW5jdGlvbihuLHQpe3JldHVybiBuKHQpfSxjbj12O2V4cG9ydCBkZWZhdWx0e3VzZVN0YXRlOm4sdXNlUmVkdWNlcjp0LHVzZUVmZmVjdDplLHVzZUxheW91dEVmZmVjdDpyLHVzZVJlZjp1LHVzZUltcGVyYXRpdmVIYW5kbGU6byx1c2VNZW1vOmksdXNlQ2FsbGJhY2s6bCx1c2VDb250ZXh0OmYsdXNlRGVidWdWYWx1ZTpjLHZlcnNpb246XCIxNy4wLjJcIixDaGlsZHJlbjprLHJlbmRlcjpCLGh5ZHJhdGU6JCx1bm1vdW50Q29tcG9uZW50QXROb2RlOnVuLGNyZWF0ZVBvcnRhbDpXLGNyZWF0ZUVsZW1lbnQ6cyxjcmVhdGVDb250ZXh0Ol8sY3JlYXRlRmFjdG9yeTp0bixjbG9uZUVsZW1lbnQ6cm4sY3JlYXRlUmVmOmIsRnJhZ21lbnQ6dixpc1ZhbGlkRWxlbWVudDplbixmaW5kRE9NTm9kZTpvbixDb21wb25lbnQ6YSxQdXJlQ29tcG9uZW50OkUsbWVtbzpnLGZvcndhcmRSZWY6eCxmbHVzaFN5bmM6Zm4sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6bG4sU3RyaWN0TW9kZTp2LFN1c3BlbnNlOkwsU3VzcGVuc2VMaXN0Ok0sbGF6eTpGLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOlh9O2V4cG9ydHtubiBhcyB2ZXJzaW9uLGsgYXMgQ2hpbGRyZW4sQiBhcyByZW5kZXIsJCBhcyBoeWRyYXRlLHVuIGFzIHVubW91bnRDb21wb25lbnRBdE5vZGUsVyBhcyBjcmVhdGVQb3J0YWwsdG4gYXMgY3JlYXRlRmFjdG9yeSxybiBhcyBjbG9uZUVsZW1lbnQsZW4gYXMgaXNWYWxpZEVsZW1lbnQsb24gYXMgZmluZERPTU5vZGUsRSBhcyBQdXJlQ29tcG9uZW50LGcgYXMgbWVtbyx4IGFzIGZvcndhcmRSZWYsZm4gYXMgZmx1c2hTeW5jLGxuIGFzIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzLGNuIGFzIFN0cmljdE1vZGUsTCBhcyBTdXNwZW5zZSxNIGFzIFN1c3BlbnNlTGlzdCxGIGFzIGxhenksWCBhcyBfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYXQubW9kdWxlLmpzLm1hcFxuIiwidmFyIG4sbCx1LGksdCxvLHIsZixlPXt9LGM9W10scz0vYWNpdHxleCg/OnN8Z3xufHB8JCl8cnBofGdyaWR8b3dzfG1uY3xudHd8aW5lW2NoXXx6b298Xm9yZHxpdGVyYS9pO2Z1bmN0aW9uIGEobixsKXtmb3IodmFyIHUgaW4gbCluW3VdPWxbdV07cmV0dXJuIG59ZnVuY3Rpb24gaChuKXt2YXIgbD1uLnBhcmVudE5vZGU7bCYmbC5yZW1vdmVDaGlsZChuKX1mdW5jdGlvbiB2KGwsdSxpKXt2YXIgdCxvLHIsZj17fTtmb3IociBpbiB1KVwia2V5XCI9PXI/dD11W3JdOlwicmVmXCI9PXI/bz11W3JdOmZbcl09dVtyXTtpZihhcmd1bWVudHMubGVuZ3RoPjImJihmLmNoaWxkcmVuPWFyZ3VtZW50cy5sZW5ndGg+Mz9uLmNhbGwoYXJndW1lbnRzLDIpOmkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGwmJm51bGwhPWwuZGVmYXVsdFByb3BzKWZvcihyIGluIGwuZGVmYXVsdFByb3BzKXZvaWQgMD09PWZbcl0mJihmW3JdPWwuZGVmYXVsdFByb3BzW3JdKTtyZXR1cm4geShsLGYsdCxvLG51bGwpfWZ1bmN0aW9uIHkobixpLHQsbyxyKXt2YXIgZj17dHlwZTpuLHByb3BzOmksa2V5OnQscmVmOm8sX19rOm51bGwsX186bnVsbCxfX2I6MCxfX2U6bnVsbCxfX2Q6dm9pZCAwLF9fYzpudWxsLF9faDpudWxsLGNvbnN0cnVjdG9yOnZvaWQgMCxfX3Y6bnVsbD09cj8rK3U6cn07cmV0dXJuIG51bGw9PXImJm51bGwhPWwudm5vZGUmJmwudm5vZGUoZiksZn1mdW5jdGlvbiBwKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19ZnVuY3Rpb24gZChuKXtyZXR1cm4gbi5jaGlsZHJlbn1mdW5jdGlvbiBfKG4sbCl7dGhpcy5wcm9wcz1uLHRoaXMuY29udGV4dD1sfWZ1bmN0aW9uIGsobixsKXtpZihudWxsPT1sKXJldHVybiBuLl9fP2sobi5fXyxuLl9fLl9fay5pbmRleE9mKG4pKzEpOm51bGw7Zm9yKHZhciB1O2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXJldHVybiB1Ll9fZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnR5cGU/ayhuKTpudWxsfWZ1bmN0aW9uIGIobil7dmFyIGwsdTtpZihudWxsIT0obj1uLl9fKSYmbnVsbCE9bi5fX2Mpe2ZvcihuLl9fZT1uLl9fYy5iYXNlPW51bGwsbD0wO2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXtuLl9fZT1uLl9fYy5iYXNlPXUuX19lO2JyZWFrfXJldHVybiBiKG4pfX1mdW5jdGlvbiBtKG4peyghbi5fX2QmJihuLl9fZD0hMCkmJnQucHVzaChuKSYmIWcuX19yKyt8fHIhPT1sLmRlYm91bmNlUmVuZGVyaW5nKSYmKChyPWwuZGVib3VuY2VSZW5kZXJpbmcpfHxvKShnKX1mdW5jdGlvbiBnKCl7Zm9yKHZhciBuO2cuX19yPXQubGVuZ3RoOyluPXQuc29ydChmdW5jdGlvbihuLGwpe3JldHVybiBuLl9fdi5fX2ItbC5fX3YuX19ifSksdD1bXSxuLnNvbWUoZnVuY3Rpb24obil7dmFyIGwsdSxpLHQsbyxyO24uX19kJiYobz0odD0obD1uKS5fX3YpLl9fZSwocj1sLl9fUCkmJih1PVtdLChpPWEoe30sdCkpLl9fdj10Ll9fdisxLGoocix0LGksbC5fX24sdm9pZCAwIT09ci5vd25lclNWR0VsZW1lbnQsbnVsbCE9dC5fX2g/W29dOm51bGwsdSxudWxsPT1vP2sodCk6byx0Ll9faCkseih1LHQpLHQuX19lIT1vJiZiKHQpKSl9KX1mdW5jdGlvbiB3KG4sbCx1LGksdCxvLHIsZixzLGEpe3ZhciBoLHYscCxfLGIsbSxnLHc9aSYmaS5fX2t8fGMsQT13Lmxlbmd0aDtmb3IodS5fX2s9W10saD0wO2g8bC5sZW5ndGg7aCsrKWlmKG51bGwhPShfPXUuX19rW2hdPW51bGw9PShfPWxbaF0pfHxcImJvb2xlYW5cIj09dHlwZW9mIF8/bnVsbDpcInN0cmluZ1wiPT10eXBlb2YgX3x8XCJudW1iZXJcIj09dHlwZW9mIF98fFwiYmlnaW50XCI9PXR5cGVvZiBfP3kobnVsbCxfLG51bGwsbnVsbCxfKTpBcnJheS5pc0FycmF5KF8pP3koZCx7Y2hpbGRyZW46X30sbnVsbCxudWxsLG51bGwpOl8uX19iPjA/eShfLnR5cGUsXy5wcm9wcyxfLmtleSxudWxsLF8uX192KTpfKSl7aWYoXy5fXz11LF8uX19iPXUuX19iKzEsbnVsbD09PShwPXdbaF0pfHxwJiZfLmtleT09cC5rZXkmJl8udHlwZT09PXAudHlwZSl3W2hdPXZvaWQgMDtlbHNlIGZvcih2PTA7djxBO3YrKyl7aWYoKHA9d1t2XSkmJl8ua2V5PT1wLmtleSYmXy50eXBlPT09cC50eXBlKXt3W3ZdPXZvaWQgMDticmVha31wPW51bGx9aihuLF8scD1wfHxlLHQsbyxyLGYscyxhKSxiPV8uX19lLCh2PV8ucmVmKSYmcC5yZWYhPXYmJihnfHwoZz1bXSkscC5yZWYmJmcucHVzaChwLnJlZixudWxsLF8pLGcucHVzaCh2LF8uX19jfHxiLF8pKSxudWxsIT1iPyhudWxsPT1tJiYobT1iKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBfLnR5cGUmJl8uX19rPT09cC5fX2s/Xy5fX2Q9cz14KF8scyxuKTpzPVAobixfLHAsdyxiLHMpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHUudHlwZSYmKHUuX19kPXMpKTpzJiZwLl9fZT09cyYmcy5wYXJlbnROb2RlIT1uJiYocz1rKHApKX1mb3IodS5fX2U9bSxoPUE7aC0tOyludWxsIT13W2hdJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgdS50eXBlJiZudWxsIT13W2hdLl9fZSYmd1toXS5fX2U9PXUuX19kJiYodS5fX2Q9ayhpLGgrMSkpLE4od1toXSx3W2hdKSk7aWYoZylmb3IoaD0wO2g8Zy5sZW5ndGg7aCsrKU0oZ1toXSxnWysraF0sZ1srK2hdKX1mdW5jdGlvbiB4KG4sbCx1KXtmb3IodmFyIGksdD1uLl9fayxvPTA7dCYmbzx0Lmxlbmd0aDtvKyspKGk9dFtvXSkmJihpLl9fPW4sbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpLnR5cGU/eChpLGwsdSk6UCh1LGksaSx0LGkuX19lLGwpKTtyZXR1cm4gbH1mdW5jdGlvbiBBKG4sbCl7cmV0dXJuIGw9bHx8W10sbnVsbD09bnx8XCJib29sZWFuXCI9PXR5cGVvZiBufHwoQXJyYXkuaXNBcnJheShuKT9uLnNvbWUoZnVuY3Rpb24obil7QShuLGwpfSk6bC5wdXNoKG4pKSxsfWZ1bmN0aW9uIFAobixsLHUsaSx0LG8pe3ZhciByLGYsZTtpZih2b2lkIDAhPT1sLl9fZClyPWwuX19kLGwuX19kPXZvaWQgMDtlbHNlIGlmKG51bGw9PXV8fHQhPW98fG51bGw9PXQucGFyZW50Tm9kZSluOmlmKG51bGw9PW98fG8ucGFyZW50Tm9kZSE9PW4pbi5hcHBlbmRDaGlsZCh0KSxyPW51bGw7ZWxzZXtmb3IoZj1vLGU9MDsoZj1mLm5leHRTaWJsaW5nKSYmZTxpLmxlbmd0aDtlKz0yKWlmKGY9PXQpYnJlYWsgbjtuLmluc2VydEJlZm9yZSh0LG8pLHI9b31yZXR1cm4gdm9pZCAwIT09cj9yOnQubmV4dFNpYmxpbmd9ZnVuY3Rpb24gQyhuLGwsdSxpLHQpe3ZhciBvO2ZvcihvIGluIHUpXCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fG8gaW4gbHx8SChuLG8sbnVsbCx1W29dLGkpO2ZvcihvIGluIGwpdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgbFtvXXx8XCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fFwidmFsdWVcIj09PW98fFwiY2hlY2tlZFwiPT09b3x8dVtvXT09PWxbb118fEgobixvLGxbb10sdVtvXSxpKX1mdW5jdGlvbiAkKG4sbCx1KXtcIi1cIj09PWxbMF0/bi5zZXRQcm9wZXJ0eShsLHUpOm5bbF09bnVsbD09dT9cIlwiOlwibnVtYmVyXCIhPXR5cGVvZiB1fHxzLnRlc3QobCk/dTp1K1wicHhcIn1mdW5jdGlvbiBIKG4sbCx1LGksdCl7dmFyIG87bjppZihcInN0eWxlXCI9PT1sKWlmKFwic3RyaW5nXCI9PXR5cGVvZiB1KW4uc3R5bGUuY3NzVGV4dD11O2Vsc2V7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkmJihuLnN0eWxlLmNzc1RleHQ9aT1cIlwiKSxpKWZvcihsIGluIGkpdSYmbCBpbiB1fHwkKG4uc3R5bGUsbCxcIlwiKTtpZih1KWZvcihsIGluIHUpaSYmdVtsXT09PWlbbF18fCQobi5zdHlsZSxsLHVbbF0pfWVsc2UgaWYoXCJvXCI9PT1sWzBdJiZcIm5cIj09PWxbMV0pbz1sIT09KGw9bC5yZXBsYWNlKC9DYXB0dXJlJC8sXCJcIikpLGw9bC50b0xvd2VyQ2FzZSgpaW4gbj9sLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik6bC5zbGljZSgyKSxuLmx8fChuLmw9e30pLG4ubFtsK29dPXUsdT9pfHxuLmFkZEV2ZW50TGlzdGVuZXIobCxvP1Q6SSxvKTpuLnJlbW92ZUV2ZW50TGlzdGVuZXIobCxvP1Q6SSxvKTtlbHNlIGlmKFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwpe2lmKHQpbD1sLnJlcGxhY2UoL3hsaW5rKEh8OmgpLyxcImhcIikucmVwbGFjZSgvc05hbWUkLyxcInNcIik7ZWxzZSBpZihcImhyZWZcIiE9PWwmJlwibGlzdFwiIT09bCYmXCJmb3JtXCIhPT1sJiZcInRhYkluZGV4XCIhPT1sJiZcImRvd25sb2FkXCIhPT1sJiZsIGluIG4pdHJ5e25bbF09bnVsbD09dT9cIlwiOnU7YnJlYWsgbn1jYXRjaChuKXt9XCJmdW5jdGlvblwiPT10eXBlb2YgdXx8KG51bGwhPXUmJighMSE9PXV8fFwiYVwiPT09bFswXSYmXCJyXCI9PT1sWzFdKT9uLnNldEF0dHJpYnV0ZShsLHUpOm4ucmVtb3ZlQXR0cmlidXRlKGwpKX19ZnVuY3Rpb24gSShuKXt0aGlzLmxbbi50eXBlKyExXShsLmV2ZW50P2wuZXZlbnQobik6bil9ZnVuY3Rpb24gVChuKXt0aGlzLmxbbi50eXBlKyEwXShsLmV2ZW50P2wuZXZlbnQobik6bil9ZnVuY3Rpb24gaihuLHUsaSx0LG8scixmLGUsYyl7dmFyIHMsaCx2LHkscCxrLGIsbSxnLHgsQSxQPXUudHlwZTtpZih2b2lkIDAhPT11LmNvbnN0cnVjdG9yKXJldHVybiBudWxsO251bGwhPWkuX19oJiYoYz1pLl9faCxlPXUuX19lPWkuX19lLHUuX19oPW51bGwscj1bZV0pLChzPWwuX19iKSYmcyh1KTt0cnl7bjppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQKXtpZihtPXUucHJvcHMsZz0ocz1QLmNvbnRleHRUeXBlKSYmdFtzLl9fY10seD1zP2c/Zy5wcm9wcy52YWx1ZTpzLl9fOnQsaS5fX2M/Yj0oaD11Ll9fYz1pLl9fYykuX189aC5fX0U6KFwicHJvdG90eXBlXCJpbiBQJiZQLnByb3RvdHlwZS5yZW5kZXI/dS5fX2M9aD1uZXcgUChtLHgpOih1Ll9fYz1oPW5ldyBfKG0seCksaC5jb25zdHJ1Y3Rvcj1QLGgucmVuZGVyPU8pLGcmJmcuc3ViKGgpLGgucHJvcHM9bSxoLnN0YXRlfHwoaC5zdGF0ZT17fSksaC5jb250ZXh0PXgsaC5fX249dCx2PWguX19kPSEwLGguX19oPVtdKSxudWxsPT1oLl9fcyYmKGguX19zPWguc3RhdGUpLG51bGwhPVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoaC5fX3M9PWguc3RhdGUmJihoLl9fcz1hKHt9LGguX19zKSksYShoLl9fcyxQLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhtLGguX19zKSkpLHk9aC5wcm9wcyxwPWguc3RhdGUsdiludWxsPT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbnVsbCE9aC5jb21wb25lbnRXaWxsTW91bnQmJmguY29tcG9uZW50V2lsbE1vdW50KCksbnVsbCE9aC5jb21wb25lbnREaWRNb3VudCYmaC5fX2gucHVzaChoLmNvbXBvbmVudERpZE1vdW50KTtlbHNle2lmKG51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZtIT09eSYmbnVsbCE9aC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZoLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobSx4KSwhaC5fX2UmJm51bGwhPWguc2hvdWxkQ29tcG9uZW50VXBkYXRlJiYhMT09PWguc2hvdWxkQ29tcG9uZW50VXBkYXRlKG0saC5fX3MseCl8fHUuX192PT09aS5fX3Ype2gucHJvcHM9bSxoLnN0YXRlPWguX19zLHUuX192IT09aS5fX3YmJihoLl9fZD0hMSksaC5fX3Y9dSx1Ll9fZT1pLl9fZSx1Ll9faz1pLl9fayx1Ll9fay5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihuLl9fPXUpfSksaC5fX2gubGVuZ3RoJiZmLnB1c2goaCk7YnJlYWsgbn1udWxsIT1oLmNvbXBvbmVudFdpbGxVcGRhdGUmJmguY29tcG9uZW50V2lsbFVwZGF0ZShtLGguX19zLHgpLG51bGwhPWguY29tcG9uZW50RGlkVXBkYXRlJiZoLl9faC5wdXNoKGZ1bmN0aW9uKCl7aC5jb21wb25lbnREaWRVcGRhdGUoeSxwLGspfSl9aC5jb250ZXh0PXgsaC5wcm9wcz1tLGguc3RhdGU9aC5fX3MsKHM9bC5fX3IpJiZzKHUpLGguX19kPSExLGguX192PXUsaC5fX1A9bixzPWgucmVuZGVyKGgucHJvcHMsaC5zdGF0ZSxoLmNvbnRleHQpLGguc3RhdGU9aC5fX3MsbnVsbCE9aC5nZXRDaGlsZENvbnRleHQmJih0PWEoYSh7fSx0KSxoLmdldENoaWxkQ29udGV4dCgpKSksdnx8bnVsbD09aC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8KGs9aC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSh5LHApKSxBPW51bGwhPXMmJnMudHlwZT09PWQmJm51bGw9PXMua2V5P3MucHJvcHMuY2hpbGRyZW46cyx3KG4sQXJyYXkuaXNBcnJheShBKT9BOltBXSx1LGksdCxvLHIsZixlLGMpLGguYmFzZT11Ll9fZSx1Ll9faD1udWxsLGguX19oLmxlbmd0aCYmZi5wdXNoKGgpLGImJihoLl9fRT1oLl9fPW51bGwpLGguX19lPSExfWVsc2UgbnVsbD09ciYmdS5fX3Y9PT1pLl9fdj8odS5fX2s9aS5fX2ssdS5fX2U9aS5fX2UpOnUuX19lPUwoaS5fX2UsdSxpLHQsbyxyLGYsYyk7KHM9bC5kaWZmZWQpJiZzKHUpfWNhdGNoKG4pe3UuX192PW51bGwsKGN8fG51bGwhPXIpJiYodS5fX2U9ZSx1Ll9faD0hIWMscltyLmluZGV4T2YoZSldPW51bGwpLGwuX19lKG4sdSxpKX19ZnVuY3Rpb24geihuLHUpe2wuX19jJiZsLl9fYyh1LG4pLG4uc29tZShmdW5jdGlvbih1KXt0cnl7bj11Ll9faCx1Ll9faD1bXSxuLnNvbWUoZnVuY3Rpb24obil7bi5jYWxsKHUpfSl9Y2F0Y2gobil7bC5fX2Uobix1Ll9fdil9fSl9ZnVuY3Rpb24gTChsLHUsaSx0LG8scixmLGMpe3ZhciBzLGEsdix5PWkucHJvcHMscD11LnByb3BzLGQ9dS50eXBlLF89MDtpZihcInN2Z1wiPT09ZCYmKG89ITApLG51bGwhPXIpZm9yKDtfPHIubGVuZ3RoO18rKylpZigocz1yW19dKSYmXCJzZXRBdHRyaWJ1dGVcImluIHM9PSEhZCYmKGQ/cy5sb2NhbE5hbWU9PT1kOjM9PT1zLm5vZGVUeXBlKSl7bD1zLHJbX109bnVsbDticmVha31pZihudWxsPT1sKXtpZihudWxsPT09ZClyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocCk7bD1vP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsZCk6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkLHAuaXMmJnApLHI9bnVsbCxjPSExfWlmKG51bGw9PT1kKXk9PT1wfHxjJiZsLmRhdGE9PT1wfHwobC5kYXRhPXApO2Vsc2V7aWYocj1yJiZuLmNhbGwobC5jaGlsZE5vZGVzKSxhPSh5PWkucHJvcHN8fGUpLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLHY9cC5kYW5nZXJvdXNseVNldElubmVySFRNTCwhYyl7aWYobnVsbCE9cilmb3IoeT17fSxfPTA7XzxsLmF0dHJpYnV0ZXMubGVuZ3RoO18rKyl5W2wuYXR0cmlidXRlc1tfXS5uYW1lXT1sLmF0dHJpYnV0ZXNbX10udmFsdWU7KHZ8fGEpJiYodiYmKGEmJnYuX19odG1sPT1hLl9faHRtbHx8di5fX2h0bWw9PT1sLmlubmVySFRNTCl8fChsLmlubmVySFRNTD12JiZ2Ll9faHRtbHx8XCJcIikpfWlmKEMobCxwLHksbyxjKSx2KXUuX19rPVtdO2Vsc2UgaWYoXz11LnByb3BzLmNoaWxkcmVuLHcobCxBcnJheS5pc0FycmF5KF8pP186W19dLHUsaSx0LG8mJlwiZm9yZWlnbk9iamVjdFwiIT09ZCxyLGYscj9yWzBdOmkuX19rJiZrKGksMCksYyksbnVsbCE9cilmb3IoXz1yLmxlbmd0aDtfLS07KW51bGwhPXJbX10mJmgocltfXSk7Y3x8KFwidmFsdWVcImluIHAmJnZvaWQgMCE9PShfPXAudmFsdWUpJiYoXyE9PWwudmFsdWV8fFwicHJvZ3Jlc3NcIj09PWQmJiFffHxcIm9wdGlvblwiPT09ZCYmXyE9PXkudmFsdWUpJiZIKGwsXCJ2YWx1ZVwiLF8seS52YWx1ZSwhMSksXCJjaGVja2VkXCJpbiBwJiZ2b2lkIDAhPT0oXz1wLmNoZWNrZWQpJiZfIT09bC5jaGVja2VkJiZIKGwsXCJjaGVja2VkXCIsXyx5LmNoZWNrZWQsITEpKX1yZXR1cm4gbH1mdW5jdGlvbiBNKG4sdSxpKXt0cnl7XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uKHUpOm4uY3VycmVudD11fWNhdGNoKG4pe2wuX19lKG4saSl9fWZ1bmN0aW9uIE4obix1LGkpe3ZhciB0LG87aWYobC51bm1vdW50JiZsLnVubW91bnQobiksKHQ9bi5yZWYpJiYodC5jdXJyZW50JiZ0LmN1cnJlbnQhPT1uLl9fZXx8TSh0LG51bGwsdSkpLG51bGwhPSh0PW4uX19jKSl7aWYodC5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7dC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKG4pe2wuX19lKG4sdSl9dC5iYXNlPXQuX19QPW51bGx9aWYodD1uLl9faylmb3Iobz0wO288dC5sZW5ndGg7bysrKXRbb10mJk4odFtvXSx1LFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4udHlwZSk7aXx8bnVsbD09bi5fX2V8fGgobi5fX2UpLG4uX19lPW4uX19kPXZvaWQgMH1mdW5jdGlvbiBPKG4sbCx1KXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihuLHUpfWZ1bmN0aW9uIFModSxpLHQpe3ZhciBvLHIsZjtsLl9fJiZsLl9fKHUsaSkscj0obz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0KT9udWxsOnQmJnQuX19rfHxpLl9fayxmPVtdLGooaSx1PSghbyYmdHx8aSkuX19rPXYoZCxudWxsLFt1XSkscnx8ZSxlLHZvaWQgMCE9PWkub3duZXJTVkdFbGVtZW50LCFvJiZ0P1t0XTpyP251bGw6aS5maXJzdENoaWxkP24uY2FsbChpLmNoaWxkTm9kZXMpOm51bGwsZiwhbyYmdD90OnI/ci5fX2U6aS5maXJzdENoaWxkLG8pLHooZix1KX1mdW5jdGlvbiBxKG4sbCl7UyhuLGwscSl9ZnVuY3Rpb24gQihsLHUsaSl7dmFyIHQsbyxyLGY9YSh7fSxsLnByb3BzKTtmb3IociBpbiB1KVwia2V5XCI9PXI/dD11W3JdOlwicmVmXCI9PXI/bz11W3JdOmZbcl09dVtyXTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4yJiYoZi5jaGlsZHJlbj1hcmd1bWVudHMubGVuZ3RoPjM/bi5jYWxsKGFyZ3VtZW50cywyKTppKSx5KGwudHlwZSxmLHR8fGwua2V5LG98fGwucmVmLG51bGwpfWZ1bmN0aW9uIEQobixsKXt2YXIgdT17X19jOmw9XCJfX2NDXCIrZisrLF9fOm4sQ29uc3VtZXI6ZnVuY3Rpb24obixsKXtyZXR1cm4gbi5jaGlsZHJlbihsKX0sUHJvdmlkZXI6ZnVuY3Rpb24obil7dmFyIHUsaTtyZXR1cm4gdGhpcy5nZXRDaGlsZENvbnRleHR8fCh1PVtdLChpPXt9KVtsXT10aGlzLHRoaXMuZ2V0Q2hpbGRDb250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIGl9LHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMucHJvcHMudmFsdWUhPT1uLnZhbHVlJiZ1LnNvbWUobSl9LHRoaXMuc3ViPWZ1bmN0aW9uKG4pe3UucHVzaChuKTt2YXIgbD1uLmNvbXBvbmVudFdpbGxVbm1vdW50O24uY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXt1LnNwbGljZSh1LmluZGV4T2YobiksMSksbCYmbC5jYWxsKG4pfX0pLG4uY2hpbGRyZW59fTtyZXR1cm4gdS5Qcm92aWRlci5fXz11LkNvbnN1bWVyLmNvbnRleHRUeXBlPXV9bj1jLnNsaWNlLGw9e19fZTpmdW5jdGlvbihuLGwsdSxpKXtmb3IodmFyIHQsbyxyO2w9bC5fXzspaWYoKHQ9bC5fX2MpJiYhdC5fXyl0cnl7aWYoKG89dC5jb25zdHJ1Y3RvcikmJm51bGwhPW8uZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yJiYodC5zZXRTdGF0ZShvLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihuKSkscj10Ll9fZCksbnVsbCE9dC5jb21wb25lbnREaWRDYXRjaCYmKHQuY29tcG9uZW50RGlkQ2F0Y2gobixpfHx7fSkscj10Ll9fZCkscilyZXR1cm4gdC5fX0U9dH1jYXRjaChsKXtuPWx9dGhyb3cgbn19LHU9MCxpPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsIT1uJiZ2b2lkIDA9PT1uLmNvbnN0cnVjdG9yfSxfLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihuLGwpe3ZhciB1O3U9bnVsbCE9dGhpcy5fX3MmJnRoaXMuX19zIT09dGhpcy5zdGF0ZT90aGlzLl9fczp0aGlzLl9fcz1hKHt9LHRoaXMuc3RhdGUpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihuPW4oYSh7fSx1KSx0aGlzLnByb3BzKSksbiYmYSh1LG4pLG51bGwhPW4mJnRoaXMuX192JiYobCYmdGhpcy5fX2gucHVzaChsKSxtKHRoaXMpKX0sXy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5fX3YmJih0aGlzLl9fZT0hMCxuJiZ0aGlzLl9faC5wdXNoKG4pLG0odGhpcykpfSxfLnByb3RvdHlwZS5yZW5kZXI9ZCx0PVtdLG89XCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlLnByb3RvdHlwZS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpOnNldFRpbWVvdXQsZy5fX3I9MCxmPTA7ZXhwb3J0e1MgYXMgcmVuZGVyLHEgYXMgaHlkcmF0ZSx2IGFzIGNyZWF0ZUVsZW1lbnQsdiBhcyBoLGQgYXMgRnJhZ21lbnQscCBhcyBjcmVhdGVSZWYsaSBhcyBpc1ZhbGlkRWxlbWVudCxfIGFzIENvbXBvbmVudCxCIGFzIGNsb25lRWxlbWVudCxEIGFzIGNyZWF0ZUNvbnRleHQsQSBhcyB0b0NoaWxkQXJyYXksbCBhcyBvcHRpb25zfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZWFjdC5tb2R1bGUuanMubWFwXG4iLCJpbXBvcnR7b3B0aW9ucyBhcyBufWZyb21cInByZWFjdFwiO3ZhciB0LHUscixvPTAsaT1bXSxjPW4uX19iLGY9bi5fX3IsZT1uLmRpZmZlZCxhPW4uX19jLHY9bi51bm1vdW50O2Z1bmN0aW9uIGwodCxyKXtuLl9faCYmbi5fX2godSx0LG98fHIpLG89MDt2YXIgaT11Ll9fSHx8KHUuX19IPXtfXzpbXSxfX2g6W119KTtyZXR1cm4gdD49aS5fXy5sZW5ndGgmJmkuX18ucHVzaCh7fSksaS5fX1t0XX1mdW5jdGlvbiBtKG4pe3JldHVybiBvPTEscCh3LG4pfWZ1bmN0aW9uIHAobixyLG8pe3ZhciBpPWwodCsrLDIpO3JldHVybiBpLnQ9bixpLl9fY3x8KGkuX189W28/byhyKTp3KHZvaWQgMCxyKSxmdW5jdGlvbihuKXt2YXIgdD1pLnQoaS5fX1swXSxuKTtpLl9fWzBdIT09dCYmKGkuX189W3QsaS5fX1sxXV0saS5fX2Muc2V0U3RhdGUoe30pKX1dLGkuX19jPXUpLGkuX199ZnVuY3Rpb24geShyLG8pe3ZhciBpPWwodCsrLDMpOyFuLl9fcyYmayhpLl9fSCxvKSYmKGkuX189cixpLl9fSD1vLHUuX19ILl9faC5wdXNoKGkpKX1mdW5jdGlvbiBkKHIsbyl7dmFyIGk9bCh0KyssNCk7IW4uX19zJiZrKGkuX19ILG8pJiYoaS5fXz1yLGkuX19IPW8sdS5fX2gucHVzaChpKSl9ZnVuY3Rpb24gaChuKXtyZXR1cm4gbz01LF8oZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpufX0sW10pfWZ1bmN0aW9uIHMobix0LHUpe289NixkKGZ1bmN0aW9uKCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbj8obih0KCkpLGZ1bmN0aW9uKCl7cmV0dXJuIG4obnVsbCl9KTpuPyhuLmN1cnJlbnQ9dCgpLGZ1bmN0aW9uKCl7cmV0dXJuIG4uY3VycmVudD1udWxsfSk6dm9pZCAwfSxudWxsPT11P3U6dS5jb25jYXQobikpfWZ1bmN0aW9uIF8obix1KXt2YXIgcj1sKHQrKyw3KTtyZXR1cm4gayhyLl9fSCx1KSYmKHIuX189bigpLHIuX19IPXUsci5fX2g9biksci5fX31mdW5jdGlvbiBBKG4sdCl7cmV0dXJuIG89OCxfKGZ1bmN0aW9uKCl7cmV0dXJuIG59LHQpfWZ1bmN0aW9uIEYobil7dmFyIHI9dS5jb250ZXh0W24uX19jXSxvPWwodCsrLDkpO3JldHVybiBvLmM9bixyPyhudWxsPT1vLl9fJiYoby5fXz0hMCxyLnN1Yih1KSksci5wcm9wcy52YWx1ZSk6bi5fX31mdW5jdGlvbiBUKHQsdSl7bi51c2VEZWJ1Z1ZhbHVlJiZuLnVzZURlYnVnVmFsdWUodT91KHQpOnQpfWZ1bmN0aW9uIHEobil7dmFyIHI9bCh0KyssMTApLG89bSgpO3JldHVybiByLl9fPW4sdS5jb21wb25lbnREaWRDYXRjaHx8KHUuY29tcG9uZW50RGlkQ2F0Y2g9ZnVuY3Rpb24obil7ci5fXyYmci5fXyhuKSxvWzFdKG4pfSksW29bMF0sZnVuY3Rpb24oKXtvWzFdKHZvaWQgMCl9XX1mdW5jdGlvbiB4KCl7Zm9yKHZhciB0O3Q9aS5zaGlmdCgpOylpZih0Ll9fUCl0cnl7dC5fX0guX19oLmZvckVhY2goZyksdC5fX0guX19oLmZvckVhY2goaiksdC5fX0guX19oPVtdfWNhdGNoKHUpe3QuX19ILl9faD1bXSxuLl9fZSh1LHQuX192KX19bi5fX2I9ZnVuY3Rpb24obil7dT1udWxsLGMmJmMobil9LG4uX19yPWZ1bmN0aW9uKG4pe2YmJmYobiksdD0wO3ZhciByPSh1PW4uX19jKS5fX0g7ciYmKHIuX19oLmZvckVhY2goZyksci5fX2guZm9yRWFjaChqKSxyLl9faD1bXSl9LG4uZGlmZmVkPWZ1bmN0aW9uKHQpe2UmJmUodCk7dmFyIG89dC5fX2M7byYmby5fX0gmJm8uX19ILl9faC5sZW5ndGgmJigxIT09aS5wdXNoKG8pJiZyPT09bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fCgocj1uLnJlcXVlc3RBbmltYXRpb25GcmFtZSl8fGZ1bmN0aW9uKG4pe3ZhciB0LHU9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQociksYiYmY2FuY2VsQW5pbWF0aW9uRnJhbWUodCksc2V0VGltZW91dChuKX0scj1zZXRUaW1lb3V0KHUsMTAwKTtiJiYodD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodSkpfSkoeCkpLHU9bnVsbH0sbi5fX2M9ZnVuY3Rpb24odCx1KXt1LnNvbWUoZnVuY3Rpb24odCl7dHJ5e3QuX19oLmZvckVhY2goZyksdC5fX2g9dC5fX2guZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiFuLl9ffHxqKG4pfSl9Y2F0Y2gocil7dS5zb21lKGZ1bmN0aW9uKG4pe24uX19oJiYobi5fX2g9W10pfSksdT1bXSxuLl9fZShyLHQuX192KX19KSxhJiZhKHQsdSl9LG4udW5tb3VudD1mdW5jdGlvbih0KXt2JiZ2KHQpO3ZhciB1LHI9dC5fX2M7ciYmci5fX0gmJihyLl9fSC5fXy5mb3JFYWNoKGZ1bmN0aW9uKG4pe3RyeXtnKG4pfWNhdGNoKG4pe3U9bn19KSx1JiZuLl9fZSh1LHIuX192KSl9O3ZhciBiPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZTtmdW5jdGlvbiBnKG4pe3ZhciB0PXUscj1uLl9fYztcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiYobi5fX2M9dm9pZCAwLHIoKSksdT10fWZ1bmN0aW9uIGoobil7dmFyIHQ9dTtuLl9fYz1uLl9fKCksdT10fWZ1bmN0aW9uIGsobix0KXtyZXR1cm4hbnx8bi5sZW5ndGghPT10Lmxlbmd0aHx8dC5zb21lKGZ1bmN0aW9uKHQsdSl7cmV0dXJuIHQhPT1uW3VdfSl9ZnVuY3Rpb24gdyhuLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dChuKTp0fWV4cG9ydHttIGFzIHVzZVN0YXRlLHAgYXMgdXNlUmVkdWNlcix5IGFzIHVzZUVmZmVjdCxkIGFzIHVzZUxheW91dEVmZmVjdCxoIGFzIHVzZVJlZixzIGFzIHVzZUltcGVyYXRpdmVIYW5kbGUsXyBhcyB1c2VNZW1vLEEgYXMgdXNlQ2FsbGJhY2ssRiBhcyB1c2VDb250ZXh0LFQgYXMgdXNlRGVidWdWYWx1ZSxxIGFzIHVzZUVycm9yQm91bmRhcnl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9va3MubW9kdWxlLmpzLm1hcFxuIiwiXG5jb25zdCBjYW5Qcm9taXNlID0gcmVxdWlyZSgnLi9jYW4tcHJvbWlzZScpXG5cbmNvbnN0IFFSQ29kZSA9IHJlcXVpcmUoJy4vY29yZS9xcmNvZGUnKVxuY29uc3QgQ2FudmFzUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL2NhbnZhcycpXG5jb25zdCBTdmdSZW5kZXJlciA9IHJlcXVpcmUoJy4vcmVuZGVyZXIvc3ZnLXRhZy5qcycpXG5cbmZ1bmN0aW9uIHJlbmRlckNhbnZhcyAocmVuZGVyRnVuYywgY2FudmFzLCB0ZXh0LCBvcHRzLCBjYikge1xuICBjb25zdCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gIGNvbnN0IGFyZ3NOdW0gPSBhcmdzLmxlbmd0aFxuICBjb25zdCBpc0xhc3RBcmdDYiA9IHR5cGVvZiBhcmdzW2FyZ3NOdW0gLSAxXSA9PT0gJ2Z1bmN0aW9uJ1xuXG4gIGlmICghaXNMYXN0QXJnQ2IgJiYgIWNhblByb21pc2UoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgcmVxdWlyZWQgYXMgbGFzdCBhcmd1bWVudCcpXG4gIH1cblxuICBpZiAoaXNMYXN0QXJnQ2IpIHtcbiAgICBpZiAoYXJnc051bSA8IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVG9vIGZldyBhcmd1bWVudHMgcHJvdmlkZWQnKVxuICAgIH1cblxuICAgIGlmIChhcmdzTnVtID09PSAyKSB7XG4gICAgICBjYiA9IHRleHRcbiAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IG9wdHMgPSB1bmRlZmluZWRcbiAgICB9IGVsc2UgaWYgKGFyZ3NOdW0gPT09IDMpIHtcbiAgICAgIGlmIChjYW52YXMuZ2V0Q29udGV4dCAmJiB0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNiID0gb3B0c1xuICAgICAgICBvcHRzID0gdW5kZWZpbmVkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYiA9IG9wdHNcbiAgICAgICAgb3B0cyA9IHRleHRcbiAgICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGFyZ3NOdW0gPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBmZXcgYXJndW1lbnRzIHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoYXJnc051bSA9PT0gMSkge1xuICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgY2FudmFzID0gb3B0cyA9IHVuZGVmaW5lZFxuICAgIH0gZWxzZSBpZiAoYXJnc051bSA9PT0gMiAmJiAhY2FudmFzLmdldENvbnRleHQpIHtcbiAgICAgIG9wdHMgPSB0ZXh0XG4gICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IFFSQ29kZS5jcmVhdGUodGV4dCwgb3B0cylcbiAgICAgICAgcmVzb2x2ZShyZW5kZXJGdW5jKGRhdGEsIGNhbnZhcywgb3B0cykpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBRUkNvZGUuY3JlYXRlKHRleHQsIG9wdHMpXG4gICAgY2IobnVsbCwgcmVuZGVyRnVuYyhkYXRhLCBjYW52YXMsIG9wdHMpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2IoZSlcbiAgfVxufVxuXG5leHBvcnRzLmNyZWF0ZSA9IFFSQ29kZS5jcmVhdGVcbmV4cG9ydHMudG9DYW52YXMgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBDYW52YXNSZW5kZXJlci5yZW5kZXIpXG5leHBvcnRzLnRvRGF0YVVSTCA9IHJlbmRlckNhbnZhcy5iaW5kKG51bGwsIENhbnZhc1JlbmRlcmVyLnJlbmRlclRvRGF0YVVSTClcblxuLy8gb25seSBzdmcgZm9yIG5vdy5cbmV4cG9ydHMudG9TdHJpbmcgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBmdW5jdGlvbiAoZGF0YSwgXywgb3B0cykge1xuICByZXR1cm4gU3ZnUmVuZGVyZXIucmVuZGVyKGRhdGEsIG9wdHMpXG59KVxuIiwiLy8gY2FuLXByb21pc2UgaGFzIGEgY3Jhc2ggaW4gc29tZSB2ZXJzaW9ucyBvZiByZWFjdCBuYXRpdmUgdGhhdCBkb250IGhhdmVcbi8vIHN0YW5kYXJkIGdsb2JhbCBvYmplY3RzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc29sZGFpci9ub2RlLXFyY29kZS9pc3N1ZXMvMTU3XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbicgJiYgUHJvbWlzZS5wcm90b3R5cGUgJiYgUHJvbWlzZS5wcm90b3R5cGUudGhlblxufVxuIiwiLyoqXG4gKiBBbGlnbm1lbnQgcGF0dGVybiBhcmUgZml4ZWQgcmVmZXJlbmNlIHBhdHRlcm4gaW4gZGVmaW5lZCBwb3NpdGlvbnNcbiAqIGluIGEgbWF0cml4IHN5bWJvbG9neSwgd2hpY2ggZW5hYmxlcyB0aGUgZGVjb2RlIHNvZnR3YXJlIHRvIHJlLXN5bmNocm9uaXNlXG4gKiB0aGUgY29vcmRpbmF0ZSBtYXBwaW5nIG9mIHRoZSBpbWFnZSBtb2R1bGVzIGluIHRoZSBldmVudCBvZiBtb2RlcmF0ZSBhbW91bnRzXG4gKiBvZiBkaXN0b3J0aW9uIG9mIHRoZSBpbWFnZS5cbiAqXG4gKiBBbGlnbm1lbnQgcGF0dGVybnMgYXJlIHByZXNlbnQgb25seSBpbiBRUiBDb2RlIHN5bWJvbHMgb2YgdmVyc2lvbiAyIG9yIGxhcmdlclxuICogYW5kIHRoZWlyIG51bWJlciBkZXBlbmRzIG9uIHRoZSBzeW1ib2wgdmVyc2lvbi5cbiAqL1xuXG5jb25zdCBnZXRTeW1ib2xTaXplID0gcmVxdWlyZSgnLi91dGlscycpLmdldFN5bWJvbFNpemVcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHJvdy9jb2x1bW4gY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBtb2R1bGUgb2YgZWFjaCBhbGlnbm1lbnQgcGF0dGVyblxuICogZm9yIHRoZSBzcGVjaWZpZWQgUVIgQ29kZSB2ZXJzaW9uLlxuICpcbiAqIFRoZSBhbGlnbm1lbnQgcGF0dGVybnMgYXJlIHBvc2l0aW9uZWQgc3ltbWV0cmljYWxseSBvbiBlaXRoZXIgc2lkZSBvZiB0aGUgZGlhZ29uYWxcbiAqIHJ1bm5pbmcgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBzeW1ib2wgdG8gdGhlIGJvdHRvbSByaWdodCBjb3JuZXIuXG4gKlxuICogU2luY2UgcG9zaXRpb25zIGFyZSBzaW1tZXRyaWNhbCBvbmx5IGhhbGYgb2YgdGhlIGNvb3JkaW5hdGVzIGFyZSByZXR1cm5lZC5cbiAqIEVhY2ggaXRlbSBvZiB0aGUgYXJyYXkgd2lsbCByZXByZXNlbnQgaW4gdHVybiB0aGUgeCBhbmQgeSBjb29yZGluYXRlLlxuICogQHNlZSB7QGxpbmsgZ2V0UG9zaXRpb25zfVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlXG4gKi9cbmV4cG9ydHMuZ2V0Um93Q29sQ29vcmRzID0gZnVuY3Rpb24gZ2V0Um93Q29sQ29vcmRzICh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxKSByZXR1cm4gW11cblxuICBjb25zdCBwb3NDb3VudCA9IE1hdGguZmxvb3IodmVyc2lvbiAvIDcpICsgMlxuICBjb25zdCBzaXplID0gZ2V0U3ltYm9sU2l6ZSh2ZXJzaW9uKVxuICBjb25zdCBpbnRlcnZhbHMgPSBzaXplID09PSAxNDUgPyAyNiA6IE1hdGguY2VpbCgoc2l6ZSAtIDEzKSAvICgyICogcG9zQ291bnQgLSAyKSkgKiAyXG4gIGNvbnN0IHBvc2l0aW9ucyA9IFtzaXplIC0gN10gLy8gTGFzdCBjb29yZCBpcyBhbHdheXMgKHNpemUgLSA3KVxuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcG9zQ291bnQgLSAxOyBpKyspIHtcbiAgICBwb3NpdGlvbnNbaV0gPSBwb3NpdGlvbnNbaSAtIDFdIC0gaW50ZXJ2YWxzXG4gIH1cblxuICBwb3NpdGlvbnMucHVzaCg2KSAvLyBGaXJzdCBjb29yZCBpcyBhbHdheXMgNlxuXG4gIHJldHVybiBwb3NpdGlvbnMucmV2ZXJzZSgpXG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBwb3NpdGlvbnMgb2YgZWFjaCBhbGlnbm1lbnQgcGF0dGVybi5cbiAqIEVhY2ggYXJyYXkncyBlbGVtZW50IHJlcHJlc2VudCB0aGUgY2VudGVyIHBvaW50IG9mIHRoZSBwYXR0ZXJuIGFzICh4LCB5KSBjb29yZGluYXRlc1xuICpcbiAqIENvb3JkaW5hdGVzIGFyZSBjYWxjdWxhdGVkIGV4cGFuZGluZyB0aGUgcm93L2NvbHVtbiBjb29yZGluYXRlcyByZXR1cm5lZCBieSB7QGxpbmsgZ2V0Um93Q29sQ29vcmRzfVxuICogYW5kIGZpbHRlcmluZyBvdXQgdGhlIGl0ZW1zIHRoYXQgb3ZlcmxhcHMgd2l0aCBmaW5kZXIgcGF0dGVyblxuICpcbiAqIEBleGFtcGxlXG4gKiBGb3IgYSBWZXJzaW9uIDcgc3ltYm9sIHtAbGluayBnZXRSb3dDb2xDb29yZHN9IHJldHVybnMgdmFsdWVzIDYsIDIyIGFuZCAzOC5cbiAqIFRoZSBhbGlnbm1lbnQgcGF0dGVybnMsIHRoZXJlZm9yZSwgYXJlIHRvIGJlIGNlbnRlcmVkIG9uIChyb3csIGNvbHVtbilcbiAqIHBvc2l0aW9ucyAoNiwyMiksICgyMiw2KSwgKDIyLDIyKSwgKDIyLDM4KSwgKDM4LDIyKSwgKDM4LDM4KS5cbiAqIE5vdGUgdGhhdCB0aGUgY29vcmRpbmF0ZXMgKDYsNiksICg2LDM4KSwgKDM4LDYpIGFyZSBvY2N1cGllZCBieSBmaW5kZXIgcGF0dGVybnNcbiAqIGFuZCBhcmUgbm90IHRoZXJlZm9yZSB1c2VkIGZvciBhbGlnbm1lbnQgcGF0dGVybnMuXG4gKlxuICogbGV0IHBvcyA9IGdldFBvc2l0aW9ucyg3KVxuICogLy8gW1s2LDIyXSwgWzIyLDZdLCBbMjIsMjJdLCBbMjIsMzhdLCBbMzgsMjJdLCBbMzgsMzhdXVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlc1xuICovXG5leHBvcnRzLmdldFBvc2l0aW9ucyA9IGZ1bmN0aW9uIGdldFBvc2l0aW9ucyAodmVyc2lvbikge1xuICBjb25zdCBjb29yZHMgPSBbXVxuICBjb25zdCBwb3MgPSBleHBvcnRzLmdldFJvd0NvbENvb3Jkcyh2ZXJzaW9uKVxuICBjb25zdCBwb3NMZW5ndGggPSBwb3MubGVuZ3RoXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NMZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9zTGVuZ3RoOyBqKyspIHtcbiAgICAgIC8vIFNraXAgaWYgcG9zaXRpb24gaXMgb2NjdXBpZWQgYnkgZmluZGVyIHBhdHRlcm5zXG4gICAgICBpZiAoKGkgPT09IDAgJiYgaiA9PT0gMCkgfHwgLy8gdG9wLWxlZnRcbiAgICAgICAgICAoaSA9PT0gMCAmJiBqID09PSBwb3NMZW5ndGggLSAxKSB8fCAvLyBib3R0b20tbGVmdFxuICAgICAgICAgIChpID09PSBwb3NMZW5ndGggLSAxICYmIGogPT09IDApKSB7IC8vIHRvcC1yaWdodFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb29yZHMucHVzaChbcG9zW2ldLCBwb3Nbal1dKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb29yZHNcbn1cbiIsImNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG4vKipcbiAqIEFycmF5IG9mIGNoYXJhY3RlcnMgYXZhaWxhYmxlIGluIGFscGhhbnVtZXJpYyBtb2RlXG4gKlxuICogQXMgcGVyIFFSIENvZGUgc3BlY2lmaWNhdGlvbiwgdG8gZWFjaCBjaGFyYWN0ZXJcbiAqIGlzIGFzc2lnbmVkIGEgdmFsdWUgZnJvbSAwIHRvIDQ0IHdoaWNoIGluIHRoaXMgY2FzZSBjb2luY2lkZXNcbiAqIHdpdGggdGhlIGFycmF5IGluZGV4XG4gKlxuICogQHR5cGUge0FycmF5fVxuICovXG5jb25zdCBBTFBIQV9OVU1fQ0hBUlMgPSBbXG4gICcwJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JyxcbiAgJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLFxuICAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWicsXG4gICcgJywgJyQnLCAnJScsICcqJywgJysnLCAnLScsICcuJywgJy8nLCAnOidcbl1cblxuZnVuY3Rpb24gQWxwaGFudW1lcmljRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLkFMUEhBTlVNRVJJQ1xuICB0aGlzLmRhdGEgPSBkYXRhXG59XG5cbkFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gMTEgKiBNYXRoLmZsb29yKGxlbmd0aCAvIDIpICsgNiAqIChsZW5ndGggJSAyKVxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBBbHBoYW51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgodGhpcy5kYXRhLmxlbmd0aClcbn1cblxuQWxwaGFudW1lcmljRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoYml0QnVmZmVyKSB7XG4gIGxldCBpXG5cbiAgLy8gSW5wdXQgZGF0YSBjaGFyYWN0ZXJzIGFyZSBkaXZpZGVkIGludG8gZ3JvdXBzIG9mIHR3byBjaGFyYWN0ZXJzXG4gIC8vIGFuZCBlbmNvZGVkIGFzIDExLWJpdCBiaW5hcnkgY29kZXMuXG4gIGZvciAoaSA9IDA7IGkgKyAyIDw9IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gMikge1xuICAgIC8vIFRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBpcyBtdWx0aXBsaWVkIGJ5IDQ1XG4gICAgbGV0IHZhbHVlID0gQUxQSEFfTlVNX0NIQVJTLmluZGV4T2YodGhpcy5kYXRhW2ldKSAqIDQ1XG5cbiAgICAvLyBUaGUgY2hhcmFjdGVyIHZhbHVlIG9mIHRoZSBzZWNvbmQgZGlnaXQgaXMgYWRkZWQgdG8gdGhlIHByb2R1Y3RcbiAgICB2YWx1ZSArPSBBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaSArIDFdKVxuXG4gICAgLy8gVGhlIHN1bSBpcyB0aGVuIHN0b3JlZCBhcyAxMS1iaXQgYmluYXJ5IG51bWJlclxuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIDExKVxuICB9XG5cbiAgLy8gSWYgdGhlIG51bWJlciBvZiBpbnB1dCBkYXRhIGNoYXJhY3RlcnMgaXMgbm90IGEgbXVsdGlwbGUgb2YgdHdvLFxuICAvLyB0aGUgY2hhcmFjdGVyIHZhbHVlIG9mIHRoZSBmaW5hbCBjaGFyYWN0ZXIgaXMgZW5jb2RlZCBhcyBhIDYtYml0IGJpbmFyeSBudW1iZXIuXG4gIGlmICh0aGlzLmRhdGEubGVuZ3RoICUgMikge1xuICAgIGJpdEJ1ZmZlci5wdXQoQUxQSEFfTlVNX0NIQVJTLmluZGV4T2YodGhpcy5kYXRhW2ldKSwgNilcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFscGhhbnVtZXJpY0RhdGFcbiIsImZ1bmN0aW9uIEJpdEJ1ZmZlciAoKSB7XG4gIHRoaXMuYnVmZmVyID0gW11cbiAgdGhpcy5sZW5ndGggPSAwXG59XG5cbkJpdEJ1ZmZlci5wcm90b3R5cGUgPSB7XG5cbiAgZ2V0OiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICBjb25zdCBidWZJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyA4KVxuICAgIHJldHVybiAoKHRoaXMuYnVmZmVyW2J1ZkluZGV4XSA+Pj4gKDcgLSBpbmRleCAlIDgpKSAmIDEpID09PSAxXG4gIH0sXG5cbiAgcHV0OiBmdW5jdGlvbiAobnVtLCBsZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnB1dEJpdCgoKG51bSA+Pj4gKGxlbmd0aCAtIGkgLSAxKSkgJiAxKSA9PT0gMSlcbiAgICB9XG4gIH0sXG5cbiAgZ2V0TGVuZ3RoSW5CaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoXG4gIH0sXG5cbiAgcHV0Qml0OiBmdW5jdGlvbiAoYml0KSB7XG4gICAgY29uc3QgYnVmSW5kZXggPSBNYXRoLmZsb29yKHRoaXMubGVuZ3RoIC8gOClcbiAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoIDw9IGJ1ZkluZGV4KSB7XG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKDApXG4gICAgfVxuXG4gICAgaWYgKGJpdCkge1xuICAgICAgdGhpcy5idWZmZXJbYnVmSW5kZXhdIHw9ICgweDgwID4+PiAodGhpcy5sZW5ndGggJSA4KSlcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCsrXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCaXRCdWZmZXJcbiIsIi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGhhbmRsZSBRUiBDb2RlIHN5bWJvbCBtb2R1bGVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgU3ltYm9sIHNpemVcbiAqL1xuZnVuY3Rpb24gQml0TWF0cml4IChzaXplKSB7XG4gIGlmICghc2l6ZSB8fCBzaXplIDwgMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQml0TWF0cml4IHNpemUgbXVzdCBiZSBkZWZpbmVkIGFuZCBncmVhdGVyIHRoYW4gMCcpXG4gIH1cblxuICB0aGlzLnNpemUgPSBzaXplXG4gIHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KHNpemUgKiBzaXplKVxuICB0aGlzLnJlc2VydmVkQml0ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSAqIHNpemUpXG59XG5cbi8qKlxuICogU2V0IGJpdCB2YWx1ZSBhdCBzcGVjaWZpZWQgbG9jYXRpb25cbiAqIElmIHJlc2VydmVkIGZsYWcgaXMgc2V0LCB0aGlzIGJpdCB3aWxsIGJlIGlnbm9yZWQgZHVyaW5nIG1hc2tpbmcgcHJvY2Vzc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0ge051bWJlcn0gIGNvbFxuICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZVxuICogQHBhcmFtIHtCb29sZWFufSByZXNlcnZlZFxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChyb3csIGNvbCwgdmFsdWUsIHJlc2VydmVkKSB7XG4gIGNvbnN0IGluZGV4ID0gcm93ICogdGhpcy5zaXplICsgY29sXG4gIHRoaXMuZGF0YVtpbmRleF0gPSB2YWx1ZVxuICBpZiAocmVzZXJ2ZWQpIHRoaXMucmVzZXJ2ZWRCaXRbaW5kZXhdID0gdHJ1ZVxufVxuXG4vKipcbiAqIFJldHVybnMgYml0IHZhbHVlIGF0IHNwZWNpZmllZCBsb2NhdGlvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIHJvd1xuICogQHBhcmFtICB7TnVtYmVyfSAgY29sXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICByZXR1cm4gdGhpcy5kYXRhW3JvdyAqIHRoaXMuc2l6ZSArIGNvbF1cbn1cblxuLyoqXG4gKiBBcHBsaWVzIHhvciBvcGVyYXRvciBhdCBzcGVjaWZpZWQgbG9jYXRpb25cbiAqICh1c2VkIGR1cmluZyBtYXNraW5nIHByb2Nlc3MpXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9ICByb3dcbiAqIEBwYXJhbSB7TnVtYmVyfSAgY29sXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24gKHJvdywgY29sLCB2YWx1ZSkge1xuICB0aGlzLmRhdGFbcm93ICogdGhpcy5zaXplICsgY29sXSBePSB2YWx1ZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGJpdCBhdCBzcGVjaWZpZWQgbG9jYXRpb24gaXMgcmVzZXJ2ZWRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gICByb3dcbiAqIEBwYXJhbSB7TnVtYmVyfSAgIGNvbFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS5pc1Jlc2VydmVkID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gIHJldHVybiB0aGlzLnJlc2VydmVkQml0W3JvdyAqIHRoaXMuc2l6ZSArIGNvbF1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCaXRNYXRyaXhcbiIsImNvbnN0IGVuY29kZVV0ZjggPSByZXF1aXJlKCdlbmNvZGUtdXRmOCcpXG5jb25zdCBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcblxuZnVuY3Rpb24gQnl0ZURhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5CWVRFXG4gIHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KGVuY29kZVV0ZjgoZGF0YSkpXG59XG5cbkJ5dGVEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIGxlbmd0aCAqIDhcbn1cblxuQnl0ZURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBCeXRlRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChiaXRCdWZmZXIpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYml0QnVmZmVyLnB1dCh0aGlzLmRhdGFbaV0sIDgpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCeXRlRGF0YVxuIiwiY29uc3QgRUNMZXZlbCA9IHJlcXVpcmUoJy4vZXJyb3ItY29ycmVjdGlvbi1sZXZlbCcpXHJcblxyXG5jb25zdCBFQ19CTE9DS1NfVEFCTEUgPSBbXHJcbi8vIEwgIE0gIFEgIEhcclxuICAxLCAxLCAxLCAxLFxyXG4gIDEsIDEsIDEsIDEsXHJcbiAgMSwgMSwgMiwgMixcclxuICAxLCAyLCAyLCA0LFxyXG4gIDEsIDIsIDQsIDQsXHJcbiAgMiwgNCwgNCwgNCxcclxuICAyLCA0LCA2LCA1LFxyXG4gIDIsIDQsIDYsIDYsXHJcbiAgMiwgNSwgOCwgOCxcclxuICA0LCA1LCA4LCA4LFxyXG4gIDQsIDUsIDgsIDExLFxyXG4gIDQsIDgsIDEwLCAxMSxcclxuICA0LCA5LCAxMiwgMTYsXHJcbiAgNCwgOSwgMTYsIDE2LFxyXG4gIDYsIDEwLCAxMiwgMTgsXHJcbiAgNiwgMTAsIDE3LCAxNixcclxuICA2LCAxMSwgMTYsIDE5LFxyXG4gIDYsIDEzLCAxOCwgMjEsXHJcbiAgNywgMTQsIDIxLCAyNSxcclxuICA4LCAxNiwgMjAsIDI1LFxyXG4gIDgsIDE3LCAyMywgMjUsXHJcbiAgOSwgMTcsIDIzLCAzNCxcclxuICA5LCAxOCwgMjUsIDMwLFxyXG4gIDEwLCAyMCwgMjcsIDMyLFxyXG4gIDEyLCAyMSwgMjksIDM1LFxyXG4gIDEyLCAyMywgMzQsIDM3LFxyXG4gIDEyLCAyNSwgMzQsIDQwLFxyXG4gIDEzLCAyNiwgMzUsIDQyLFxyXG4gIDE0LCAyOCwgMzgsIDQ1LFxyXG4gIDE1LCAyOSwgNDAsIDQ4LFxyXG4gIDE2LCAzMSwgNDMsIDUxLFxyXG4gIDE3LCAzMywgNDUsIDU0LFxyXG4gIDE4LCAzNSwgNDgsIDU3LFxyXG4gIDE5LCAzNywgNTEsIDYwLFxyXG4gIDE5LCAzOCwgNTMsIDYzLFxyXG4gIDIwLCA0MCwgNTYsIDY2LFxyXG4gIDIxLCA0MywgNTksIDcwLFxyXG4gIDIyLCA0NSwgNjIsIDc0LFxyXG4gIDI0LCA0NywgNjUsIDc3LFxyXG4gIDI1LCA0OSwgNjgsIDgxXHJcbl1cclxuXHJcbmNvbnN0IEVDX0NPREVXT1JEU19UQUJMRSA9IFtcclxuLy8gTCAgTSAgUSAgSFxyXG4gIDcsIDEwLCAxMywgMTcsXHJcbiAgMTAsIDE2LCAyMiwgMjgsXHJcbiAgMTUsIDI2LCAzNiwgNDQsXHJcbiAgMjAsIDM2LCA1MiwgNjQsXHJcbiAgMjYsIDQ4LCA3MiwgODgsXHJcbiAgMzYsIDY0LCA5NiwgMTEyLFxyXG4gIDQwLCA3MiwgMTA4LCAxMzAsXHJcbiAgNDgsIDg4LCAxMzIsIDE1NixcclxuICA2MCwgMTEwLCAxNjAsIDE5MixcclxuICA3MiwgMTMwLCAxOTIsIDIyNCxcclxuICA4MCwgMTUwLCAyMjQsIDI2NCxcclxuICA5NiwgMTc2LCAyNjAsIDMwOCxcclxuICAxMDQsIDE5OCwgMjg4LCAzNTIsXHJcbiAgMTIwLCAyMTYsIDMyMCwgMzg0LFxyXG4gIDEzMiwgMjQwLCAzNjAsIDQzMixcclxuICAxNDQsIDI4MCwgNDA4LCA0ODAsXHJcbiAgMTY4LCAzMDgsIDQ0OCwgNTMyLFxyXG4gIDE4MCwgMzM4LCA1MDQsIDU4OCxcclxuICAxOTYsIDM2NCwgNTQ2LCA2NTAsXHJcbiAgMjI0LCA0MTYsIDYwMCwgNzAwLFxyXG4gIDIyNCwgNDQyLCA2NDQsIDc1MCxcclxuICAyNTIsIDQ3NiwgNjkwLCA4MTYsXHJcbiAgMjcwLCA1MDQsIDc1MCwgOTAwLFxyXG4gIDMwMCwgNTYwLCA4MTAsIDk2MCxcclxuICAzMTIsIDU4OCwgODcwLCAxMDUwLFxyXG4gIDMzNiwgNjQ0LCA5NTIsIDExMTAsXHJcbiAgMzYwLCA3MDAsIDEwMjAsIDEyMDAsXHJcbiAgMzkwLCA3MjgsIDEwNTAsIDEyNjAsXHJcbiAgNDIwLCA3ODQsIDExNDAsIDEzNTAsXHJcbiAgNDUwLCA4MTIsIDEyMDAsIDE0NDAsXHJcbiAgNDgwLCA4NjgsIDEyOTAsIDE1MzAsXHJcbiAgNTEwLCA5MjQsIDEzNTAsIDE2MjAsXHJcbiAgNTQwLCA5ODAsIDE0NDAsIDE3MTAsXHJcbiAgNTcwLCAxMDM2LCAxNTMwLCAxODAwLFxyXG4gIDU3MCwgMTA2NCwgMTU5MCwgMTg5MCxcclxuICA2MDAsIDExMjAsIDE2ODAsIDE5ODAsXHJcbiAgNjMwLCAxMjA0LCAxNzcwLCAyMTAwLFxyXG4gIDY2MCwgMTI2MCwgMTg2MCwgMjIyMCxcclxuICA3MjAsIDEzMTYsIDE5NTAsIDIzMTAsXHJcbiAgNzUwLCAxMzcyLCAyMDQwLCAyNDMwXHJcbl1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBibG9jayB0aGF0IHRoZSBRUiBDb2RlIHNob3VsZCBjb250YWluXHJcbiAqIGZvciB0aGUgc3BlY2lmaWVkIHZlcnNpb24gYW5kIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwuXHJcbiAqXHJcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXHJcbiAqIEBwYXJhbSAge051bWJlcn0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIE51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGJsb2Nrc1xyXG4gKi9cclxuZXhwb3J0cy5nZXRCbG9ja3NDb3VudCA9IGZ1bmN0aW9uIGdldEJsb2Nrc0NvdW50ICh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xyXG4gIHN3aXRjaCAoZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcclxuICAgIGNhc2UgRUNMZXZlbC5MOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMF1cclxuICAgIGNhc2UgRUNMZXZlbC5NOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMV1cclxuICAgIGNhc2UgRUNMZXZlbC5ROlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMl1cclxuICAgIGNhc2UgRUNMZXZlbC5IOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgM11cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWRcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHMgdG8gdXNlIGZvciB0aGUgc3BlY2lmaWVkXHJcbiAqIHZlcnNpb24gYW5kIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwuXHJcbiAqXHJcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXHJcbiAqIEBwYXJhbSAge051bWJlcn0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIE51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3Jkc1xyXG4gKi9cclxuZXhwb3J0cy5nZXRUb3RhbENvZGV3b3Jkc0NvdW50ID0gZnVuY3Rpb24gZ2V0VG90YWxDb2Rld29yZHNDb3VudCAodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcclxuICBzd2l0Y2ggKGVycm9yQ29ycmVjdGlvbkxldmVsKSB7XHJcbiAgICBjYXNlIEVDTGV2ZWwuTDpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDBdXHJcbiAgICBjYXNlIEVDTGV2ZWwuTTpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDFdXHJcbiAgICBjYXNlIEVDTGV2ZWwuUTpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDJdXHJcbiAgICBjYXNlIEVDTGV2ZWwuSDpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDNdXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydHMuTCA9IHsgYml0OiAxIH1cbmV4cG9ydHMuTSA9IHsgYml0OiAwIH1cbmV4cG9ydHMuUSA9IHsgYml0OiAzIH1cbmV4cG9ydHMuSCA9IHsgYml0OiAyIH1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyYW0gaXMgbm90IGEgc3RyaW5nJylcbiAgfVxuXG4gIGNvbnN0IGxjU3RyID0gc3RyaW5nLnRvTG93ZXJDYXNlKClcblxuICBzd2l0Y2ggKGxjU3RyKSB7XG4gICAgY2FzZSAnbCc6XG4gICAgY2FzZSAnbG93JzpcbiAgICAgIHJldHVybiBleHBvcnRzLkxcblxuICAgIGNhc2UgJ20nOlxuICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5NXG5cbiAgICBjYXNlICdxJzpcbiAgICBjYXNlICdxdWFydGlsZSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5RXG5cbiAgICBjYXNlICdoJzpcbiAgICBjYXNlICdoaWdoJzpcbiAgICAgIHJldHVybiBleHBvcnRzLkhcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gRUMgTGV2ZWw6ICcgKyBzdHJpbmcpXG4gIH1cbn1cblxuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAobGV2ZWwpIHtcbiAgcmV0dXJuIGxldmVsICYmIHR5cGVvZiBsZXZlbC5iaXQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgbGV2ZWwuYml0ID49IDAgJiYgbGV2ZWwuYml0IDwgNFxufVxuXG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChleHBvcnRzLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICB9XG59XG4iLCJjb25zdCBnZXRTeW1ib2xTaXplID0gcmVxdWlyZSgnLi91dGlscycpLmdldFN5bWJvbFNpemVcbmNvbnN0IEZJTkRFUl9QQVRURVJOX1NJWkUgPSA3XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBwb3NpdGlvbnMgb2YgZWFjaCBmaW5kZXIgcGF0dGVybi5cbiAqIEVhY2ggYXJyYXkncyBlbGVtZW50IHJlcHJlc2VudCB0aGUgdG9wLWxlZnQgcG9pbnQgb2YgdGhlIHBhdHRlcm4gYXMgKHgsIHkpIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIGNvb3JkaW5hdGVzXG4gKi9cbmV4cG9ydHMuZ2V0UG9zaXRpb25zID0gZnVuY3Rpb24gZ2V0UG9zaXRpb25zICh2ZXJzaW9uKSB7XG4gIGNvbnN0IHNpemUgPSBnZXRTeW1ib2xTaXplKHZlcnNpb24pXG5cbiAgcmV0dXJuIFtcbiAgICAvLyB0b3AtbGVmdFxuICAgIFswLCAwXSxcbiAgICAvLyB0b3AtcmlnaHRcbiAgICBbc2l6ZSAtIEZJTkRFUl9QQVRURVJOX1NJWkUsIDBdLFxuICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgWzAsIHNpemUgLSBGSU5ERVJfUEFUVEVSTl9TSVpFXVxuICBdXG59XG4iLCJjb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5jb25zdCBHMTUgPSAoMSA8PCAxMCkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgNCkgfCAoMSA8PCAyKSB8ICgxIDw8IDEpIHwgKDEgPDwgMClcbmNvbnN0IEcxNV9NQVNLID0gKDEgPDwgMTQpIHwgKDEgPDwgMTIpIHwgKDEgPDwgMTApIHwgKDEgPDwgNCkgfCAoMSA8PCAxKVxuY29uc3QgRzE1X0JDSCA9IFV0aWxzLmdldEJDSERpZ2l0KEcxNSlcblxuLyoqXG4gKiBSZXR1cm5zIGZvcm1hdCBpbmZvcm1hdGlvbiB3aXRoIHJlbGF0aXZlIGVycm9yIGNvcnJlY3Rpb24gYml0c1xuICpcbiAqIFRoZSBmb3JtYXQgaW5mb3JtYXRpb24gaXMgYSAxNS1iaXQgc2VxdWVuY2UgY29udGFpbmluZyA1IGRhdGEgYml0cyxcbiAqIHdpdGggMTAgZXJyb3IgY29ycmVjdGlvbiBiaXRzIGNhbGN1bGF0ZWQgdXNpbmcgdGhlICgxNSwgNSkgQkNIIGNvZGUuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG1hc2sgICAgICAgICAgICAgICAgIE1hc2sgcGF0dGVyblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICBFbmNvZGVkIGZvcm1hdCBpbmZvcm1hdGlvbiBiaXRzXG4gKi9cbmV4cG9ydHMuZ2V0RW5jb2RlZEJpdHMgPSBmdW5jdGlvbiBnZXRFbmNvZGVkQml0cyAoZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2spIHtcbiAgY29uc3QgZGF0YSA9ICgoZXJyb3JDb3JyZWN0aW9uTGV2ZWwuYml0IDw8IDMpIHwgbWFzaylcbiAgbGV0IGQgPSBkYXRhIDw8IDEwXG5cbiAgd2hpbGUgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE1X0JDSCA+PSAwKSB7XG4gICAgZCBePSAoRzE1IDw8IChVdGlscy5nZXRCQ0hEaWdpdChkKSAtIEcxNV9CQ0gpKVxuICB9XG5cbiAgLy8geG9yIGZpbmFsIGRhdGEgd2l0aCBtYXNrIHBhdHRlcm4gaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXRcbiAgLy8gbm8gY29tYmluYXRpb24gb2YgRXJyb3IgQ29ycmVjdGlvbiBMZXZlbCBhbmQgZGF0YSBtYXNrIHBhdHRlcm5cbiAgLy8gd2lsbCByZXN1bHQgaW4gYW4gYWxsLXplcm8gZGF0YSBzdHJpbmdcbiAgcmV0dXJuICgoZGF0YSA8PCAxMCkgfCBkKSBeIEcxNV9NQVNLXG59XG4iLCJjb25zdCBFWFBfVEFCTEUgPSBuZXcgVWludDhBcnJheSg1MTIpXG5jb25zdCBMT0dfVEFCTEUgPSBuZXcgVWludDhBcnJheSgyNTYpXG4vKipcbiAqIFByZWNvbXB1dGUgdGhlIGxvZyBhbmQgYW50aS1sb2cgdGFibGVzIGZvciBmYXN0ZXIgY29tcHV0YXRpb24gbGF0ZXJcbiAqXG4gKiBGb3IgZWFjaCBwb3NzaWJsZSB2YWx1ZSBpbiB0aGUgZ2Fsb2lzIGZpZWxkIDJeOCwgd2Ugd2lsbCBwcmUtY29tcHV0ZVxuICogdGhlIGxvZ2FyaXRobSBhbmQgYW50aS1sb2dhcml0aG0gKGV4cG9uZW50aWFsKSBvZiB0aGlzIHZhbHVlXG4gKlxuICogcmVmIHtAbGluayBodHRwczovL2VuLndpa2l2ZXJzaXR5Lm9yZy93aWtpL1JlZWQlRTIlODAlOTNTb2xvbW9uX2NvZGVzX2Zvcl9jb2RlcnMjSW50cm9kdWN0aW9uX3RvX21hdGhlbWF0aWNhbF9maWVsZHN9XG4gKi9cbjsoZnVuY3Rpb24gaW5pdFRhYmxlcyAoKSB7XG4gIGxldCB4ID0gMVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NTsgaSsrKSB7XG4gICAgRVhQX1RBQkxFW2ldID0geFxuICAgIExPR19UQUJMRVt4XSA9IGlcblxuICAgIHggPDw9IDEgLy8gbXVsdGlwbHkgYnkgMlxuXG4gICAgLy8gVGhlIFFSIGNvZGUgc3BlY2lmaWNhdGlvbiBzYXlzIHRvIHVzZSBieXRlLXdpc2UgbW9kdWxvIDEwMDAxMTEwMSBhcml0aG1ldGljLlxuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB3aGVuIGEgbnVtYmVyIGlzIDI1NiBvciBsYXJnZXIsIGl0IHNob3VsZCBiZSBYT1JlZCB3aXRoIDB4MTFELlxuICAgIGlmICh4ICYgMHgxMDApIHsgLy8gc2ltaWxhciB0byB4ID49IDI1NiwgYnV0IGEgbG90IGZhc3RlciAoYmVjYXVzZSAweDEwMCA9PSAyNTYpXG4gICAgICB4IF49IDB4MTFEXG4gICAgfVxuICB9XG5cbiAgLy8gT3B0aW1pemF0aW9uOiBkb3VibGUgdGhlIHNpemUgb2YgdGhlIGFudGktbG9nIHRhYmxlIHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBtb2QgMjU1IHRvXG4gIC8vIHN0YXkgaW5zaWRlIHRoZSBib3VuZHMgKGJlY2F1c2Ugd2Ugd2lsbCBtYWlubHkgdXNlIHRoaXMgdGFibGUgZm9yIHRoZSBtdWx0aXBsaWNhdGlvbiBvZlxuICAvLyB0d28gR0YgbnVtYmVycywgbm8gbW9yZSkuXG4gIC8vIEBzZWUge0BsaW5rIG11bH1cbiAgZm9yIChsZXQgaSA9IDI1NTsgaSA8IDUxMjsgaSsrKSB7XG4gICAgRVhQX1RBQkxFW2ldID0gRVhQX1RBQkxFW2kgLSAyNTVdXG4gIH1cbn0oKSlcblxuLyoqXG4gKiBSZXR1cm5zIGxvZyB2YWx1ZSBvZiBuIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG5cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbiBsb2cgKG4pIHtcbiAgaWYgKG4gPCAxKSB0aHJvdyBuZXcgRXJyb3IoJ2xvZygnICsgbiArICcpJylcbiAgcmV0dXJuIExPR19UQUJMRVtuXVxufVxuXG4vKipcbiAqIFJldHVybnMgYW50aS1sb2cgdmFsdWUgb2YgbiBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMuZXhwID0gZnVuY3Rpb24gZXhwIChuKSB7XG4gIHJldHVybiBFWFBfVEFCTEVbbl1cbn1cblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBudW1iZXIgaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0geFxuICogQHBhcmFtICB7TnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbmV4cG9ydHMubXVsID0gZnVuY3Rpb24gbXVsICh4LCB5KSB7XG4gIGlmICh4ID09PSAwIHx8IHkgPT09IDApIHJldHVybiAwXG5cbiAgLy8gc2hvdWxkIGJlIEVYUF9UQUJMRVsoTE9HX1RBQkxFW3hdICsgTE9HX1RBQkxFW3ldKSAlIDI1NV0gaWYgRVhQX1RBQkxFIHdhc24ndCBvdmVyc2l6ZWRcbiAgLy8gQHNlZSB7QGxpbmsgaW5pdFRhYmxlc31cbiAgcmV0dXJuIEVYUF9UQUJMRVtMT0dfVEFCTEVbeF0gKyBMT0dfVEFCTEVbeV1dXG59XG4iLCJjb25zdCBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIEthbmppRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLktBTkpJXG4gIHRoaXMuZGF0YSA9IGRhdGFcbn1cblxuS2FuamlEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIGxlbmd0aCAqIDEzXG59XG5cbkthbmppRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuS2FuamlEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBLYW5qaURhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5LYW5qaURhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJpdEJ1ZmZlcikge1xuICBsZXQgaVxuXG4gIC8vIEluIHRoZSBTaGlmdCBKSVMgc3lzdGVtLCBLYW5qaSBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSBhIHR3byBieXRlIGNvbWJpbmF0aW9uLlxuICAvLyBUaGVzZSBieXRlIHZhbHVlcyBhcmUgc2hpZnRlZCBmcm9tIHRoZSBKSVMgWCAwMjA4IHZhbHVlcy5cbiAgLy8gSklTIFggMDIwOCBnaXZlcyBkZXRhaWxzIG9mIHRoZSBzaGlmdCBjb2RlZCByZXByZXNlbnRhdGlvbi5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGxldCB2YWx1ZSA9IFV0aWxzLnRvU0pJUyh0aGlzLmRhdGFbaV0pXG5cbiAgICAvLyBGb3IgY2hhcmFjdGVycyB3aXRoIFNoaWZ0IEpJUyB2YWx1ZXMgZnJvbSAweDgxNDAgdG8gMHg5RkZDOlxuICAgIGlmICh2YWx1ZSA+PSAweDgxNDAgJiYgdmFsdWUgPD0gMHg5RkZDKSB7XG4gICAgICAvLyBTdWJ0cmFjdCAweDgxNDAgZnJvbSBTaGlmdCBKSVMgdmFsdWVcbiAgICAgIHZhbHVlIC09IDB4ODE0MFxuXG4gICAgLy8gRm9yIGNoYXJhY3RlcnMgd2l0aCBTaGlmdCBKSVMgdmFsdWVzIGZyb20gMHhFMDQwIHRvIDB4RUJCRlxuICAgIH0gZWxzZSBpZiAodmFsdWUgPj0gMHhFMDQwICYmIHZhbHVlIDw9IDB4RUJCRikge1xuICAgICAgLy8gU3VidHJhY3QgMHhDMTQwIGZyb20gU2hpZnQgSklTIHZhbHVlXG4gICAgICB2YWx1ZSAtPSAweEMxNDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSW52YWxpZCBTSklTIGNoYXJhY3RlcjogJyArIHRoaXMuZGF0YVtpXSArICdcXG4nICtcbiAgICAgICAgJ01ha2Ugc3VyZSB5b3VyIGNoYXJzZXQgaXMgVVRGLTgnKVxuICAgIH1cblxuICAgIC8vIE11bHRpcGx5IG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBvZiByZXN1bHQgYnkgMHhDMFxuICAgIC8vIGFuZCBhZGQgbGVhc3Qgc2lnbmlmaWNhbnQgYnl0ZSB0byBwcm9kdWN0XG4gICAgdmFsdWUgPSAoKCh2YWx1ZSA+Pj4gOCkgJiAweGZmKSAqIDB4QzApICsgKHZhbHVlICYgMHhmZilcblxuICAgIC8vIENvbnZlcnQgcmVzdWx0IHRvIGEgMTMtYml0IGJpbmFyeSBzdHJpbmdcbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEthbmppRGF0YVxuIiwiLyoqXG4gKiBEYXRhIG1hc2sgcGF0dGVybiByZWZlcmVuY2VcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuUGF0dGVybnMgPSB7XG4gIFBBVFRFUk4wMDA6IDAsXG4gIFBBVFRFUk4wMDE6IDEsXG4gIFBBVFRFUk4wMTA6IDIsXG4gIFBBVFRFUk4wMTE6IDMsXG4gIFBBVFRFUk4xMDA6IDQsXG4gIFBBVFRFUk4xMDE6IDUsXG4gIFBBVFRFUk4xMTA6IDYsXG4gIFBBVFRFUk4xMTE6IDdcbn1cblxuLyoqXG4gKiBXZWlnaHRlZCBwZW5hbHR5IHNjb3JlcyBmb3IgdGhlIHVuZGVzaXJhYmxlIGZlYXR1cmVzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5jb25zdCBQZW5hbHR5U2NvcmVzID0ge1xuICBOMTogMyxcbiAgTjI6IDMsXG4gIE4zOiA0MCxcbiAgTjQ6IDEwXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgbWFzayBwYXR0ZXJuIHZhbHVlIGlzIHZhbGlkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgbWFzayAgICBNYXNrIHBhdHRlcm5cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgdHJ1ZSBpZiB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKG1hc2spIHtcbiAgcmV0dXJuIG1hc2sgIT0gbnVsbCAmJiBtYXNrICE9PSAnJyAmJiAhaXNOYU4obWFzaykgJiYgbWFzayA+PSAwICYmIG1hc2sgPD0gN1xufVxuXG4vKipcbiAqIFJldHVybnMgbWFzayBwYXR0ZXJuIGZyb20gYSB2YWx1ZS5cbiAqIElmIHZhbHVlIGlzIG5vdCB2YWxpZCwgcmV0dXJucyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ8U3RyaW5nfSB2YWx1ZSAgICAgICAgTWFzayBwYXR0ZXJuIHZhbHVlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgVmFsaWQgbWFzayBwYXR0ZXJuIG9yIHVuZGVmaW5lZFxuICovXG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2YWx1ZSkge1xuICByZXR1cm4gZXhwb3J0cy5pc1ZhbGlkKHZhbHVlKSA/IHBhcnNlSW50KHZhbHVlLCAxMCkgOiB1bmRlZmluZWRcbn1cblxuLyoqXG4qIEZpbmQgYWRqYWNlbnQgbW9kdWxlcyBpbiByb3cvY29sdW1uIHdpdGggdGhlIHNhbWUgY29sb3JcbiogYW5kIGFzc2lnbiBhIHBlbmFsdHkgdmFsdWUuXG4qXG4qIFBvaW50czogTjEgKyBpXG4qIGkgaXMgdGhlIGFtb3VudCBieSB3aGljaCB0aGUgbnVtYmVyIG9mIGFkamFjZW50IG1vZHVsZXMgb2YgdGhlIHNhbWUgY29sb3IgZXhjZWVkcyA1XG4qL1xuZXhwb3J0cy5nZXRQZW5hbHR5TjEgPSBmdW5jdGlvbiBnZXRQZW5hbHR5TjEgKGRhdGEpIHtcbiAgY29uc3Qgc2l6ZSA9IGRhdGEuc2l6ZVxuICBsZXQgcG9pbnRzID0gMFxuICBsZXQgc2FtZUNvdW50Q29sID0gMFxuICBsZXQgc2FtZUNvdW50Um93ID0gMFxuICBsZXQgbGFzdENvbCA9IG51bGxcbiAgbGV0IGxhc3RSb3cgPSBudWxsXG5cbiAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgc2l6ZTsgcm93KyspIHtcbiAgICBzYW1lQ291bnRDb2wgPSBzYW1lQ291bnRSb3cgPSAwXG4gICAgbGFzdENvbCA9IGxhc3RSb3cgPSBudWxsXG5cbiAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBzaXplOyBjb2wrKykge1xuICAgICAgbGV0IG1vZHVsZSA9IGRhdGEuZ2V0KHJvdywgY29sKVxuICAgICAgaWYgKG1vZHVsZSA9PT0gbGFzdENvbCkge1xuICAgICAgICBzYW1lQ291bnRDb2wrK1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNhbWVDb3VudENvbCA+PSA1KSBwb2ludHMgKz0gUGVuYWx0eVNjb3Jlcy5OMSArIChzYW1lQ291bnRDb2wgLSA1KVxuICAgICAgICBsYXN0Q29sID0gbW9kdWxlXG4gICAgICAgIHNhbWVDb3VudENvbCA9IDFcbiAgICAgIH1cblxuICAgICAgbW9kdWxlID0gZGF0YS5nZXQoY29sLCByb3cpXG4gICAgICBpZiAobW9kdWxlID09PSBsYXN0Um93KSB7XG4gICAgICAgIHNhbWVDb3VudFJvdysrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2FtZUNvdW50Um93ID49IDUpIHBvaW50cyArPSBQZW5hbHR5U2NvcmVzLk4xICsgKHNhbWVDb3VudFJvdyAtIDUpXG4gICAgICAgIGxhc3RSb3cgPSBtb2R1bGVcbiAgICAgICAgc2FtZUNvdW50Um93ID0gMVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzYW1lQ291bnRDb2wgPj0gNSkgcG9pbnRzICs9IFBlbmFsdHlTY29yZXMuTjEgKyAoc2FtZUNvdW50Q29sIC0gNSlcbiAgICBpZiAoc2FtZUNvdW50Um93ID49IDUpIHBvaW50cyArPSBQZW5hbHR5U2NvcmVzLk4xICsgKHNhbWVDb3VudFJvdyAtIDUpXG4gIH1cblxuICByZXR1cm4gcG9pbnRzXG59XG5cbi8qKlxuICogRmluZCAyeDIgYmxvY2tzIHdpdGggdGhlIHNhbWUgY29sb3IgYW5kIGFzc2lnbiBhIHBlbmFsdHkgdmFsdWVcbiAqXG4gKiBQb2ludHM6IE4yICogKG0gLSAxKSAqIChuIC0gMSlcbiAqL1xuZXhwb3J0cy5nZXRQZW5hbHR5TjIgPSBmdW5jdGlvbiBnZXRQZW5hbHR5TjIgKGRhdGEpIHtcbiAgY29uc3Qgc2l6ZSA9IGRhdGEuc2l6ZVxuICBsZXQgcG9pbnRzID0gMFxuXG4gIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHNpemUgLSAxOyByb3crKykge1xuICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IHNpemUgLSAxOyBjb2wrKykge1xuICAgICAgY29uc3QgbGFzdCA9IGRhdGEuZ2V0KHJvdywgY29sKSArXG4gICAgICAgIGRhdGEuZ2V0KHJvdywgY29sICsgMSkgK1xuICAgICAgICBkYXRhLmdldChyb3cgKyAxLCBjb2wpICtcbiAgICAgICAgZGF0YS5nZXQocm93ICsgMSwgY29sICsgMSlcblxuICAgICAgaWYgKGxhc3QgPT09IDQgfHwgbGFzdCA9PT0gMCkgcG9pbnRzKytcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9pbnRzICogUGVuYWx0eVNjb3Jlcy5OMlxufVxuXG4vKipcbiAqIEZpbmQgMToxOjM6MToxIHJhdGlvIChkYXJrOmxpZ2h0OmRhcms6bGlnaHQ6ZGFyaykgcGF0dGVybiBpbiByb3cvY29sdW1uLFxuICogcHJlY2VkZWQgb3IgZm9sbG93ZWQgYnkgbGlnaHQgYXJlYSA0IG1vZHVsZXMgd2lkZVxuICpcbiAqIFBvaW50czogTjMgKiBudW1iZXIgb2YgcGF0dGVybiBmb3VuZFxuICovXG5leHBvcnRzLmdldFBlbmFsdHlOMyA9IGZ1bmN0aW9uIGdldFBlbmFsdHlOMyAoZGF0YSkge1xuICBjb25zdCBzaXplID0gZGF0YS5zaXplXG4gIGxldCBwb2ludHMgPSAwXG4gIGxldCBiaXRzQ29sID0gMFxuICBsZXQgYml0c1JvdyA9IDBcblxuICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBzaXplOyByb3crKykge1xuICAgIGJpdHNDb2wgPSBiaXRzUm93ID0gMFxuICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IHNpemU7IGNvbCsrKSB7XG4gICAgICBiaXRzQ29sID0gKChiaXRzQ29sIDw8IDEpICYgMHg3RkYpIHwgZGF0YS5nZXQocm93LCBjb2wpXG4gICAgICBpZiAoY29sID49IDEwICYmIChiaXRzQ29sID09PSAweDVEMCB8fCBiaXRzQ29sID09PSAweDA1RCkpIHBvaW50cysrXG5cbiAgICAgIGJpdHNSb3cgPSAoKGJpdHNSb3cgPDwgMSkgJiAweDdGRikgfCBkYXRhLmdldChjb2wsIHJvdylcbiAgICAgIGlmIChjb2wgPj0gMTAgJiYgKGJpdHNSb3cgPT09IDB4NUQwIHx8IGJpdHNSb3cgPT09IDB4MDVEKSkgcG9pbnRzKytcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcG9pbnRzICogUGVuYWx0eVNjb3Jlcy5OM1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBwcm9wb3J0aW9uIG9mIGRhcmsgbW9kdWxlcyBpbiBlbnRpcmUgc3ltYm9sXG4gKlxuICogUG9pbnRzOiBONCAqIGtcbiAqXG4gKiBrIGlzIHRoZSByYXRpbmcgb2YgdGhlIGRldmlhdGlvbiBvZiB0aGUgcHJvcG9ydGlvbiBvZiBkYXJrIG1vZHVsZXNcbiAqIGluIHRoZSBzeW1ib2wgZnJvbSA1MCUgaW4gc3RlcHMgb2YgNSVcbiAqL1xuZXhwb3J0cy5nZXRQZW5hbHR5TjQgPSBmdW5jdGlvbiBnZXRQZW5hbHR5TjQgKGRhdGEpIHtcbiAgbGV0IGRhcmtDb3VudCA9IDBcbiAgY29uc3QgbW9kdWxlc0NvdW50ID0gZGF0YS5kYXRhLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kdWxlc0NvdW50OyBpKyspIGRhcmtDb3VudCArPSBkYXRhLmRhdGFbaV1cblxuICBjb25zdCBrID0gTWF0aC5hYnMoTWF0aC5jZWlsKChkYXJrQ291bnQgKiAxMDAgLyBtb2R1bGVzQ291bnQpIC8gNSkgLSAxMClcblxuICByZXR1cm4gayAqIFBlbmFsdHlTY29yZXMuTjRcbn1cblxuLyoqXG4gKiBSZXR1cm4gbWFzayB2YWx1ZSBhdCBnaXZlbiBwb3NpdGlvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gbWFza1BhdHRlcm4gUGF0dGVybiByZWZlcmVuY2UgdmFsdWVcbiAqIEBwYXJhbSAge051bWJlcn0gaSAgICAgICAgICAgUm93XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGogICAgICAgICAgIENvbHVtblxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICAgICBNYXNrIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGdldE1hc2tBdCAobWFza1BhdHRlcm4sIGksIGopIHtcbiAgc3dpdGNoIChtYXNrUGF0dGVybikge1xuICAgIGNhc2UgZXhwb3J0cy5QYXR0ZXJucy5QQVRURVJOMDAwOiByZXR1cm4gKGkgKyBqKSAlIDIgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjAwMTogcmV0dXJuIGkgJSAyID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4wMTA6IHJldHVybiBqICUgMyA9PT0gMFxuICAgIGNhc2UgZXhwb3J0cy5QYXR0ZXJucy5QQVRURVJOMDExOiByZXR1cm4gKGkgKyBqKSAlIDMgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjEwMDogcmV0dXJuIChNYXRoLmZsb29yKGkgLyAyKSArIE1hdGguZmxvb3IoaiAvIDMpKSAlIDIgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjEwMTogcmV0dXJuIChpICogaikgJSAyICsgKGkgKiBqKSAlIDMgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjExMDogcmV0dXJuICgoaSAqIGopICUgMiArIChpICogaikgJSAzKSAlIDIgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjExMTogcmV0dXJuICgoaSAqIGopICUgMyArIChpICsgaikgJSAyKSAlIDIgPT09IDBcblxuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignYmFkIG1hc2tQYXR0ZXJuOicgKyBtYXNrUGF0dGVybilcbiAgfVxufVxuXG4vKipcbiAqIEFwcGx5IGEgbWFzayBwYXR0ZXJuIHRvIGEgQml0TWF0cml4XG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgICBwYXR0ZXJuIFBhdHRlcm4gcmVmZXJlbmNlIG51bWJlclxuICogQHBhcmFtICB7Qml0TWF0cml4fSBkYXRhICAgIEJpdE1hdHJpeCBkYXRhXG4gKi9cbmV4cG9ydHMuYXBwbHlNYXNrID0gZnVuY3Rpb24gYXBwbHlNYXNrIChwYXR0ZXJuLCBkYXRhKSB7XG4gIGNvbnN0IHNpemUgPSBkYXRhLnNpemVcblxuICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBzaXplOyBjb2wrKykge1xuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHNpemU7IHJvdysrKSB7XG4gICAgICBpZiAoZGF0YS5pc1Jlc2VydmVkKHJvdywgY29sKSkgY29udGludWVcbiAgICAgIGRhdGEueG9yKHJvdywgY29sLCBnZXRNYXNrQXQocGF0dGVybiwgcm93LCBjb2wpKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJlc3QgbWFzayBwYXR0ZXJuIGZvciBkYXRhXG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSBkYXRhXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IE1hc2sgcGF0dGVybiByZWZlcmVuY2UgbnVtYmVyXG4gKi9cbmV4cG9ydHMuZ2V0QmVzdE1hc2sgPSBmdW5jdGlvbiBnZXRCZXN0TWFzayAoZGF0YSwgc2V0dXBGb3JtYXRGdW5jKSB7XG4gIGNvbnN0IG51bVBhdHRlcm5zID0gT2JqZWN0LmtleXMoZXhwb3J0cy5QYXR0ZXJucykubGVuZ3RoXG4gIGxldCBiZXN0UGF0dGVybiA9IDBcbiAgbGV0IGxvd2VyUGVuYWx0eSA9IEluZmluaXR5XG5cbiAgZm9yIChsZXQgcCA9IDA7IHAgPCBudW1QYXR0ZXJuczsgcCsrKSB7XG4gICAgc2V0dXBGb3JtYXRGdW5jKHApXG4gICAgZXhwb3J0cy5hcHBseU1hc2socCwgZGF0YSlcblxuICAgIC8vIENhbGN1bGF0ZSBwZW5hbHR5XG4gICAgY29uc3QgcGVuYWx0eSA9XG4gICAgICBleHBvcnRzLmdldFBlbmFsdHlOMShkYXRhKSArXG4gICAgICBleHBvcnRzLmdldFBlbmFsdHlOMihkYXRhKSArXG4gICAgICBleHBvcnRzLmdldFBlbmFsdHlOMyhkYXRhKSArXG4gICAgICBleHBvcnRzLmdldFBlbmFsdHlONChkYXRhKVxuXG4gICAgLy8gVW5kbyBwcmV2aW91c2x5IGFwcGxpZWQgbWFza1xuICAgIGV4cG9ydHMuYXBwbHlNYXNrKHAsIGRhdGEpXG5cbiAgICBpZiAocGVuYWx0eSA8IGxvd2VyUGVuYWx0eSkge1xuICAgICAgbG93ZXJQZW5hbHR5ID0gcGVuYWx0eVxuICAgICAgYmVzdFBhdHRlcm4gPSBwXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJlc3RQYXR0ZXJuXG59XG4iLCJjb25zdCBWZXJzaW9uQ2hlY2sgPSByZXF1aXJlKCcuL3ZlcnNpb24tY2hlY2snKVxuY29uc3QgUmVnZXggPSByZXF1aXJlKCcuL3JlZ2V4JylcblxuLyoqXG4gKiBOdW1lcmljIG1vZGUgZW5jb2RlcyBkYXRhIGZyb20gdGhlIGRlY2ltYWwgZGlnaXQgc2V0ICgwIC0gOSlcbiAqIChieXRlIHZhbHVlcyAzMEhFWCB0byAzOUhFWCkuXG4gKiBOb3JtYWxseSwgMyBkYXRhIGNoYXJhY3RlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IDEwIGJpdHMuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5OVU1FUklDID0ge1xuICBpZDogJ051bWVyaWMnLFxuICBiaXQ6IDEgPDwgMCxcbiAgY2NCaXRzOiBbMTAsIDEyLCAxNF1cbn1cblxuLyoqXG4gKiBBbHBoYW51bWVyaWMgbW9kZSBlbmNvZGVzIGRhdGEgZnJvbSBhIHNldCBvZiA0NSBjaGFyYWN0ZXJzLFxuICogaS5lLiAxMCBudW1lcmljIGRpZ2l0cyAoMCAtIDkpLFxuICogICAgICAyNiBhbHBoYWJldGljIGNoYXJhY3RlcnMgKEEgLSBaKSxcbiAqICAgYW5kIDkgc3ltYm9scyAoU1AsICQsICUsICosICssIC0sIC4sIC8sIDopLlxuICogTm9ybWFsbHksIHR3byBpbnB1dCBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSAxMSBiaXRzLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuQUxQSEFOVU1FUklDID0ge1xuICBpZDogJ0FscGhhbnVtZXJpYycsXG4gIGJpdDogMSA8PCAxLFxuICBjY0JpdHM6IFs5LCAxMSwgMTNdXG59XG5cbi8qKlxuICogSW4gYnl0ZSBtb2RlLCBkYXRhIGlzIGVuY29kZWQgYXQgOCBiaXRzIHBlciBjaGFyYWN0ZXIuXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5CWVRFID0ge1xuICBpZDogJ0J5dGUnLFxuICBiaXQ6IDEgPDwgMixcbiAgY2NCaXRzOiBbOCwgMTYsIDE2XVxufVxuXG4vKipcbiAqIFRoZSBLYW5qaSBtb2RlIGVmZmljaWVudGx5IGVuY29kZXMgS2FuamkgY2hhcmFjdGVycyBpbiBhY2NvcmRhbmNlIHdpdGhcbiAqIHRoZSBTaGlmdCBKSVMgc3lzdGVtIGJhc2VkIG9uIEpJUyBYIDAyMDguXG4gKiBUaGUgU2hpZnQgSklTIHZhbHVlcyBhcmUgc2hpZnRlZCBmcm9tIHRoZSBKSVMgWCAwMjA4IHZhbHVlcy5cbiAqIEpJUyBYIDAyMDggZ2l2ZXMgZGV0YWlscyBvZiB0aGUgc2hpZnQgY29kZWQgcmVwcmVzZW50YXRpb24uXG4gKiBFYWNoIHR3by1ieXRlIGNoYXJhY3RlciB2YWx1ZSBpcyBjb21wYWN0ZWQgdG8gYSAxMy1iaXQgYmluYXJ5IGNvZGV3b3JkLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuS0FOSkkgPSB7XG4gIGlkOiAnS2FuamknLFxuICBiaXQ6IDEgPDwgMyxcbiAgY2NCaXRzOiBbOCwgMTAsIDEyXVxufVxuXG4vKipcbiAqIE1peGVkIG1vZGUgd2lsbCBjb250YWluIGEgc2VxdWVuY2VzIG9mIGRhdGEgaW4gYSBjb21iaW5hdGlvbiBvZiBhbnkgb2ZcbiAqIHRoZSBtb2RlcyBkZXNjcmliZWQgYWJvdmVcbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLk1JWEVEID0ge1xuICBiaXQ6IC0xXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGJpdHMgbmVlZGVkIHRvIHN0b3JlIHRoZSBkYXRhIGxlbmd0aFxuICogYWNjb3JkaW5nIHRvIFFSIENvZGUgc3BlY2lmaWNhdGlvbnMuXG4gKlxuICogQHBhcmFtICB7TW9kZX0gICBtb2RlICAgIERhdGEgbW9kZVxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIE51bWJlciBvZiBiaXRzXG4gKi9cbmV4cG9ydHMuZ2V0Q2hhckNvdW50SW5kaWNhdG9yID0gZnVuY3Rpb24gZ2V0Q2hhckNvdW50SW5kaWNhdG9yIChtb2RlLCB2ZXJzaW9uKSB7XG4gIGlmICghbW9kZS5jY0JpdHMpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtb2RlOiAnICsgbW9kZSlcblxuICBpZiAoIVZlcnNpb25DaGVjay5pc1ZhbGlkKHZlcnNpb24pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZlcnNpb246ICcgKyB2ZXJzaW9uKVxuICB9XG5cbiAgaWYgKHZlcnNpb24gPj0gMSAmJiB2ZXJzaW9uIDwgMTApIHJldHVybiBtb2RlLmNjQml0c1swXVxuICBlbHNlIGlmICh2ZXJzaW9uIDwgMjcpIHJldHVybiBtb2RlLmNjQml0c1sxXVxuICByZXR1cm4gbW9kZS5jY0JpdHNbMl1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtb3N0IGVmZmljaWVudCBtb2RlIHRvIHN0b3JlIHRoZSBzcGVjaWZpZWQgZGF0YVxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YVN0ciBJbnB1dCBkYXRhIHN0cmluZ1xuICogQHJldHVybiB7TW9kZX0gICAgICAgICAgIEJlc3QgbW9kZVxuICovXG5leHBvcnRzLmdldEJlc3RNb2RlRm9yRGF0YSA9IGZ1bmN0aW9uIGdldEJlc3RNb2RlRm9yRGF0YSAoZGF0YVN0cikge1xuICBpZiAoUmVnZXgudGVzdE51bWVyaWMoZGF0YVN0cikpIHJldHVybiBleHBvcnRzLk5VTUVSSUNcbiAgZWxzZSBpZiAoUmVnZXgudGVzdEFscGhhbnVtZXJpYyhkYXRhU3RyKSkgcmV0dXJuIGV4cG9ydHMuQUxQSEFOVU1FUklDXG4gIGVsc2UgaWYgKFJlZ2V4LnRlc3RLYW5qaShkYXRhU3RyKSkgcmV0dXJuIGV4cG9ydHMuS0FOSklcbiAgZWxzZSByZXR1cm4gZXhwb3J0cy5CWVRFXG59XG5cbi8qKlxuICogUmV0dXJuIG1vZGUgbmFtZSBhcyBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge01vZGV9IG1vZGUgTW9kZSBvYmplY3RcbiAqIEByZXR1cm5zIHtTdHJpbmd9ICBNb2RlIG5hbWVcbiAqL1xuZXhwb3J0cy50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChtb2RlKSB7XG4gIGlmIChtb2RlICYmIG1vZGUuaWQpIHJldHVybiBtb2RlLmlkXG4gIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtb2RlJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBpbnB1dCBwYXJhbSBpcyBhIHZhbGlkIG1vZGUgb2JqZWN0XG4gKlxuICogQHBhcmFtICAge01vZGV9ICAgIG1vZGUgTW9kZSBvYmplY3RcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHZhbGlkIG1vZGUsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnRzLmlzVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbGlkIChtb2RlKSB7XG4gIHJldHVybiBtb2RlICYmIG1vZGUuYml0ICYmIG1vZGUuY2NCaXRzXG59XG5cbi8qKlxuICogR2V0IG1vZGUgb2JqZWN0IGZyb20gaXRzIG5hbWVcbiAqXG4gKiBAcGFyYW0gICB7U3RyaW5nfSBzdHJpbmcgTW9kZSBuYW1lXG4gKiBAcmV0dXJucyB7TW9kZX0gICAgICAgICAgTW9kZSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyYW0gaXMgbm90IGEgc3RyaW5nJylcbiAgfVxuXG4gIGNvbnN0IGxjU3RyID0gc3RyaW5nLnRvTG93ZXJDYXNlKClcblxuICBzd2l0Y2ggKGxjU3RyKSB7XG4gICAgY2FzZSAnbnVtZXJpYyc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5OVU1FUklDXG4gICAgY2FzZSAnYWxwaGFudW1lcmljJzpcbiAgICAgIHJldHVybiBleHBvcnRzLkFMUEhBTlVNRVJJQ1xuICAgIGNhc2UgJ2thbmppJzpcbiAgICAgIHJldHVybiBleHBvcnRzLktBTkpJXG4gICAgY2FzZSAnYnl0ZSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5CWVRFXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtb2RlOiAnICsgc3RyaW5nKVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBtb2RlIGZyb20gYSB2YWx1ZS5cbiAqIElmIHZhbHVlIGlzIG5vdCBhIHZhbGlkIG1vZGUsIHJldHVybnMgZGVmYXVsdFZhbHVlXG4gKlxuICogQHBhcmFtICB7TW9kZXxTdHJpbmd9IHZhbHVlICAgICAgICBFbmNvZGluZyBtb2RlXG4gKiBAcGFyYW0gIHtNb2RlfSAgICAgICAgZGVmYXVsdFZhbHVlIEZhbGxiYWNrIHZhbHVlXG4gKiBAcmV0dXJuIHtNb2RlfSAgICAgICAgICAgICAgICAgICAgIEVuY29kaW5nIG1vZGVcbiAqL1xuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoZXhwb3J0cy5pc1ZhbGlkKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgfVxufVxuIiwiY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5cbmZ1bmN0aW9uIE51bWVyaWNEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuTlVNRVJJQ1xuICB0aGlzLmRhdGEgPSBkYXRhLnRvU3RyaW5nKClcbn1cblxuTnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gMTAgKiBNYXRoLmZsb29yKGxlbmd0aCAvIDMpICsgKChsZW5ndGggJSAzKSA/ICgobGVuZ3RoICUgMykgKiAzICsgMSkgOiAwKVxufVxuXG5OdW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIE51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgodGhpcy5kYXRhLmxlbmd0aClcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKGJpdEJ1ZmZlcikge1xuICBsZXQgaSwgZ3JvdXAsIHZhbHVlXG5cbiAgLy8gVGhlIGlucHV0IGRhdGEgc3RyaW5nIGlzIGRpdmlkZWQgaW50byBncm91cHMgb2YgdGhyZWUgZGlnaXRzLFxuICAvLyBhbmQgZWFjaCBncm91cCBpcyBjb252ZXJ0ZWQgdG8gaXRzIDEwLWJpdCBiaW5hcnkgZXF1aXZhbGVudC5cbiAgZm9yIChpID0gMDsgaSArIDMgPD0gdGhpcy5kYXRhLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgZ3JvdXAgPSB0aGlzLmRhdGEuc3Vic3RyKGksIDMpXG4gICAgdmFsdWUgPSBwYXJzZUludChncm91cCwgMTApXG5cbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMClcbiAgfVxuXG4gIC8vIElmIHRoZSBudW1iZXIgb2YgaW5wdXQgZGlnaXRzIGlzIG5vdCBhbiBleGFjdCBtdWx0aXBsZSBvZiB0aHJlZSxcbiAgLy8gdGhlIGZpbmFsIG9uZSBvciB0d28gZGlnaXRzIGFyZSBjb252ZXJ0ZWQgdG8gNCBvciA3IGJpdHMgcmVzcGVjdGl2ZWx5LlxuICBjb25zdCByZW1haW5pbmdOdW0gPSB0aGlzLmRhdGEubGVuZ3RoIC0gaVxuICBpZiAocmVtYWluaW5nTnVtID4gMCkge1xuICAgIGdyb3VwID0gdGhpcy5kYXRhLnN1YnN0cihpKVxuICAgIHZhbHVlID0gcGFyc2VJbnQoZ3JvdXAsIDEwKVxuXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgcmVtYWluaW5nTnVtICogMyArIDEpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOdW1lcmljRGF0YVxuIiwiY29uc3QgR0YgPSByZXF1aXJlKCcuL2dhbG9pcy1maWVsZCcpXG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gcG9seW5vbWlhbHMgaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IHAxIFBvbHlub21pYWxcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IHAyIFBvbHlub21pYWxcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9ICAgIFByb2R1Y3Qgb2YgcDEgYW5kIHAyXG4gKi9cbmV4cG9ydHMubXVsID0gZnVuY3Rpb24gbXVsIChwMSwgcDIpIHtcbiAgY29uc3QgY29lZmYgPSBuZXcgVWludDhBcnJheShwMS5sZW5ndGggKyBwMi5sZW5ndGggLSAxKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcDEubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHAyLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb2VmZltpICsgal0gXj0gR0YubXVsKHAxW2ldLCBwMltqXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29lZmZcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHJlbWFpbmRlciBvZiBwb2x5bm9taWFscyBkaXZpc2lvblxuICpcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IGRpdmlkZW50IFBvbHlub21pYWxcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IGRpdmlzb3IgIFBvbHlub21pYWxcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9ICAgICAgICAgIFJlbWFpbmRlclxuICovXG5leHBvcnRzLm1vZCA9IGZ1bmN0aW9uIG1vZCAoZGl2aWRlbnQsIGRpdmlzb3IpIHtcbiAgbGV0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGRpdmlkZW50KVxuXG4gIHdoaWxlICgocmVzdWx0Lmxlbmd0aCAtIGRpdmlzb3IubGVuZ3RoKSA+PSAwKSB7XG4gICAgY29uc3QgY29lZmYgPSByZXN1bHRbMF1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGl2aXNvci5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W2ldIF49IEdGLm11bChkaXZpc29yW2ldLCBjb2VmZilcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgYWxsIHplcm9zIGZyb20gYnVmZmVyIGhlYWRcbiAgICBsZXQgb2Zmc2V0ID0gMFxuICAgIHdoaWxlIChvZmZzZXQgPCByZXN1bHQubGVuZ3RoICYmIHJlc3VsdFtvZmZzZXRdID09PSAwKSBvZmZzZXQrK1xuICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZShvZmZzZXQpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogR2VuZXJhdGUgYW4gaXJyZWR1Y2libGUgZ2VuZXJhdG9yIHBvbHlub21pYWwgb2Ygc3BlY2lmaWVkIGRlZ3JlZVxuICogKHVzZWQgYnkgUmVlZC1Tb2xvbW9uIGVuY29kZXIpXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkZWdyZWUgRGVncmVlIG9mIHRoZSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICogQHJldHVybiB7VWludDhBcnJheX0gICAgQnVmZmVyIGNvbnRhaW5pbmcgcG9seW5vbWlhbCBjb2VmZmljaWVudHNcbiAqL1xuZXhwb3J0cy5nZW5lcmF0ZUVDUG9seW5vbWlhbCA9IGZ1bmN0aW9uIGdlbmVyYXRlRUNQb2x5bm9taWFsIChkZWdyZWUpIHtcbiAgbGV0IHBvbHkgPSBuZXcgVWludDhBcnJheShbMV0pXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGVncmVlOyBpKyspIHtcbiAgICBwb2x5ID0gZXhwb3J0cy5tdWwocG9seSwgbmV3IFVpbnQ4QXJyYXkoWzEsIEdGLmV4cChpKV0pKVxuICB9XG5cbiAgcmV0dXJuIHBvbHlcbn1cbiIsImNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5jb25zdCBFQ0xldmVsID0gcmVxdWlyZSgnLi9lcnJvci1jb3JyZWN0aW9uLWxldmVsJylcbmNvbnN0IEJpdEJ1ZmZlciA9IHJlcXVpcmUoJy4vYml0LWJ1ZmZlcicpXG5jb25zdCBCaXRNYXRyaXggPSByZXF1aXJlKCcuL2JpdC1tYXRyaXgnKVxuY29uc3QgQWxpZ25tZW50UGF0dGVybiA9IHJlcXVpcmUoJy4vYWxpZ25tZW50LXBhdHRlcm4nKVxuY29uc3QgRmluZGVyUGF0dGVybiA9IHJlcXVpcmUoJy4vZmluZGVyLXBhdHRlcm4nKVxuY29uc3QgTWFza1BhdHRlcm4gPSByZXF1aXJlKCcuL21hc2stcGF0dGVybicpXG5jb25zdCBFQ0NvZGUgPSByZXF1aXJlKCcuL2Vycm9yLWNvcnJlY3Rpb24tY29kZScpXG5jb25zdCBSZWVkU29sb21vbkVuY29kZXIgPSByZXF1aXJlKCcuL3JlZWQtc29sb21vbi1lbmNvZGVyJylcbmNvbnN0IFZlcnNpb24gPSByZXF1aXJlKCcuL3ZlcnNpb24nKVxuY29uc3QgRm9ybWF0SW5mbyA9IHJlcXVpcmUoJy4vZm9ybWF0LWluZm8nKVxuY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5jb25zdCBTZWdtZW50cyA9IHJlcXVpcmUoJy4vc2VnbWVudHMnKVxuXG4vKipcbiAqIFFSQ29kZSBmb3IgSmF2YVNjcmlwdFxuICpcbiAqIG1vZGlmaWVkIGJ5IFJ5YW4gRGF5IGZvciBub2RlanMgc3VwcG9ydFxuICogQ29weXJpZ2h0IChjKSAyMDExIFJ5YW4gRGF5XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICpcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBRUkNvZGUgZm9yIEphdmFTY3JpcHRcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgS2F6dWhpa28gQXJhc2Vcbi8vXG4vLyBVUkw6IGh0dHA6Ly93d3cuZC1wcm9qZWN0LmNvbS9cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2U6XG4vLyAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4vL1xuLy8gVGhlIHdvcmQgXCJRUiBDb2RlXCIgaXMgcmVnaXN0ZXJlZCB0cmFkZW1hcmsgb2Zcbi8vIERFTlNPIFdBVkUgSU5DT1JQT1JBVEVEXG4vLyAgIGh0dHA6Ly93d3cuZGVuc28td2F2ZS5jb20vcXJjb2RlL2ZhcXBhdGVudC1lLmh0bWxcbi8vXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cblxuLyoqXG4gKiBBZGQgZmluZGVyIHBhdHRlcm5zIGJpdHMgdG8gbWF0cml4XG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSBtYXRyaXggIE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKi9cbmZ1bmN0aW9uIHNldHVwRmluZGVyUGF0dGVybiAobWF0cml4LCB2ZXJzaW9uKSB7XG4gIGNvbnN0IHNpemUgPSBtYXRyaXguc2l6ZVxuICBjb25zdCBwb3MgPSBGaW5kZXJQYXR0ZXJuLmdldFBvc2l0aW9ucyh2ZXJzaW9uKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgcm93ID0gcG9zW2ldWzBdXG4gICAgY29uc3QgY29sID0gcG9zW2ldWzFdXG5cbiAgICBmb3IgKGxldCByID0gLTE7IHIgPD0gNzsgcisrKSB7XG4gICAgICBpZiAocm93ICsgciA8PSAtMSB8fCBzaXplIDw9IHJvdyArIHIpIGNvbnRpbnVlXG5cbiAgICAgIGZvciAobGV0IGMgPSAtMTsgYyA8PSA3OyBjKyspIHtcbiAgICAgICAgaWYgKGNvbCArIGMgPD0gLTEgfHwgc2l6ZSA8PSBjb2wgKyBjKSBjb250aW51ZVxuXG4gICAgICAgIGlmICgociA+PSAwICYmIHIgPD0gNiAmJiAoYyA9PT0gMCB8fCBjID09PSA2KSkgfHxcbiAgICAgICAgICAoYyA+PSAwICYmIGMgPD0gNiAmJiAociA9PT0gMCB8fCByID09PSA2KSkgfHxcbiAgICAgICAgICAociA+PSAyICYmIHIgPD0gNCAmJiBjID49IDIgJiYgYyA8PSA0KSkge1xuICAgICAgICAgIG1hdHJpeC5zZXQocm93ICsgciwgY29sICsgYywgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRyaXguc2V0KHJvdyArIHIsIGNvbCArIGMsIGZhbHNlLCB0cnVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWRkIHRpbWluZyBwYXR0ZXJuIGJpdHMgdG8gbWF0cml4XG4gKlxuICogTm90ZTogdGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUge0BsaW5rIHNldHVwQWxpZ25tZW50UGF0dGVybn1cbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCBNb2R1bGVzIG1hdHJpeFxuICovXG5mdW5jdGlvbiBzZXR1cFRpbWluZ1BhdHRlcm4gKG1hdHJpeCkge1xuICBjb25zdCBzaXplID0gbWF0cml4LnNpemVcblxuICBmb3IgKGxldCByID0gODsgciA8IHNpemUgLSA4OyByKyspIHtcbiAgICBjb25zdCB2YWx1ZSA9IHIgJSAyID09PSAwXG4gICAgbWF0cml4LnNldChyLCA2LCB2YWx1ZSwgdHJ1ZSlcbiAgICBtYXRyaXguc2V0KDYsIHIsIHZhbHVlLCB0cnVlKVxuICB9XG59XG5cbi8qKlxuICogQWRkIGFsaWdubWVudCBwYXR0ZXJucyBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBjYWxsZWQgYWZ0ZXIge0BsaW5rIHNldHVwVGltaW5nUGF0dGVybn1cbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCAgTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge051bWJlcn0gICAgdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqL1xuZnVuY3Rpb24gc2V0dXBBbGlnbm1lbnRQYXR0ZXJuIChtYXRyaXgsIHZlcnNpb24pIHtcbiAgY29uc3QgcG9zID0gQWxpZ25tZW50UGF0dGVybi5nZXRQb3NpdGlvbnModmVyc2lvbilcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHJvdyA9IHBvc1tpXVswXVxuICAgIGNvbnN0IGNvbCA9IHBvc1tpXVsxXVxuXG4gICAgZm9yIChsZXQgciA9IC0yOyByIDw9IDI7IHIrKykge1xuICAgICAgZm9yIChsZXQgYyA9IC0yOyBjIDw9IDI7IGMrKykge1xuICAgICAgICBpZiAociA9PT0gLTIgfHwgciA9PT0gMiB8fCBjID09PSAtMiB8fCBjID09PSAyIHx8XG4gICAgICAgICAgKHIgPT09IDAgJiYgYyA9PT0gMCkpIHtcbiAgICAgICAgICBtYXRyaXguc2V0KHJvdyArIHIsIGNvbCArIGMsIHRydWUsIHRydWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0cml4LnNldChyb3cgKyByLCBjb2wgKyBjLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFkZCB2ZXJzaW9uIGluZm8gYml0cyB0byBtYXRyaXhcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCAgTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge051bWJlcn0gICAgdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqL1xuZnVuY3Rpb24gc2V0dXBWZXJzaW9uSW5mbyAobWF0cml4LCB2ZXJzaW9uKSB7XG4gIGNvbnN0IHNpemUgPSBtYXRyaXguc2l6ZVxuICBjb25zdCBiaXRzID0gVmVyc2lvbi5nZXRFbmNvZGVkQml0cyh2ZXJzaW9uKVxuICBsZXQgcm93LCBjb2wsIG1vZFxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTg7IGkrKykge1xuICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIDMpXG4gICAgY29sID0gaSAlIDMgKyBzaXplIC0gOCAtIDNcbiAgICBtb2QgPSAoKGJpdHMgPj4gaSkgJiAxKSA9PT0gMVxuXG4gICAgbWF0cml4LnNldChyb3csIGNvbCwgbW9kLCB0cnVlKVxuICAgIG1hdHJpeC5zZXQoY29sLCByb3csIG1vZCwgdHJ1ZSlcbiAgfVxufVxuXG4vKipcbiAqIEFkZCBmb3JtYXQgaW5mbyBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4ICAgICAgICAgICAgICAgTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge0Vycm9yQ29ycmVjdGlvbkxldmVsfSAgICBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIG1hc2tQYXR0ZXJuICAgICAgICAgIE1hc2sgcGF0dGVybiByZWZlcmVuY2UgdmFsdWVcbiAqL1xuZnVuY3Rpb24gc2V0dXBGb3JtYXRJbmZvIChtYXRyaXgsIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrUGF0dGVybikge1xuICBjb25zdCBzaXplID0gbWF0cml4LnNpemVcbiAgY29uc3QgYml0cyA9IEZvcm1hdEluZm8uZ2V0RW5jb2RlZEJpdHMoZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2tQYXR0ZXJuKVxuICBsZXQgaSwgbW9kXG5cbiAgZm9yIChpID0gMDsgaSA8IDE1OyBpKyspIHtcbiAgICBtb2QgPSAoKGJpdHMgPj4gaSkgJiAxKSA9PT0gMVxuXG4gICAgLy8gdmVydGljYWxcbiAgICBpZiAoaSA8IDYpIHtcbiAgICAgIG1hdHJpeC5zZXQoaSwgOCwgbW9kLCB0cnVlKVxuICAgIH0gZWxzZSBpZiAoaSA8IDgpIHtcbiAgICAgIG1hdHJpeC5zZXQoaSArIDEsIDgsIG1vZCwgdHJ1ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgbWF0cml4LnNldChzaXplIC0gMTUgKyBpLCA4LCBtb2QsIHRydWUpXG4gICAgfVxuXG4gICAgLy8gaG9yaXpvbnRhbFxuICAgIGlmIChpIDwgOCkge1xuICAgICAgbWF0cml4LnNldCg4LCBzaXplIC0gaSAtIDEsIG1vZCwgdHJ1ZSlcbiAgICB9IGVsc2UgaWYgKGkgPCA5KSB7XG4gICAgICBtYXRyaXguc2V0KDgsIDE1IC0gaSAtIDEgKyAxLCBtb2QsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdHJpeC5zZXQoOCwgMTUgLSBpIC0gMSwgbW9kLCB0cnVlKVxuICAgIH1cbiAgfVxuXG4gIC8vIGZpeGVkIG1vZHVsZVxuICBtYXRyaXguc2V0KHNpemUgLSA4LCA4LCAxLCB0cnVlKVxufVxuXG4vKipcbiAqIEFkZCBlbmNvZGVkIGRhdGEgYml0cyB0byBtYXRyaXhcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9ICBtYXRyaXggTW9kdWxlcyBtYXRyaXhcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IGRhdGEgICBEYXRhIGNvZGV3b3Jkc1xuICovXG5mdW5jdGlvbiBzZXR1cERhdGEgKG1hdHJpeCwgZGF0YSkge1xuICBjb25zdCBzaXplID0gbWF0cml4LnNpemVcbiAgbGV0IGluYyA9IC0xXG4gIGxldCByb3cgPSBzaXplIC0gMVxuICBsZXQgYml0SW5kZXggPSA3XG4gIGxldCBieXRlSW5kZXggPSAwXG5cbiAgZm9yIChsZXQgY29sID0gc2l6ZSAtIDE7IGNvbCA+IDA7IGNvbCAtPSAyKSB7XG4gICAgaWYgKGNvbCA9PT0gNikgY29sLS1cblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBmb3IgKGxldCBjID0gMDsgYyA8IDI7IGMrKykge1xuICAgICAgICBpZiAoIW1hdHJpeC5pc1Jlc2VydmVkKHJvdywgY29sIC0gYykpIHtcbiAgICAgICAgICBsZXQgZGFyayA9IGZhbHNlXG5cbiAgICAgICAgICBpZiAoYnl0ZUluZGV4IDwgZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRhcmsgPSAoKChkYXRhW2J5dGVJbmRleF0gPj4+IGJpdEluZGV4KSAmIDEpID09PSAxKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hdHJpeC5zZXQocm93LCBjb2wgLSBjLCBkYXJrKVxuICAgICAgICAgIGJpdEluZGV4LS1cblxuICAgICAgICAgIGlmIChiaXRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGJ5dGVJbmRleCsrXG4gICAgICAgICAgICBiaXRJbmRleCA9IDdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcm93ICs9IGluY1xuXG4gICAgICBpZiAocm93IDwgMCB8fCBzaXplIDw9IHJvdykge1xuICAgICAgICByb3cgLT0gaW5jXG4gICAgICAgIGluYyA9IC1pbmNcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgZW5jb2RlZCBjb2Rld29yZHMgZnJvbSBkYXRhIGlucHV0XG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgIHZlcnNpb24gICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvblxuICogQHBhcmFtICB7RXJyb3JDb3JyZWN0aW9uTGV2ZWx9ICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtICB7Qnl0ZURhdGF9IGRhdGEgICAgICAgICAgICAgICAgIERhdGEgaW5wdXRcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9ICAgICAgICAgICAgICAgICAgICBCdWZmZXIgY29udGFpbmluZyBlbmNvZGVkIGNvZGV3b3Jkc1xuICovXG5mdW5jdGlvbiBjcmVhdGVEYXRhICh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgc2VnbWVudHMpIHtcbiAgLy8gUHJlcGFyZSBkYXRhIGJ1ZmZlclxuICBjb25zdCBidWZmZXIgPSBuZXcgQml0QnVmZmVyKClcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgLy8gcHJlZml4IGRhdGEgd2l0aCBtb2RlIGluZGljYXRvciAoNCBiaXRzKVxuICAgIGJ1ZmZlci5wdXQoZGF0YS5tb2RlLmJpdCwgNClcblxuICAgIC8vIFByZWZpeCBkYXRhIHdpdGggY2hhcmFjdGVyIGNvdW50IGluZGljYXRvci5cbiAgICAvLyBUaGUgY2hhcmFjdGVyIGNvdW50IGluZGljYXRvciBpcyBhIHN0cmluZyBvZiBiaXRzIHRoYXQgcmVwcmVzZW50cyB0aGVcbiAgICAvLyBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IGFyZSBiZWluZyBlbmNvZGVkLlxuICAgIC8vIFRoZSBjaGFyYWN0ZXIgY291bnQgaW5kaWNhdG9yIG11c3QgYmUgcGxhY2VkIGFmdGVyIHRoZSBtb2RlIGluZGljYXRvclxuICAgIC8vIGFuZCBtdXN0IGJlIGEgY2VydGFpbiBudW1iZXIgb2YgYml0cyBsb25nLCBkZXBlbmRpbmcgb24gdGhlIFFSIHZlcnNpb25cbiAgICAvLyBhbmQgZGF0YSBtb2RlXG4gICAgLy8gQHNlZSB7QGxpbmsgTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3J9LlxuICAgIGJ1ZmZlci5wdXQoZGF0YS5nZXRMZW5ndGgoKSwgTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3IoZGF0YS5tb2RlLCB2ZXJzaW9uKSlcblxuICAgIC8vIGFkZCBiaW5hcnkgZGF0YSBzZXF1ZW5jZSB0byBidWZmZXJcbiAgICBkYXRhLndyaXRlKGJ1ZmZlcilcbiAgfSlcblxuICAvLyBDYWxjdWxhdGUgcmVxdWlyZWQgbnVtYmVyIG9mIGJpdHNcbiAgY29uc3QgdG90YWxDb2Rld29yZHMgPSBVdGlscy5nZXRTeW1ib2xUb3RhbENvZGV3b3Jkcyh2ZXJzaW9uKVxuICBjb25zdCBlY1RvdGFsQ29kZXdvcmRzID0gRUNDb2RlLmdldFRvdGFsQ29kZXdvcmRzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG4gIGNvbnN0IGRhdGFUb3RhbENvZGV3b3Jkc0JpdHMgPSAodG90YWxDb2Rld29yZHMgLSBlY1RvdGFsQ29kZXdvcmRzKSAqIDhcblxuICAvLyBBZGQgYSB0ZXJtaW5hdG9yLlxuICAvLyBJZiB0aGUgYml0IHN0cmluZyBpcyBzaG9ydGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiByZXF1aXJlZCBiaXRzLFxuICAvLyBhIHRlcm1pbmF0b3Igb2YgdXAgdG8gZm91ciAwcyBtdXN0IGJlIGFkZGVkIHRvIHRoZSByaWdodCBzaWRlIG9mIHRoZSBzdHJpbmcuXG4gIC8vIElmIHRoZSBiaXQgc3RyaW5nIGlzIG1vcmUgdGhhbiBmb3VyIGJpdHMgc2hvcnRlciB0aGFuIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgYml0cyxcbiAgLy8gYWRkIGZvdXIgMHMgdG8gdGhlIGVuZC5cbiAgaWYgKGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSArIDQgPD0gZGF0YVRvdGFsQ29kZXdvcmRzQml0cykge1xuICAgIGJ1ZmZlci5wdXQoMCwgNClcbiAgfVxuXG4gIC8vIElmIHRoZSBiaXQgc3RyaW5nIGlzIGZld2VyIHRoYW4gZm91ciBiaXRzIHNob3J0ZXIsIGFkZCBvbmx5IHRoZSBudW1iZXIgb2YgMHMgdGhhdFxuICAvLyBhcmUgbmVlZGVkIHRvIHJlYWNoIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgYml0cy5cblxuICAvLyBBZnRlciBhZGRpbmcgdGhlIHRlcm1pbmF0b3IsIGlmIHRoZSBudW1iZXIgb2YgYml0cyBpbiB0aGUgc3RyaW5nIGlzIG5vdCBhIG11bHRpcGxlIG9mIDgsXG4gIC8vIHBhZCB0aGUgc3RyaW5nIG9uIHRoZSByaWdodCB3aXRoIDBzIHRvIG1ha2UgdGhlIHN0cmluZydzIGxlbmd0aCBhIG11bHRpcGxlIG9mIDguXG4gIHdoaWxlIChidWZmZXIuZ2V0TGVuZ3RoSW5CaXRzKCkgJSA4ICE9PSAwKSB7XG4gICAgYnVmZmVyLnB1dEJpdCgwKVxuICB9XG5cbiAgLy8gQWRkIHBhZCBieXRlcyBpZiB0aGUgc3RyaW5nIGlzIHN0aWxsIHNob3J0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIHJlcXVpcmVkIGJpdHMuXG4gIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHRvIGZpbGwgdGhlIGRhdGEgY2FwYWNpdHkgb2YgdGhlIHN5bWJvbCBjb3JyZXNwb25kaW5nIHRvXG4gIC8vIHRoZSBWZXJzaW9uIGFuZCBFcnJvciBDb3JyZWN0aW9uIExldmVsIGJ5IGFkZGluZyB0aGUgUGFkIENvZGV3b3JkcyAxMTEwMTEwMCAoMHhFQylcbiAgLy8gYW5kIDAwMDEwMDAxICgweDExKSBhbHRlcm5hdGVseS5cbiAgY29uc3QgcmVtYWluaW5nQnl0ZSA9IChkYXRhVG90YWxDb2Rld29yZHNCaXRzIC0gYnVmZmVyLmdldExlbmd0aEluQml0cygpKSAvIDhcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW1haW5pbmdCeXRlOyBpKyspIHtcbiAgICBidWZmZXIucHV0KGkgJSAyID8gMHgxMSA6IDB4RUMsIDgpXG4gIH1cblxuICByZXR1cm4gY3JlYXRlQ29kZXdvcmRzKGJ1ZmZlciwgdmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG59XG5cbi8qKlxuICogRW5jb2RlIGlucHV0IGRhdGEgd2l0aCBSZWVkLVNvbG9tb24gYW5kIHJldHVybiBjb2Rld29yZHMgd2l0aFxuICogcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogQHBhcmFtICB7Qml0QnVmZmVyfSBiaXRCdWZmZXIgICAgICAgICAgICBEYXRhIHRvIGVuY29kZVxuICogQHBhcmFtICB7TnVtYmVyfSAgICB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge0Vycm9yQ29ycmVjdGlvbkxldmVsfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICAgICAgICAgICAgICAgICAgIEJ1ZmZlciBjb250YWluaW5nIGVuY29kZWQgY29kZXdvcmRzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvZGV3b3JkcyAoYml0QnVmZmVyLCB2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xuICAvLyBUb3RhbCBjb2Rld29yZHMgZm9yIHRoaXMgUVIgY29kZSB2ZXJzaW9uIChEYXRhICsgRXJyb3IgY29ycmVjdGlvbilcbiAgY29uc3QgdG90YWxDb2Rld29yZHMgPSBVdGlscy5nZXRTeW1ib2xUb3RhbENvZGV3b3Jkcyh2ZXJzaW9uKVxuXG4gIC8vIFRvdGFsIG51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3Jkc1xuICBjb25zdCBlY1RvdGFsQ29kZXdvcmRzID0gRUNDb2RlLmdldFRvdGFsQ29kZXdvcmRzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG5cbiAgLy8gVG90YWwgbnVtYmVyIG9mIGRhdGEgY29kZXdvcmRzXG4gIGNvbnN0IGRhdGFUb3RhbENvZGV3b3JkcyA9IHRvdGFsQ29kZXdvcmRzIC0gZWNUb3RhbENvZGV3b3Jkc1xuXG4gIC8vIFRvdGFsIG51bWJlciBvZiBibG9ja3NcbiAgY29uc3QgZWNUb3RhbEJsb2NrcyA9IEVDQ29kZS5nZXRCbG9ja3NDb3VudCh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbClcblxuICAvLyBDYWxjdWxhdGUgaG93IG1hbnkgYmxvY2tzIGVhY2ggZ3JvdXAgc2hvdWxkIGNvbnRhaW5cbiAgY29uc3QgYmxvY2tzSW5Hcm91cDIgPSB0b3RhbENvZGV3b3JkcyAlIGVjVG90YWxCbG9ja3NcbiAgY29uc3QgYmxvY2tzSW5Hcm91cDEgPSBlY1RvdGFsQmxvY2tzIC0gYmxvY2tzSW5Hcm91cDJcblxuICBjb25zdCB0b3RhbENvZGV3b3Jkc0luR3JvdXAxID0gTWF0aC5mbG9vcih0b3RhbENvZGV3b3JkcyAvIGVjVG90YWxCbG9ja3MpXG5cbiAgY29uc3QgZGF0YUNvZGV3b3Jkc0luR3JvdXAxID0gTWF0aC5mbG9vcihkYXRhVG90YWxDb2Rld29yZHMgLyBlY1RvdGFsQmxvY2tzKVxuICBjb25zdCBkYXRhQ29kZXdvcmRzSW5Hcm91cDIgPSBkYXRhQ29kZXdvcmRzSW5Hcm91cDEgKyAxXG5cbiAgLy8gTnVtYmVyIG9mIEVDIGNvZGV3b3JkcyBpcyB0aGUgc2FtZSBmb3IgYm90aCBncm91cHNcbiAgY29uc3QgZWNDb3VudCA9IHRvdGFsQ29kZXdvcmRzSW5Hcm91cDEgLSBkYXRhQ29kZXdvcmRzSW5Hcm91cDFcblxuICAvLyBJbml0aWFsaXplIGEgUmVlZC1Tb2xvbW9uIGVuY29kZXIgd2l0aCBhIGdlbmVyYXRvciBwb2x5bm9taWFsIG9mIGRlZ3JlZSBlY0NvdW50XG4gIGNvbnN0IHJzID0gbmV3IFJlZWRTb2xvbW9uRW5jb2RlcihlY0NvdW50KVxuXG4gIGxldCBvZmZzZXQgPSAwXG4gIGNvbnN0IGRjRGF0YSA9IG5ldyBBcnJheShlY1RvdGFsQmxvY2tzKVxuICBjb25zdCBlY0RhdGEgPSBuZXcgQXJyYXkoZWNUb3RhbEJsb2NrcylcbiAgbGV0IG1heERhdGFTaXplID0gMFxuICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShiaXRCdWZmZXIuYnVmZmVyKVxuXG4gIC8vIERpdmlkZSB0aGUgYnVmZmVyIGludG8gdGhlIHJlcXVpcmVkIG51bWJlciBvZiBibG9ja3NcbiAgZm9yIChsZXQgYiA9IDA7IGIgPCBlY1RvdGFsQmxvY2tzOyBiKyspIHtcbiAgICBjb25zdCBkYXRhU2l6ZSA9IGIgPCBibG9ja3NJbkdyb3VwMSA/IGRhdGFDb2Rld29yZHNJbkdyb3VwMSA6IGRhdGFDb2Rld29yZHNJbkdyb3VwMlxuXG4gICAgLy8gZXh0cmFjdCBhIGJsb2NrIG9mIGRhdGEgZnJvbSBidWZmZXJcbiAgICBkY0RhdGFbYl0gPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBkYXRhU2l6ZSlcblxuICAgIC8vIENhbGN1bGF0ZSBFQyBjb2Rld29yZHMgZm9yIHRoaXMgZGF0YSBibG9ja1xuICAgIGVjRGF0YVtiXSA9IHJzLmVuY29kZShkY0RhdGFbYl0pXG5cbiAgICBvZmZzZXQgKz0gZGF0YVNpemVcbiAgICBtYXhEYXRhU2l6ZSA9IE1hdGgubWF4KG1heERhdGFTaXplLCBkYXRhU2l6ZSlcbiAgfVxuXG4gIC8vIENyZWF0ZSBmaW5hbCBkYXRhXG4gIC8vIEludGVybGVhdmUgdGhlIGRhdGEgYW5kIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzIGZyb20gZWFjaCBibG9ja1xuICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodG90YWxDb2Rld29yZHMpXG4gIGxldCBpbmRleCA9IDBcbiAgbGV0IGksIHJcblxuICAvLyBBZGQgZGF0YSBjb2Rld29yZHNcbiAgZm9yIChpID0gMDsgaSA8IG1heERhdGFTaXplOyBpKyspIHtcbiAgICBmb3IgKHIgPSAwOyByIDwgZWNUb3RhbEJsb2NrczsgcisrKSB7XG4gICAgICBpZiAoaSA8IGRjRGF0YVtyXS5sZW5ndGgpIHtcbiAgICAgICAgZGF0YVtpbmRleCsrXSA9IGRjRGF0YVtyXVtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFwcGVkIEVDIGNvZGV3b3Jkc1xuICBmb3IgKGkgPSAwOyBpIDwgZWNDb3VudDsgaSsrKSB7XG4gICAgZm9yIChyID0gMDsgciA8IGVjVG90YWxCbG9ja3M7IHIrKykge1xuICAgICAgZGF0YVtpbmRleCsrXSA9IGVjRGF0YVtyXVtpXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhXG59XG5cbi8qKlxuICogQnVpbGQgUVIgQ29kZSBzeW1ib2xcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGEgICAgICAgICAgICAgICAgIElucHV0IHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge0Vycm9yQ29ycmV0aW9uTGV2ZWx9IGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGxldmVsXG4gKiBAcGFyYW0gIHtNYXNrUGF0dGVybn0gbWFza1BhdHRlcm4gICAgIE1hc2sgcGF0dGVyblxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgICBPYmplY3QgY29udGFpbmluZyBzeW1ib2wgZGF0YVxuICovXG5mdW5jdGlvbiBjcmVhdGVTeW1ib2wgKGRhdGEsIHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrUGF0dGVybikge1xuICBsZXQgc2VnbWVudHNcblxuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgIHNlZ21lbnRzID0gU2VnbWVudHMuZnJvbUFycmF5KGRhdGEpXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IGVzdGltYXRlZFZlcnNpb24gPSB2ZXJzaW9uXG5cbiAgICBpZiAoIWVzdGltYXRlZFZlcnNpb24pIHtcbiAgICAgIGNvbnN0IHJhd1NlZ21lbnRzID0gU2VnbWVudHMucmF3U3BsaXQoZGF0YSlcblxuICAgICAgLy8gRXN0aW1hdGUgYmVzdCB2ZXJzaW9uIHRoYXQgY2FuIGNvbnRhaW4gcmF3IHNwbGl0dGVkIHNlZ21lbnRzXG4gICAgICBlc3RpbWF0ZWRWZXJzaW9uID0gVmVyc2lvbi5nZXRCZXN0VmVyc2lvbkZvckRhdGEocmF3U2VnbWVudHMsIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuICAgIH1cblxuICAgIC8vIEJ1aWxkIG9wdGltaXplZCBzZWdtZW50c1xuICAgIC8vIElmIGVzdGltYXRlZCB2ZXJzaW9uIGlzIHVuZGVmaW5lZCwgdHJ5IHdpdGggdGhlIGhpZ2hlc3QgdmVyc2lvblxuICAgIHNlZ21lbnRzID0gU2VnbWVudHMuZnJvbVN0cmluZyhkYXRhLCBlc3RpbWF0ZWRWZXJzaW9uIHx8IDQwKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkYXRhJylcbiAgfVxuXG4gIC8vIEdldCB0aGUgbWluIHZlcnNpb24gdGhhdCBjYW4gY29udGFpbiBkYXRhXG4gIGNvbnN0IGJlc3RWZXJzaW9uID0gVmVyc2lvbi5nZXRCZXN0VmVyc2lvbkZvckRhdGEoc2VnbWVudHMsIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuXG4gIC8vIElmIG5vIHZlcnNpb24gaXMgZm91bmQsIGRhdGEgY2Fubm90IGJlIHN0b3JlZFxuICBpZiAoIWJlc3RWZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYW1vdW50IG9mIGRhdGEgaXMgdG9vIGJpZyB0byBiZSBzdG9yZWQgaW4gYSBRUiBDb2RlJylcbiAgfVxuXG4gIC8vIElmIG5vdCBzcGVjaWZpZWQsIHVzZSBtaW4gdmVyc2lvbiBhcyBkZWZhdWx0XG4gIGlmICghdmVyc2lvbikge1xuICAgIHZlcnNpb24gPSBiZXN0VmVyc2lvblxuXG4gIC8vIENoZWNrIGlmIHRoZSBzcGVjaWZpZWQgdmVyc2lvbiBjYW4gY29udGFpbiB0aGUgZGF0YVxuICB9IGVsc2UgaWYgKHZlcnNpb24gPCBiZXN0VmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignXFxuJyArXG4gICAgICAnVGhlIGNob3NlbiBRUiBDb2RlIHZlcnNpb24gY2Fubm90IGNvbnRhaW4gdGhpcyBhbW91bnQgb2YgZGF0YS5cXG4nICtcbiAgICAgICdNaW5pbXVtIHZlcnNpb24gcmVxdWlyZWQgdG8gc3RvcmUgY3VycmVudCBkYXRhIGlzOiAnICsgYmVzdFZlcnNpb24gKyAnLlxcbidcbiAgICApXG4gIH1cblxuICBjb25zdCBkYXRhQml0cyA9IGNyZWF0ZURhdGEodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIHNlZ21lbnRzKVxuXG4gIC8vIEFsbG9jYXRlIG1hdHJpeCBidWZmZXJcbiAgY29uc3QgbW9kdWxlQ291bnQgPSBVdGlscy5nZXRTeW1ib2xTaXplKHZlcnNpb24pXG4gIGNvbnN0IG1vZHVsZXMgPSBuZXcgQml0TWF0cml4KG1vZHVsZUNvdW50KVxuXG4gIC8vIEFkZCBmdW5jdGlvbiBtb2R1bGVzXG4gIHNldHVwRmluZGVyUGF0dGVybihtb2R1bGVzLCB2ZXJzaW9uKVxuICBzZXR1cFRpbWluZ1BhdHRlcm4obW9kdWxlcylcbiAgc2V0dXBBbGlnbm1lbnRQYXR0ZXJuKG1vZHVsZXMsIHZlcnNpb24pXG5cbiAgLy8gQWRkIHRlbXBvcmFyeSBkdW1teSBiaXRzIGZvciBmb3JtYXQgaW5mbyBqdXN0IHRvIHNldCB0aGVtIGFzIHJlc2VydmVkLlxuICAvLyBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50IHRoZXNlIGJpdHMgZnJvbSBiZWluZyBtYXNrZWQgYnkge0BsaW5rIE1hc2tQYXR0ZXJuLmFwcGx5TWFza31cbiAgLy8gc2luY2UgdGhlIG1hc2tpbmcgb3BlcmF0aW9uIG11c3QgYmUgcGVyZm9ybWVkIG9ubHkgb24gdGhlIGVuY29kaW5nIHJlZ2lvbi5cbiAgLy8gVGhlc2UgYmxvY2tzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBjb3JyZWN0IHZhbHVlcyBsYXRlciBpbiBjb2RlLlxuICBzZXR1cEZvcm1hdEluZm8obW9kdWxlcywgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIDApXG5cbiAgaWYgKHZlcnNpb24gPj0gNykge1xuICAgIHNldHVwVmVyc2lvbkluZm8obW9kdWxlcywgdmVyc2lvbilcbiAgfVxuXG4gIC8vIEFkZCBkYXRhIGNvZGV3b3Jkc1xuICBzZXR1cERhdGEobW9kdWxlcywgZGF0YUJpdHMpXG5cbiAgaWYgKGlzTmFOKG1hc2tQYXR0ZXJuKSkge1xuICAgIC8vIEZpbmQgYmVzdCBtYXNrIHBhdHRlcm5cbiAgICBtYXNrUGF0dGVybiA9IE1hc2tQYXR0ZXJuLmdldEJlc3RNYXNrKG1vZHVsZXMsXG4gICAgICBzZXR1cEZvcm1hdEluZm8uYmluZChudWxsLCBtb2R1bGVzLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkpXG4gIH1cblxuICAvLyBBcHBseSBtYXNrIHBhdHRlcm5cbiAgTWFza1BhdHRlcm4uYXBwbHlNYXNrKG1hc2tQYXR0ZXJuLCBtb2R1bGVzKVxuXG4gIC8vIFJlcGxhY2UgZm9ybWF0IGluZm8gYml0cyB3aXRoIGNvcnJlY3QgdmFsdWVzXG4gIHNldHVwRm9ybWF0SW5mbyhtb2R1bGVzLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFza1BhdHRlcm4pXG5cbiAgcmV0dXJuIHtcbiAgICBtb2R1bGVzOiBtb2R1bGVzLFxuICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWw6IGVycm9yQ29ycmVjdGlvbkxldmVsLFxuICAgIG1hc2tQYXR0ZXJuOiBtYXNrUGF0dGVybixcbiAgICBzZWdtZW50czogc2VnbWVudHNcbiAgfVxufVxuXG4vKipcbiAqIFFSIENvZGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZyB8IEFycmF5fSBkYXRhICAgICAgICAgICAgICAgICBJbnB1dCBkYXRhXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAgICAgICAgICAgICAgICAgICAgICBPcHRpb25hbCBjb25maWd1cmF0aW9uc1xuICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMudmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5lcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnRvU0pJU0Z1bmMgICAgICAgICBIZWxwZXIgZnVuYyB0byBjb252ZXJ0IHV0ZjggdG8gc2ppc1xuICovXG5leHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAoZGF0YSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnIHx8IGRhdGEgPT09ICcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbnB1dCB0ZXh0JylcbiAgfVxuXG4gIGxldCBlcnJvckNvcnJlY3Rpb25MZXZlbCA9IEVDTGV2ZWwuTVxuICBsZXQgdmVyc2lvblxuICBsZXQgbWFza1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBVc2UgaGlnaGVyIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwgYXMgZGVmYXVsdFxuICAgIGVycm9yQ29ycmVjdGlvbkxldmVsID0gRUNMZXZlbC5mcm9tKG9wdGlvbnMuZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIEVDTGV2ZWwuTSlcbiAgICB2ZXJzaW9uID0gVmVyc2lvbi5mcm9tKG9wdGlvbnMudmVyc2lvbilcbiAgICBtYXNrID0gTWFza1BhdHRlcm4uZnJvbShvcHRpb25zLm1hc2tQYXR0ZXJuKVxuXG4gICAgaWYgKG9wdGlvbnMudG9TSklTRnVuYykge1xuICAgICAgVXRpbHMuc2V0VG9TSklTRnVuY3Rpb24ob3B0aW9ucy50b1NKSVNGdW5jKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjcmVhdGVTeW1ib2woZGF0YSwgdmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2spXG59XG4iLCJjb25zdCBQb2x5bm9taWFsID0gcmVxdWlyZSgnLi9wb2x5bm9taWFsJylcblxuZnVuY3Rpb24gUmVlZFNvbG9tb25FbmNvZGVyIChkZWdyZWUpIHtcbiAgdGhpcy5nZW5Qb2x5ID0gdW5kZWZpbmVkXG4gIHRoaXMuZGVncmVlID0gZGVncmVlXG5cbiAgaWYgKHRoaXMuZGVncmVlKSB0aGlzLmluaXRpYWxpemUodGhpcy5kZWdyZWUpXG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZW5jb2Rlci5cbiAqIFRoZSBpbnB1dCBwYXJhbSBzaG91bGQgY29ycmVzcG9uZCB0byB0aGUgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIGluaXRpYWxpemUgKGRlZ3JlZSkge1xuICAvLyBjcmVhdGUgYW4gaXJyZWR1Y2libGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAgdGhpcy5kZWdyZWUgPSBkZWdyZWVcbiAgdGhpcy5nZW5Qb2x5ID0gUG9seW5vbWlhbC5nZW5lcmF0ZUVDUG9seW5vbWlhbCh0aGlzLmRlZ3JlZSlcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgY2h1bmsgb2YgZGF0YVxuICpcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IGRhdGEgQnVmZmVyIGNvbnRhaW5pbmcgaW5wdXQgZGF0YVxuICogQHJldHVybiB7VWludDhBcnJheX0gICAgICBCdWZmZXIgY29udGFpbmluZyBlbmNvZGVkIGRhdGFcbiAqL1xuUmVlZFNvbG9tb25FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUgKGRhdGEpIHtcbiAgaWYgKCF0aGlzLmdlblBvbHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuY29kZXIgbm90IGluaXRpYWxpemVkJylcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBFQyBmb3IgdGhpcyBkYXRhIGJsb2NrXG4gIC8vIGV4dGVuZHMgZGF0YSBzaXplIHRvIGRhdGErZ2VuUG9seSBzaXplXG4gIGNvbnN0IHBhZGRlZERhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIHRoaXMuZGVncmVlKVxuICBwYWRkZWREYXRhLnNldChkYXRhKVxuXG4gIC8vIFRoZSBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyBhcmUgdGhlIHJlbWFpbmRlciBhZnRlciBkaXZpZGluZyB0aGUgZGF0YSBjb2Rld29yZHNcbiAgLy8gYnkgYSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICBjb25zdCByZW1haW5kZXIgPSBQb2x5bm9taWFsLm1vZChwYWRkZWREYXRhLCB0aGlzLmdlblBvbHkpXG5cbiAgLy8gcmV0dXJuIEVDIGRhdGEgYmxvY2tzIChsYXN0IG4gYnl0ZSwgd2hlcmUgbiBpcyB0aGUgZGVncmVlIG9mIGdlblBvbHkpXG4gIC8vIElmIGNvZWZmaWNpZW50cyBudW1iZXIgaW4gcmVtYWluZGVyIGFyZSBsZXNzIHRoYW4gZ2VuUG9seSBkZWdyZWUsXG4gIC8vIHBhZCB3aXRoIDBzIHRvIHRoZSBsZWZ0IHRvIHJlYWNoIHRoZSBuZWVkZWQgbnVtYmVyIG9mIGNvZWZmaWNpZW50c1xuICBjb25zdCBzdGFydCA9IHRoaXMuZGVncmVlIC0gcmVtYWluZGVyLmxlbmd0aFxuICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgY29uc3QgYnVmZiA9IG5ldyBVaW50OEFycmF5KHRoaXMuZGVncmVlKVxuICAgIGJ1ZmYuc2V0KHJlbWFpbmRlciwgc3RhcnQpXG5cbiAgICByZXR1cm4gYnVmZlxuICB9XG5cbiAgcmV0dXJuIHJlbWFpbmRlclxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZWRTb2xvbW9uRW5jb2RlclxuIiwiY29uc3QgbnVtZXJpYyA9ICdbMC05XSsnXG5jb25zdCBhbHBoYW51bWVyaWMgPSAnW0EtWiAkJSorXFxcXC0uLzpdKydcbmxldCBrYW5qaSA9ICcoPzpbdTMwMDAtdTMwM0ZdfFt1MzA0MC11MzA5Rl18W3UzMEEwLXUzMEZGXXwnICtcbiAgJ1t1RkYwMC11RkZFRl18W3U0RTAwLXU5RkFGXXxbdTI2MDUtdTI2MDZdfFt1MjE5MC11MjE5NV18dTIwM0J8JyArXG4gICdbdTIwMTB1MjAxNXUyMDE4dTIwMTl1MjAyNXUyMDI2dTIwMUN1MjAxRHUyMjI1dTIyNjBdfCcgK1xuICAnW3UwMzkxLXUwNDUxXXxbdTAwQTd1MDBBOHUwMEIxdTAwQjR1MDBEN3UwMEY3XSkrJ1xua2FuamkgPSBrYW5qaS5yZXBsYWNlKC91L2csICdcXFxcdScpXG5cbmNvbnN0IGJ5dGUgPSAnKD86KD8hW0EtWjAtOSAkJSorXFxcXC0uLzpdfCcgKyBrYW5qaSArICcpKD86LnxbXFxyXFxuXSkpKydcblxuZXhwb3J0cy5LQU5KSSA9IG5ldyBSZWdFeHAoa2FuamksICdnJylcbmV4cG9ydHMuQllURV9LQU5KSSA9IG5ldyBSZWdFeHAoJ1teQS1aMC05ICQlKitcXFxcLS4vOl0rJywgJ2cnKVxuZXhwb3J0cy5CWVRFID0gbmV3IFJlZ0V4cChieXRlLCAnZycpXG5leHBvcnRzLk5VTUVSSUMgPSBuZXcgUmVnRXhwKG51bWVyaWMsICdnJylcbmV4cG9ydHMuQUxQSEFOVU1FUklDID0gbmV3IFJlZ0V4cChhbHBoYW51bWVyaWMsICdnJylcblxuY29uc3QgVEVTVF9LQU5KSSA9IG5ldyBSZWdFeHAoJ14nICsga2FuamkgKyAnJCcpXG5jb25zdCBURVNUX05VTUVSSUMgPSBuZXcgUmVnRXhwKCdeJyArIG51bWVyaWMgKyAnJCcpXG5jb25zdCBURVNUX0FMUEhBTlVNRVJJQyA9IG5ldyBSZWdFeHAoJ15bQS1aMC05ICQlKitcXFxcLS4vOl0rJCcpXG5cbmV4cG9ydHMudGVzdEthbmppID0gZnVuY3Rpb24gdGVzdEthbmppIChzdHIpIHtcbiAgcmV0dXJuIFRFU1RfS0FOSkkudGVzdChzdHIpXG59XG5cbmV4cG9ydHMudGVzdE51bWVyaWMgPSBmdW5jdGlvbiB0ZXN0TnVtZXJpYyAoc3RyKSB7XG4gIHJldHVybiBURVNUX05VTUVSSUMudGVzdChzdHIpXG59XG5cbmV4cG9ydHMudGVzdEFscGhhbnVtZXJpYyA9IGZ1bmN0aW9uIHRlc3RBbHBoYW51bWVyaWMgKHN0cikge1xuICByZXR1cm4gVEVTVF9BTFBIQU5VTUVSSUMudGVzdChzdHIpXG59XG4iLCJjb25zdCBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcbmNvbnN0IE51bWVyaWNEYXRhID0gcmVxdWlyZSgnLi9udW1lcmljLWRhdGEnKVxuY29uc3QgQWxwaGFudW1lcmljRGF0YSA9IHJlcXVpcmUoJy4vYWxwaGFudW1lcmljLWRhdGEnKVxuY29uc3QgQnl0ZURhdGEgPSByZXF1aXJlKCcuL2J5dGUtZGF0YScpXG5jb25zdCBLYW5qaURhdGEgPSByZXF1aXJlKCcuL2thbmppLWRhdGEnKVxuY29uc3QgUmVnZXggPSByZXF1aXJlKCcuL3JlZ2V4JylcbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5jb25zdCBkaWprc3RyYSA9IHJlcXVpcmUoJ2RpamtzdHJhanMnKVxuXG4vKipcbiAqIFJldHVybnMgVVRGOCBieXRlIGxlbmd0aFxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyIElucHV0IHN0cmluZ1xuICogQHJldHVybiB7TnVtYmVyfSAgICAgTnVtYmVyIG9mIGJ5dGVcbiAqL1xuZnVuY3Rpb24gZ2V0U3RyaW5nQnl0ZUxlbmd0aCAoc3RyKSB7XG4gIHJldHVybiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkubGVuZ3RoXG59XG5cbi8qKlxuICogR2V0IGEgbGlzdCBvZiBzZWdtZW50cyBvZiB0aGUgc3BlY2lmaWVkIG1vZGVcbiAqIGZyb20gYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gIHtNb2RlfSAgIG1vZGUgU2VnbWVudCBtb2RlXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0ciAgU3RyaW5nIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKi9cbmZ1bmN0aW9uIGdldFNlZ21lbnRzIChyZWdleCwgbW9kZSwgc3RyKSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gW11cbiAgbGV0IHJlc3VsdFxuXG4gIHdoaWxlICgocmVzdWx0ID0gcmVnZXguZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgZGF0YTogcmVzdWx0WzBdLFxuICAgICAgaW5kZXg6IHJlc3VsdC5pbmRleCxcbiAgICAgIG1vZGU6IG1vZGUsXG4gICAgICBsZW5ndGg6IHJlc3VsdFswXS5sZW5ndGhcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzXG59XG5cbi8qKlxuICogRXh0cmFjdHMgYSBzZXJpZXMgb2Ygc2VnbWVudHMgd2l0aCB0aGUgYXBwcm9wcmlhdGVcbiAqIG1vZGVzIGZyb20gYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGFTdHIgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBnZXRTZWdtZW50c0Zyb21TdHJpbmcgKGRhdGFTdHIpIHtcbiAgY29uc3QgbnVtU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4Lk5VTUVSSUMsIE1vZGUuTlVNRVJJQywgZGF0YVN0cilcbiAgY29uc3QgYWxwaGFOdW1TZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguQUxQSEFOVU1FUklDLCBNb2RlLkFMUEhBTlVNRVJJQywgZGF0YVN0cilcbiAgbGV0IGJ5dGVTZWdzXG4gIGxldCBrYW5qaVNlZ3NcblxuICBpZiAoVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpIHtcbiAgICBieXRlU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4LkJZVEUsIE1vZGUuQllURSwgZGF0YVN0cilcbiAgICBrYW5qaVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5LQU5KSSwgTW9kZS5LQU5KSSwgZGF0YVN0cilcbiAgfSBlbHNlIHtcbiAgICBieXRlU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4LkJZVEVfS0FOSkksIE1vZGUuQllURSwgZGF0YVN0cilcbiAgICBrYW5qaVNlZ3MgPSBbXVxuICB9XG5cbiAgY29uc3Qgc2VncyA9IG51bVNlZ3MuY29uY2F0KGFscGhhTnVtU2VncywgYnl0ZVNlZ3MsIGthbmppU2VncylcblxuICByZXR1cm4gc2Vnc1xuICAgIC5zb3J0KGZ1bmN0aW9uIChzMSwgczIpIHtcbiAgICAgIHJldHVybiBzMS5pbmRleCAtIHMyLmluZGV4XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IG9iai5kYXRhLFxuICAgICAgICBtb2RlOiBvYmoubW9kZSxcbiAgICAgICAgbGVuZ3RoOiBvYmoubGVuZ3RoXG4gICAgICB9XG4gICAgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGhvdyBtYW55IGJpdHMgYXJlIG5lZWRlZCB0byBlbmNvZGUgYSBzdHJpbmcgb2ZcbiAqIHNwZWNpZmllZCBsZW5ndGggd2l0aCB0aGUgc3BlY2lmaWVkIG1vZGVcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGxlbmd0aCBTdHJpbmcgbGVuZ3RoXG4gKiBAcGFyYW0gIHtNb2RlfSBtb2RlICAgICBTZWdtZW50IG1vZGVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgIEJpdCBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gZ2V0U2VnbWVudEJpdHNMZW5ndGggKGxlbmd0aCwgbW9kZSkge1xuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgIHJldHVybiBOdW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgcmV0dXJuIEFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aChsZW5ndGgpXG4gICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgcmV0dXJuIEthbmppRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgICBjYXNlIE1vZGUuQllURTpcbiAgICAgIHJldHVybiBCeXRlRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlcyBhZGphY2VudCBzZWdtZW50cyB3aGljaCBoYXZlIHRoZSBzYW1lIG1vZGVcbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gc2VncyBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlU2VnbWVudHMgKHNlZ3MpIHtcbiAgcmV0dXJuIHNlZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgICBjb25zdCBwcmV2U2VnID0gYWNjLmxlbmd0aCAtIDEgPj0gMCA/IGFjY1thY2MubGVuZ3RoIC0gMV0gOiBudWxsXG4gICAgaWYgKHByZXZTZWcgJiYgcHJldlNlZy5tb2RlID09PSBjdXJyLm1vZGUpIHtcbiAgICAgIGFjY1thY2MubGVuZ3RoIC0gMV0uZGF0YSArPSBjdXJyLmRhdGFcbiAgICAgIHJldHVybiBhY2NcbiAgICB9XG5cbiAgICBhY2MucHVzaChjdXJyKVxuICAgIHJldHVybiBhY2NcbiAgfSwgW10pXG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgbGlzdCBvZiBhbGwgcG9zc2libGUgbm9kZXMgY29tYmluYXRpb24gd2hpY2hcbiAqIHdpbGwgYmUgdXNlZCB0byBidWlsZCBhIHNlZ21lbnRzIGdyYXBoLlxuICpcbiAqIE5vZGVzIGFyZSBkaXZpZGVkIGJ5IGdyb3Vwcy4gRWFjaCBncm91cCB3aWxsIGNvbnRhaW4gYSBsaXN0IG9mIGFsbCB0aGUgbW9kZXNcbiAqIGluIHdoaWNoIGlzIHBvc3NpYmxlIHRvIGVuY29kZSB0aGUgZ2l2ZW4gdGV4dC5cbiAqXG4gKiBGb3IgZXhhbXBsZSB0aGUgdGV4dCAnMTIzNDUnIGNhbiBiZSBlbmNvZGVkIGFzIE51bWVyaWMsIEFscGhhbnVtZXJpYyBvciBCeXRlLlxuICogVGhlIGdyb3VwIGZvciAnMTIzNDUnIHdpbGwgY29udGFpbiB0aGVuIDMgb2JqZWN0cywgb25lIGZvciBlYWNoXG4gKiBwb3NzaWJsZSBlbmNvZGluZyBtb2RlLlxuICpcbiAqIEVhY2ggbm9kZSByZXByZXNlbnRzIGEgcG9zc2libGUgc2VnbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gc2VncyBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTm9kZXMgKHNlZ3MpIHtcbiAgY29uc3Qgbm9kZXMgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzZWcgPSBzZWdzW2ldXG5cbiAgICBzd2l0Y2ggKHNlZy5tb2RlKSB7XG4gICAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgICAgbm9kZXMucHVzaChbc2VnLFxuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQUxQSEFOVU1FUklDLCBsZW5ndGg6IHNlZy5sZW5ndGggfSxcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogc2VnLmxlbmd0aCB9XG4gICAgICAgIF0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgICBub2Rlcy5wdXNoKFtzZWcsXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5CWVRFLCBsZW5ndGg6IHNlZy5sZW5ndGggfVxuICAgICAgICBdKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgICBub2Rlcy5wdXNoKFtzZWcsXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5CWVRFLCBsZW5ndGg6IGdldFN0cmluZ0J5dGVMZW5ndGgoc2VnLmRhdGEpIH1cbiAgICAgICAgXSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgTW9kZS5CWVRFOlxuICAgICAgICBub2Rlcy5wdXNoKFtcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogZ2V0U3RyaW5nQnl0ZUxlbmd0aChzZWcuZGF0YSkgfVxuICAgICAgICBdKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub2Rlc1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhIGdyYXBoIGZyb20gYSBsaXN0IG9mIG5vZGVzLlxuICogQWxsIHNlZ21lbnRzIGluIGVhY2ggbm9kZSBncm91cCB3aWxsIGJlIGNvbm5lY3RlZCB3aXRoIGFsbCB0aGUgc2VnbWVudHMgb2ZcbiAqIHRoZSBuZXh0IGdyb3VwIGFuZCBzbyBvbi5cbiAqXG4gKiBBdCBlYWNoIGNvbm5lY3Rpb24gd2lsbCBiZSBhc3NpZ25lZCBhIHdlaWdodCBkZXBlbmRpbmcgb24gdGhlXG4gKiBzZWdtZW50J3MgYnl0ZSBsZW5ndGguXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IG5vZGVzICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICBHcmFwaCBvZiBhbGwgcG9zc2libGUgc2VnbWVudHNcbiAqL1xuZnVuY3Rpb24gYnVpbGRHcmFwaCAobm9kZXMsIHZlcnNpb24pIHtcbiAgY29uc3QgdGFibGUgPSB7fVxuICBjb25zdCBncmFwaCA9IHsgc3RhcnQ6IHt9IH1cbiAgbGV0IHByZXZOb2RlSWRzID0gWydzdGFydCddXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG5vZGVHcm91cCA9IG5vZGVzW2ldXG4gICAgY29uc3QgY3VycmVudE5vZGVJZHMgPSBbXVxuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBub2RlR3JvdXAubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlR3JvdXBbal1cbiAgICAgIGNvbnN0IGtleSA9ICcnICsgaSArIGpcblxuICAgICAgY3VycmVudE5vZGVJZHMucHVzaChrZXkpXG4gICAgICB0YWJsZVtrZXldID0geyBub2RlOiBub2RlLCBsYXN0Q291bnQ6IDAgfVxuICAgICAgZ3JhcGhba2V5XSA9IHt9XG5cbiAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgcHJldk5vZGVJZHMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgY29uc3QgcHJldk5vZGVJZCA9IHByZXZOb2RlSWRzW25dXG5cbiAgICAgICAgaWYgKHRhYmxlW3ByZXZOb2RlSWRdICYmIHRhYmxlW3ByZXZOb2RlSWRdLm5vZGUubW9kZSA9PT0gbm9kZS5tb2RlKSB7XG4gICAgICAgICAgZ3JhcGhbcHJldk5vZGVJZF1ba2V5XSA9XG4gICAgICAgICAgICBnZXRTZWdtZW50Qml0c0xlbmd0aCh0YWJsZVtwcmV2Tm9kZUlkXS5sYXN0Q291bnQgKyBub2RlLmxlbmd0aCwgbm9kZS5tb2RlKSAtXG4gICAgICAgICAgICBnZXRTZWdtZW50Qml0c0xlbmd0aCh0YWJsZVtwcmV2Tm9kZUlkXS5sYXN0Q291bnQsIG5vZGUubW9kZSlcblxuICAgICAgICAgIHRhYmxlW3ByZXZOb2RlSWRdLmxhc3RDb3VudCArPSBub2RlLmxlbmd0aFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0YWJsZVtwcmV2Tm9kZUlkXSkgdGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50ID0gbm9kZS5sZW5ndGhcblxuICAgICAgICAgIGdyYXBoW3ByZXZOb2RlSWRdW2tleV0gPSBnZXRTZWdtZW50Qml0c0xlbmd0aChub2RlLmxlbmd0aCwgbm9kZS5tb2RlKSArXG4gICAgICAgICAgICA0ICsgTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3Iobm9kZS5tb2RlLCB2ZXJzaW9uKSAvLyBzd2l0Y2ggY29zdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJldk5vZGVJZHMgPSBjdXJyZW50Tm9kZUlkc1xuICB9XG5cbiAgZm9yIChsZXQgbiA9IDA7IG4gPCBwcmV2Tm9kZUlkcy5sZW5ndGg7IG4rKykge1xuICAgIGdyYXBoW3ByZXZOb2RlSWRzW25dXS5lbmQgPSAwXG4gIH1cblxuICByZXR1cm4geyBtYXA6IGdyYXBoLCB0YWJsZTogdGFibGUgfVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhIHNlZ21lbnQgZnJvbSBhIHNwZWNpZmllZCBkYXRhIGFuZCBtb2RlLlxuICogSWYgYSBtb2RlIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBtb3JlIHN1aXRhYmxlIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGEgICAgICAgICAgICAgSW5wdXQgZGF0YVxuICogQHBhcmFtICB7TW9kZSB8IFN0cmluZ30gbW9kZXNIaW50IERhdGEgbW9kZVxuICogQHJldHVybiB7U2VnbWVudH0gICAgICAgICAgICAgICAgIFNlZ21lbnRcbiAqL1xuZnVuY3Rpb24gYnVpbGRTaW5nbGVTZWdtZW50IChkYXRhLCBtb2Rlc0hpbnQpIHtcbiAgbGV0IG1vZGVcbiAgY29uc3QgYmVzdE1vZGUgPSBNb2RlLmdldEJlc3RNb2RlRm9yRGF0YShkYXRhKVxuXG4gIG1vZGUgPSBNb2RlLmZyb20obW9kZXNIaW50LCBiZXN0TW9kZSlcblxuICAvLyBNYWtlIHN1cmUgZGF0YSBjYW4gYmUgZW5jb2RlZFxuICBpZiAobW9kZSAhPT0gTW9kZS5CWVRFICYmIG1vZGUuYml0IDwgYmVzdE1vZGUuYml0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBkYXRhICsgJ1wiJyArXG4gICAgICAnIGNhbm5vdCBiZSBlbmNvZGVkIHdpdGggbW9kZSAnICsgTW9kZS50b1N0cmluZyhtb2RlKSArXG4gICAgICAnLlxcbiBTdWdnZXN0ZWQgbW9kZSBpczogJyArIE1vZGUudG9TdHJpbmcoYmVzdE1vZGUpKVxuICB9XG5cbiAgLy8gVXNlIE1vZGUuQllURSBpZiBLYW5qaSBzdXBwb3J0IGlzIGRpc2FibGVkXG4gIGlmIChtb2RlID09PSBNb2RlLktBTkpJICYmICFVdGlscy5pc0thbmppTW9kZUVuYWJsZWQoKSkge1xuICAgIG1vZGUgPSBNb2RlLkJZVEVcbiAgfVxuXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgTW9kZS5OVU1FUklDOlxuICAgICAgcmV0dXJuIG5ldyBOdW1lcmljRGF0YShkYXRhKVxuXG4gICAgY2FzZSBNb2RlLkFMUEhBTlVNRVJJQzpcbiAgICAgIHJldHVybiBuZXcgQWxwaGFudW1lcmljRGF0YShkYXRhKVxuXG4gICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgcmV0dXJuIG5ldyBLYW5qaURhdGEoZGF0YSlcblxuICAgIGNhc2UgTW9kZS5CWVRFOlxuICAgICAgcmV0dXJuIG5ldyBCeXRlRGF0YShkYXRhKVxuICB9XG59XG5cbi8qKlxuICogQnVpbGRzIGEgbGlzdCBvZiBzZWdtZW50cyBmcm9tIGFuIGFycmF5LlxuICogQXJyYXkgY2FuIGNvbnRhaW4gU3RyaW5ncyBvciBPYmplY3RzIHdpdGggc2VnbWVudCdzIGluZm8uXG4gKlxuICogRm9yIGVhY2ggaXRlbSB3aGljaCBpcyBhIHN0cmluZywgd2lsbCBiZSBnZW5lcmF0ZWQgYSBzZWdtZW50IHdpdGggdGhlIGdpdmVuXG4gKiBzdHJpbmcgYW5kIHRoZSBtb3JlIGFwcHJvcHJpYXRlIGVuY29kaW5nIG1vZGUuXG4gKlxuICogRm9yIGVhY2ggaXRlbSB3aGljaCBpcyBhbiBvYmplY3QsIHdpbGwgYmUgZ2VuZXJhdGVkIGEgc2VnbWVudCB3aXRoIHRoZSBnaXZlblxuICogZGF0YSBhbmQgbW9kZS5cbiAqIE9iamVjdHMgbXVzdCBjb250YWluIGF0IGxlYXN0IHRoZSBwcm9wZXJ0eSBcImRhdGFcIi5cbiAqIElmIHByb3BlcnR5IFwibW9kZVwiIGlzIG5vdCBwcmVzZW50LCB0aGUgbW9yZSBzdWl0YWJsZSBtb2RlIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyYXkgQXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICBBcnJheSBvZiBTZWdtZW50c1xuICovXG5leHBvcnRzLmZyb21BcnJheSA9IGZ1bmN0aW9uIGZyb21BcnJheSAoYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzZWcpIHtcbiAgICBpZiAodHlwZW9mIHNlZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFjYy5wdXNoKGJ1aWxkU2luZ2xlU2VnbWVudChzZWcsIG51bGwpKVxuICAgIH0gZWxzZSBpZiAoc2VnLmRhdGEpIHtcbiAgICAgIGFjYy5wdXNoKGJ1aWxkU2luZ2xlU2VnbWVudChzZWcuZGF0YSwgc2VnLm1vZGUpKVxuICAgIH1cblxuICAgIHJldHVybiBhY2NcbiAgfSwgW10pXG59XG5cbi8qKlxuICogQnVpbGRzIGFuIG9wdGltaXplZCBzZXF1ZW5jZSBvZiBzZWdtZW50cyBmcm9tIGEgc3RyaW5nLFxuICogd2hpY2ggd2lsbCBwcm9kdWNlIHRoZSBzaG9ydGVzdCBwb3NzaWJsZSBiaXRzdHJlYW0uXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBkYXRhICAgIElucHV0IHN0cmluZ1xuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIHNlZ21lbnRzXG4gKi9cbmV4cG9ydHMuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIGZyb21TdHJpbmcgKGRhdGEsIHZlcnNpb24pIHtcbiAgY29uc3Qgc2VncyA9IGdldFNlZ21lbnRzRnJvbVN0cmluZyhkYXRhLCBVdGlscy5pc0thbmppTW9kZUVuYWJsZWQoKSlcblxuICBjb25zdCBub2RlcyA9IGJ1aWxkTm9kZXMoc2VncylcbiAgY29uc3QgZ3JhcGggPSBidWlsZEdyYXBoKG5vZGVzLCB2ZXJzaW9uKVxuICBjb25zdCBwYXRoID0gZGlqa3N0cmEuZmluZF9wYXRoKGdyYXBoLm1hcCwgJ3N0YXJ0JywgJ2VuZCcpXG5cbiAgY29uc3Qgb3B0aW1pemVkU2VncyA9IFtdXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcGF0aC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBvcHRpbWl6ZWRTZWdzLnB1c2goZ3JhcGgudGFibGVbcGF0aFtpXV0ubm9kZSlcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmZyb21BcnJheShtZXJnZVNlZ21lbnRzKG9wdGltaXplZFNlZ3MpKVxufVxuXG4vKipcbiAqIFNwbGl0cyBhIHN0cmluZyBpbiB2YXJpb3VzIHNlZ21lbnRzIHdpdGggdGhlIG1vZGVzIHdoaWNoXG4gKiBiZXN0IHJlcHJlc2VudCB0aGVpciBjb250ZW50LlxuICogVGhlIHByb2R1Y2VkIHNlZ21lbnRzIGFyZSBmYXIgZnJvbSBiZWluZyBvcHRpbWl6ZWQuXG4gKiBUaGUgb3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24gaXMgb25seSB1c2VkIHRvIGVzdGltYXRlIGEgUVIgQ29kZSB2ZXJzaW9uXG4gKiB3aGljaCBtYXkgY29udGFpbiB0aGUgZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGRhdGEgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgQXJyYXkgb2Ygc2VnbWVudHNcbiAqL1xuZXhwb3J0cy5yYXdTcGxpdCA9IGZ1bmN0aW9uIHJhd1NwbGl0IChkYXRhKSB7XG4gIHJldHVybiBleHBvcnRzLmZyb21BcnJheShcbiAgICBnZXRTZWdtZW50c0Zyb21TdHJpbmcoZGF0YSwgVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpXG4gIClcbn1cbiIsImxldCB0b1NKSVNGdW5jdGlvblxuY29uc3QgQ09ERVdPUkRTX0NPVU5UID0gW1xuICAwLCAvLyBOb3QgdXNlZFxuICAyNiwgNDQsIDcwLCAxMDAsIDEzNCwgMTcyLCAxOTYsIDI0MiwgMjkyLCAzNDYsXG4gIDQwNCwgNDY2LCA1MzIsIDU4MSwgNjU1LCA3MzMsIDgxNSwgOTAxLCA5OTEsIDEwODUsXG4gIDExNTYsIDEyNTgsIDEzNjQsIDE0NzQsIDE1ODgsIDE3MDYsIDE4MjgsIDE5MjEsIDIwNTEsIDIxODUsXG4gIDIzMjMsIDI0NjUsIDI2MTEsIDI3NjEsIDI4NzYsIDMwMzQsIDMxOTYsIDMzNjIsIDM1MzIsIDM3MDZcbl1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBRUiBDb2RlIHNpemUgZm9yIHRoZSBzcGVjaWZpZWQgdmVyc2lvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBzaXplIG9mIFFSIGNvZGVcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xTaXplID0gZnVuY3Rpb24gZ2V0U3ltYm9sU2l6ZSAodmVyc2lvbikge1xuICBpZiAoIXZlcnNpb24pIHRocm93IG5ldyBFcnJvcignXCJ2ZXJzaW9uXCIgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJylcbiAgaWYgKHZlcnNpb24gPCAxIHx8IHZlcnNpb24gPiA0MCkgdGhyb3cgbmV3IEVycm9yKCdcInZlcnNpb25cIiBzaG91bGQgYmUgaW4gcmFuZ2UgZnJvbSAxIHRvIDQwJylcbiAgcmV0dXJuIHZlcnNpb24gKiA0ICsgMTdcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgY29kZXdvcmRzIHVzZWQgdG8gc3RvcmUgZGF0YSBhbmQgRUMgaW5mb3JtYXRpb24uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIERhdGEgbGVuZ3RoIGluIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xUb3RhbENvZGV3b3JkcyA9IGZ1bmN0aW9uIGdldFN5bWJvbFRvdGFsQ29kZXdvcmRzICh2ZXJzaW9uKSB7XG4gIHJldHVybiBDT0RFV09SRFNfQ09VTlRbdmVyc2lvbl1cbn1cblxuLyoqXG4gKiBFbmNvZGUgZGF0YSB3aXRoIEJvc2UtQ2hhdWRodXJpLUhvY3F1ZW5naGVtXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkYXRhIFZhbHVlIHRvIGVuY29kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIEVuY29kZWQgdmFsdWVcbiAqL1xuZXhwb3J0cy5nZXRCQ0hEaWdpdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGxldCBkaWdpdCA9IDBcblxuICB3aGlsZSAoZGF0YSAhPT0gMCkge1xuICAgIGRpZ2l0KytcbiAgICBkYXRhID4+Pj0gMVxuICB9XG5cbiAgcmV0dXJuIGRpZ2l0XG59XG5cbmV4cG9ydHMuc2V0VG9TSklTRnVuY3Rpb24gPSBmdW5jdGlvbiBzZXRUb1NKSVNGdW5jdGlvbiAoZikge1xuICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1widG9TSklTRnVuY1wiIGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uLicpXG4gIH1cblxuICB0b1NKSVNGdW5jdGlvbiA9IGZcbn1cblxuZXhwb3J0cy5pc0thbmppTW9kZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgdG9TSklTRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnXG59XG5cbmV4cG9ydHMudG9TSklTID0gZnVuY3Rpb24gdG9TSklTIChrYW5qaSkge1xuICByZXR1cm4gdG9TSklTRnVuY3Rpb24oa2FuamkpXG59XG4iLCIvKipcbiAqIENoZWNrIGlmIFFSIENvZGUgdmVyc2lvbiBpcyB2YWxpZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgIHRydWUgaWYgdmFsaWQgdmVyc2lvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKHZlcnNpb24pIHtcbiAgcmV0dXJuICFpc05hTih2ZXJzaW9uKSAmJiB2ZXJzaW9uID49IDEgJiYgdmVyc2lvbiA8PSA0MFxufVxuIiwiY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcbmNvbnN0IEVDQ29kZSA9IHJlcXVpcmUoJy4vZXJyb3ItY29ycmVjdGlvbi1jb2RlJylcbmNvbnN0IEVDTGV2ZWwgPSByZXF1aXJlKCcuL2Vycm9yLWNvcnJlY3Rpb24tbGV2ZWwnKVxuY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5jb25zdCBWZXJzaW9uQ2hlY2sgPSByZXF1aXJlKCcuL3ZlcnNpb24tY2hlY2snKVxuXG4vLyBHZW5lcmF0b3IgcG9seW5vbWlhbCB1c2VkIHRvIGVuY29kZSB2ZXJzaW9uIGluZm9ybWF0aW9uXG5jb25zdCBHMTggPSAoMSA8PCAxMikgfCAoMSA8PCAxMSkgfCAoMSA8PCAxMCkgfCAoMSA8PCA5KSB8ICgxIDw8IDgpIHwgKDEgPDwgNSkgfCAoMSA8PCAyKSB8ICgxIDw8IDApXG5jb25zdCBHMThfQkNIID0gVXRpbHMuZ2V0QkNIRGlnaXQoRzE4KVxuXG5mdW5jdGlvbiBnZXRCZXN0VmVyc2lvbkZvckRhdGFMZW5ndGggKG1vZGUsIGxlbmd0aCwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcbiAgZm9yIChsZXQgY3VycmVudFZlcnNpb24gPSAxOyBjdXJyZW50VmVyc2lvbiA8PSA0MDsgY3VycmVudFZlcnNpb24rKykge1xuICAgIGlmIChsZW5ndGggPD0gZXhwb3J0cy5nZXRDYXBhY2l0eShjdXJyZW50VmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1vZGUpKSB7XG4gICAgICByZXR1cm4gY3VycmVudFZlcnNpb25cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGdldFJlc2VydmVkQml0c0NvdW50IChtb2RlLCB2ZXJzaW9uKSB7XG4gIC8vIENoYXJhY3RlciBjb3VudCBpbmRpY2F0b3IgKyBtb2RlIGluZGljYXRvciBiaXRzXG4gIHJldHVybiBNb2RlLmdldENoYXJDb3VudEluZGljYXRvcihtb2RlLCB2ZXJzaW9uKSArIDRcbn1cblxuZnVuY3Rpb24gZ2V0VG90YWxCaXRzRnJvbURhdGFBcnJheSAoc2VnbWVudHMsIHZlcnNpb24pIHtcbiAgbGV0IHRvdGFsQml0cyA9IDBcblxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgY29uc3QgcmVzZXJ2ZWRCaXRzID0gZ2V0UmVzZXJ2ZWRCaXRzQ291bnQoZGF0YS5tb2RlLCB2ZXJzaW9uKVxuICAgIHRvdGFsQml0cyArPSByZXNlcnZlZEJpdHMgKyBkYXRhLmdldEJpdHNMZW5ndGgoKVxuICB9KVxuXG4gIHJldHVybiB0b3RhbEJpdHNcbn1cblxuZnVuY3Rpb24gZ2V0QmVzdFZlcnNpb25Gb3JNaXhlZERhdGEgKHNlZ21lbnRzLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xuICBmb3IgKGxldCBjdXJyZW50VmVyc2lvbiA9IDE7IGN1cnJlbnRWZXJzaW9uIDw9IDQwOyBjdXJyZW50VmVyc2lvbisrKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gZ2V0VG90YWxCaXRzRnJvbURhdGFBcnJheShzZWdtZW50cywgY3VycmVudFZlcnNpb24pXG4gICAgaWYgKGxlbmd0aCA8PSBleHBvcnRzLmdldENhcGFjaXR5KGN1cnJlbnRWZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgTW9kZS5NSVhFRCkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50VmVyc2lvblxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHZlcnNpb24gbnVtYmVyIGZyb20gYSB2YWx1ZS5cbiAqIElmIHZhbHVlIGlzIG5vdCBhIHZhbGlkIHZlcnNpb24sIHJldHVybnMgZGVmYXVsdFZhbHVlXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gdmFsdWUgICAgICAgIFFSIENvZGUgdmVyc2lvblxuICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgZGVmYXVsdFZhbHVlIEZhbGxiYWNrIHZhbHVlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uIG51bWJlclxuICovXG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChWZXJzaW9uQ2hlY2suaXNWYWxpZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKVxuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxufVxuXG4vKipcbiAqIFJldHVybnMgaG93IG11Y2ggZGF0YSBjYW4gYmUgc3RvcmVkIHdpdGggdGhlIHNwZWNpZmllZCBRUiBjb2RlIHZlcnNpb25cbiAqIGFuZCBlcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb24gKDEtNDApXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSAge01vZGV9ICAgbW9kZSAgICAgICAgICAgICAgICAgRGF0YSBtb2RlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIFF1YW50aXR5IG9mIHN0b3JhYmxlIGRhdGFcbiAqL1xuZXhwb3J0cy5nZXRDYXBhY2l0eSA9IGZ1bmN0aW9uIGdldENhcGFjaXR5ICh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbW9kZSkge1xuICBpZiAoIVZlcnNpb25DaGVjay5pc1ZhbGlkKHZlcnNpb24pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFFSIENvZGUgdmVyc2lvbicpXG4gIH1cblxuICAvLyBVc2UgQnl0ZSBtb2RlIGFzIGRlZmF1bHRcbiAgaWYgKHR5cGVvZiBtb2RlID09PSAndW5kZWZpbmVkJykgbW9kZSA9IE1vZGUuQllURVxuXG4gIC8vIFRvdGFsIGNvZGV3b3JkcyBmb3IgdGhpcyBRUiBjb2RlIHZlcnNpb24gKERhdGEgKyBFcnJvciBjb3JyZWN0aW9uKVxuICBjb25zdCB0b3RhbENvZGV3b3JkcyA9IFV0aWxzLmdldFN5bWJvbFRvdGFsQ29kZXdvcmRzKHZlcnNpb24pXG5cbiAgLy8gVG90YWwgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzXG4gIGNvbnN0IGVjVG90YWxDb2Rld29yZHMgPSBFQ0NvZGUuZ2V0VG90YWxDb2Rld29yZHNDb3VudCh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbClcblxuICAvLyBUb3RhbCBudW1iZXIgb2YgZGF0YSBjb2Rld29yZHNcbiAgY29uc3QgZGF0YVRvdGFsQ29kZXdvcmRzQml0cyA9ICh0b3RhbENvZGV3b3JkcyAtIGVjVG90YWxDb2Rld29yZHMpICogOFxuXG4gIGlmIChtb2RlID09PSBNb2RlLk1JWEVEKSByZXR1cm4gZGF0YVRvdGFsQ29kZXdvcmRzQml0c1xuXG4gIGNvbnN0IHVzYWJsZUJpdHMgPSBkYXRhVG90YWxDb2Rld29yZHNCaXRzIC0gZ2V0UmVzZXJ2ZWRCaXRzQ291bnQobW9kZSwgdmVyc2lvbilcblxuICAvLyBSZXR1cm4gbWF4IG51bWJlciBvZiBzdG9yYWJsZSBjb2Rld29yZHNcbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSBNb2RlLk5VTUVSSUM6XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigodXNhYmxlQml0cyAvIDEwKSAqIDMpXG5cbiAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKHVzYWJsZUJpdHMgLyAxMSkgKiAyKVxuXG4gICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IodXNhYmxlQml0cyAvIDEzKVxuXG4gICAgY2FzZSBNb2RlLkJZVEU6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKHVzYWJsZUJpdHMgLyA4KVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWluaW11bSB2ZXJzaW9uIG5lZWRlZCB0byBjb250YWluIHRoZSBhbW91bnQgb2YgZGF0YVxuICpcbiAqIEBwYXJhbSAge1NlZ21lbnR9IGRhdGEgICAgICAgICAgICAgICAgICAgIFNlZ21lbnQgb2YgZGF0YVxuICogQHBhcmFtICB7TnVtYmVyfSBbZXJyb3JDb3JyZWN0aW9uTGV2ZWw9SF0gRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtICB7TW9kZX0gbW9kZSAgICAgICAgICAgICAgICAgICAgICAgRGF0YSBtb2RlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqL1xuZXhwb3J0cy5nZXRCZXN0VmVyc2lvbkZvckRhdGEgPSBmdW5jdGlvbiBnZXRCZXN0VmVyc2lvbkZvckRhdGEgKGRhdGEsIGVycm9yQ29ycmVjdGlvbkxldmVsKSB7XG4gIGxldCBzZWdcblxuICBjb25zdCBlY2wgPSBFQ0xldmVsLmZyb20oZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIEVDTGV2ZWwuTSlcblxuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiBnZXRCZXN0VmVyc2lvbkZvck1peGVkRGF0YShkYXRhLCBlY2wpXG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gMVxuICAgIH1cblxuICAgIHNlZyA9IGRhdGFbMF1cbiAgfSBlbHNlIHtcbiAgICBzZWcgPSBkYXRhXG4gIH1cblxuICByZXR1cm4gZ2V0QmVzdFZlcnNpb25Gb3JEYXRhTGVuZ3RoKHNlZy5tb2RlLCBzZWcuZ2V0TGVuZ3RoKCksIGVjbClcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHZlcnNpb24gaW5mb3JtYXRpb24gd2l0aCByZWxhdGl2ZSBlcnJvciBjb3JyZWN0aW9uIGJpdHNcbiAqXG4gKiBUaGUgdmVyc2lvbiBpbmZvcm1hdGlvbiBpcyBpbmNsdWRlZCBpbiBRUiBDb2RlIHN5bWJvbHMgb2YgdmVyc2lvbiA3IG9yIGxhcmdlci5cbiAqIEl0IGNvbnNpc3RzIG9mIGFuIDE4LWJpdCBzZXF1ZW5jZSBjb250YWluaW5nIDYgZGF0YSBiaXRzLFxuICogd2l0aCAxMiBlcnJvciBjb3JyZWN0aW9uIGJpdHMgY2FsY3VsYXRlZCB1c2luZyB0aGUgKDE4LCA2KSBHb2xheSBjb2RlLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBFbmNvZGVkIHZlcnNpb24gaW5mbyBiaXRzXG4gKi9cbmV4cG9ydHMuZ2V0RW5jb2RlZEJpdHMgPSBmdW5jdGlvbiBnZXRFbmNvZGVkQml0cyAodmVyc2lvbikge1xuICBpZiAoIVZlcnNpb25DaGVjay5pc1ZhbGlkKHZlcnNpb24pIHx8IHZlcnNpb24gPCA3KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFFSIENvZGUgdmVyc2lvbicpXG4gIH1cblxuICBsZXQgZCA9IHZlcnNpb24gPDwgMTJcblxuICB3aGlsZSAoVXRpbHMuZ2V0QkNIRGlnaXQoZCkgLSBHMThfQkNIID49IDApIHtcbiAgICBkIF49IChHMTggPDwgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE4X0JDSCkpXG4gIH1cblxuICByZXR1cm4gKHZlcnNpb24gPDwgMTIpIHwgZFxufVxuIiwiY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZnVuY3Rpb24gY2xlYXJDYW52YXMgKGN0eCwgY2FudmFzLCBzaXplKSB7XG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuXG4gIGlmICghY2FudmFzLnN0eWxlKSBjYW52YXMuc3R5bGUgPSB7fVxuICBjYW52YXMuaGVpZ2h0ID0gc2l6ZVxuICBjYW52YXMud2lkdGggPSBzaXplXG4gIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBzaXplICsgJ3B4J1xuICBjYW52YXMuc3R5bGUud2lkdGggPSBzaXplICsgJ3B4J1xufVxuXG5mdW5jdGlvbiBnZXRDYW52YXNFbGVtZW50ICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IG5lZWQgdG8gc3BlY2lmeSBhIGNhbnZhcyBlbGVtZW50JylcbiAgfVxufVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocXJEYXRhLCBjYW52YXMsIG9wdGlvbnMpIHtcbiAgbGV0IG9wdHMgPSBvcHRpb25zXG4gIGxldCBjYW52YXNFbCA9IGNhbnZhc1xuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3VuZGVmaW5lZCcgJiYgKCFjYW52YXMgfHwgIWNhbnZhcy5nZXRDb250ZXh0KSkge1xuICAgIG9wdHMgPSBjYW52YXNcbiAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICghY2FudmFzKSB7XG4gICAgY2FudmFzRWwgPSBnZXRDYW52YXNFbGVtZW50KClcbiAgfVxuXG4gIG9wdHMgPSBVdGlscy5nZXRPcHRpb25zKG9wdHMpXG4gIGNvbnN0IHNpemUgPSBVdGlscy5nZXRJbWFnZVdpZHRoKHFyRGF0YS5tb2R1bGVzLnNpemUsIG9wdHMpXG5cbiAgY29uc3QgY3R4ID0gY2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKVxuICBjb25zdCBpbWFnZSA9IGN0eC5jcmVhdGVJbWFnZURhdGEoc2l6ZSwgc2l6ZSlcbiAgVXRpbHMucXJUb0ltYWdlRGF0YShpbWFnZS5kYXRhLCBxckRhdGEsIG9wdHMpXG5cbiAgY2xlYXJDYW52YXMoY3R4LCBjYW52YXNFbCwgc2l6ZSlcbiAgY3R4LnB1dEltYWdlRGF0YShpbWFnZSwgMCwgMClcblxuICByZXR1cm4gY2FudmFzRWxcbn1cblxuZXhwb3J0cy5yZW5kZXJUb0RhdGFVUkwgPSBmdW5jdGlvbiByZW5kZXJUb0RhdGFVUkwgKHFyRGF0YSwgY2FudmFzLCBvcHRpb25zKSB7XG4gIGxldCBvcHRzID0gb3B0aW9uc1xuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3VuZGVmaW5lZCcgJiYgKCFjYW52YXMgfHwgIWNhbnZhcy5nZXRDb250ZXh0KSkge1xuICAgIG9wdHMgPSBjYW52YXNcbiAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICghb3B0cykgb3B0cyA9IHt9XG5cbiAgY29uc3QgY2FudmFzRWwgPSBleHBvcnRzLnJlbmRlcihxckRhdGEsIGNhbnZhcywgb3B0cylcblxuICBjb25zdCB0eXBlID0gb3B0cy50eXBlIHx8ICdpbWFnZS9wbmcnXG4gIGNvbnN0IHJlbmRlcmVyT3B0cyA9IG9wdHMucmVuZGVyZXJPcHRzIHx8IHt9XG5cbiAgcmV0dXJuIGNhbnZhc0VsLnRvRGF0YVVSTCh0eXBlLCByZW5kZXJlck9wdHMucXVhbGl0eSlcbn1cbiIsImNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIGdldENvbG9yQXR0cmliIChjb2xvciwgYXR0cmliKSB7XG4gIGNvbnN0IGFscGhhID0gY29sb3IuYSAvIDI1NVxuICBjb25zdCBzdHIgPSBhdHRyaWIgKyAnPVwiJyArIGNvbG9yLmhleCArICdcIidcblxuICByZXR1cm4gYWxwaGEgPCAxXG4gICAgPyBzdHIgKyAnICcgKyBhdHRyaWIgKyAnLW9wYWNpdHk9XCInICsgYWxwaGEudG9GaXhlZCgyKS5zbGljZSgxKSArICdcIidcbiAgICA6IHN0clxufVxuXG5mdW5jdGlvbiBzdmdDbWQgKGNtZCwgeCwgeSkge1xuICBsZXQgc3RyID0gY21kICsgeFxuICBpZiAodHlwZW9mIHkgIT09ICd1bmRlZmluZWQnKSBzdHIgKz0gJyAnICsgeVxuXG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gcXJUb1BhdGggKGRhdGEsIHNpemUsIG1hcmdpbikge1xuICBsZXQgcGF0aCA9ICcnXG4gIGxldCBtb3ZlQnkgPSAwXG4gIGxldCBuZXdSb3cgPSBmYWxzZVxuICBsZXQgbGluZUxlbmd0aCA9IDBcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjb2wgPSBNYXRoLmZsb29yKGkgJSBzaXplKVxuICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoaSAvIHNpemUpXG5cbiAgICBpZiAoIWNvbCAmJiAhbmV3Um93KSBuZXdSb3cgPSB0cnVlXG5cbiAgICBpZiAoZGF0YVtpXSkge1xuICAgICAgbGluZUxlbmd0aCsrXG5cbiAgICAgIGlmICghKGkgPiAwICYmIGNvbCA+IDAgJiYgZGF0YVtpIC0gMV0pKSB7XG4gICAgICAgIHBhdGggKz0gbmV3Um93XG4gICAgICAgICAgPyBzdmdDbWQoJ00nLCBjb2wgKyBtYXJnaW4sIDAuNSArIHJvdyArIG1hcmdpbilcbiAgICAgICAgICA6IHN2Z0NtZCgnbScsIG1vdmVCeSwgMClcblxuICAgICAgICBtb3ZlQnkgPSAwXG4gICAgICAgIG5ld1JvdyA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmICghKGNvbCArIDEgPCBzaXplICYmIGRhdGFbaSArIDFdKSkge1xuICAgICAgICBwYXRoICs9IHN2Z0NtZCgnaCcsIGxpbmVMZW5ndGgpXG4gICAgICAgIGxpbmVMZW5ndGggPSAwXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdmVCeSsrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhdGhcbn1cblxuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgY29uc3Qgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0aW9ucylcbiAgY29uc3Qgc2l6ZSA9IHFyRGF0YS5tb2R1bGVzLnNpemVcbiAgY29uc3QgZGF0YSA9IHFyRGF0YS5tb2R1bGVzLmRhdGFcbiAgY29uc3QgcXJjb2Rlc2l6ZSA9IHNpemUgKyBvcHRzLm1hcmdpbiAqIDJcblxuICBjb25zdCBiZyA9ICFvcHRzLmNvbG9yLmxpZ2h0LmFcbiAgICA/ICcnXG4gICAgOiAnPHBhdGggJyArIGdldENvbG9yQXR0cmliKG9wdHMuY29sb3IubGlnaHQsICdmaWxsJykgK1xuICAgICAgJyBkPVwiTTAgMGgnICsgcXJjb2Rlc2l6ZSArICd2JyArIHFyY29kZXNpemUgKyAnSDB6XCIvPidcblxuICBjb25zdCBwYXRoID1cbiAgICAnPHBhdGggJyArIGdldENvbG9yQXR0cmliKG9wdHMuY29sb3IuZGFyaywgJ3N0cm9rZScpICtcbiAgICAnIGQ9XCInICsgcXJUb1BhdGgoZGF0YSwgc2l6ZSwgb3B0cy5tYXJnaW4pICsgJ1wiLz4nXG5cbiAgY29uc3Qgdmlld0JveCA9ICd2aWV3Qm94PVwiJyArICcwIDAgJyArIHFyY29kZXNpemUgKyAnICcgKyBxcmNvZGVzaXplICsgJ1wiJ1xuXG4gIGNvbnN0IHdpZHRoID0gIW9wdHMud2lkdGggPyAnJyA6ICd3aWR0aD1cIicgKyBvcHRzLndpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBvcHRzLndpZHRoICsgJ1wiICdcblxuICBjb25zdCBzdmdUYWcgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgJyArIHdpZHRoICsgdmlld0JveCArICcgc2hhcGUtcmVuZGVyaW5nPVwiY3Jpc3BFZGdlc1wiPicgKyBiZyArIHBhdGggKyAnPC9zdmc+XFxuJ1xuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYihudWxsLCBzdmdUYWcpXG4gIH1cblxuICByZXR1cm4gc3ZnVGFnXG59XG4iLCJmdW5jdGlvbiBoZXgycmdiYSAoaGV4KSB7XG4gIGlmICh0eXBlb2YgaGV4ID09PSAnbnVtYmVyJykge1xuICAgIGhleCA9IGhleC50b1N0cmluZygpXG4gIH1cblxuICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbG9yIHNob3VsZCBiZSBkZWZpbmVkIGFzIGhleCBzdHJpbmcnKVxuICB9XG5cbiAgbGV0IGhleENvZGUgPSBoZXguc2xpY2UoKS5yZXBsYWNlKCcjJywgJycpLnNwbGl0KCcnKVxuICBpZiAoaGV4Q29kZS5sZW5ndGggPCAzIHx8IGhleENvZGUubGVuZ3RoID09PSA1IHx8IGhleENvZGUubGVuZ3RoID4gOCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBoZXggY29sb3I6ICcgKyBoZXgpXG4gIH1cblxuICAvLyBDb252ZXJ0IGZyb20gc2hvcnQgdG8gbG9uZyBmb3JtIChmZmYgLT4gZmZmZmZmKVxuICBpZiAoaGV4Q29kZS5sZW5ndGggPT09IDMgfHwgaGV4Q29kZS5sZW5ndGggPT09IDQpIHtcbiAgICBoZXhDb2RlID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgaGV4Q29kZS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBbYywgY11cbiAgICB9KSlcbiAgfVxuXG4gIC8vIEFkZCBkZWZhdWx0IGFscGhhIHZhbHVlXG4gIGlmIChoZXhDb2RlLmxlbmd0aCA9PT0gNikgaGV4Q29kZS5wdXNoKCdGJywgJ0YnKVxuXG4gIGNvbnN0IGhleFZhbHVlID0gcGFyc2VJbnQoaGV4Q29kZS5qb2luKCcnKSwgMTYpXG5cbiAgcmV0dXJuIHtcbiAgICByOiAoaGV4VmFsdWUgPj4gMjQpICYgMjU1LFxuICAgIGc6IChoZXhWYWx1ZSA+PiAxNikgJiAyNTUsXG4gICAgYjogKGhleFZhbHVlID4+IDgpICYgMjU1LFxuICAgIGE6IGhleFZhbHVlICYgMjU1LFxuICAgIGhleDogJyMnICsgaGV4Q29kZS5zbGljZSgwLCA2KS5qb2luKCcnKVxuICB9XG59XG5cbmV4cG9ydHMuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIGdldE9wdGlvbnMgKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge31cbiAgaWYgKCFvcHRpb25zLmNvbG9yKSBvcHRpb25zLmNvbG9yID0ge31cblxuICBjb25zdCBtYXJnaW4gPSB0eXBlb2Ygb3B0aW9ucy5tYXJnaW4gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgb3B0aW9ucy5tYXJnaW4gPT09IG51bGwgfHxcbiAgICBvcHRpb25zLm1hcmdpbiA8IDBcbiAgICA/IDRcbiAgICA6IG9wdGlvbnMubWFyZ2luXG5cbiAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoICYmIG9wdGlvbnMud2lkdGggPj0gMjEgPyBvcHRpb25zLndpZHRoIDogdW5kZWZpbmVkXG4gIGNvbnN0IHNjYWxlID0gb3B0aW9ucy5zY2FsZSB8fCA0XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgc2NhbGU6IHdpZHRoID8gNCA6IHNjYWxlLFxuICAgIG1hcmdpbjogbWFyZ2luLFxuICAgIGNvbG9yOiB7XG4gICAgICBkYXJrOiBoZXgycmdiYShvcHRpb25zLmNvbG9yLmRhcmsgfHwgJyMwMDAwMDBmZicpLFxuICAgICAgbGlnaHQ6IGhleDJyZ2JhKG9wdGlvbnMuY29sb3IubGlnaHQgfHwgJyNmZmZmZmZmZicpXG4gICAgfSxcbiAgICB0eXBlOiBvcHRpb25zLnR5cGUsXG4gICAgcmVuZGVyZXJPcHRzOiBvcHRpb25zLnJlbmRlcmVyT3B0cyB8fCB7fVxuICB9XG59XG5cbmV4cG9ydHMuZ2V0U2NhbGUgPSBmdW5jdGlvbiBnZXRTY2FsZSAocXJTaXplLCBvcHRzKSB7XG4gIHJldHVybiBvcHRzLndpZHRoICYmIG9wdHMud2lkdGggPj0gcXJTaXplICsgb3B0cy5tYXJnaW4gKiAyXG4gICAgPyBvcHRzLndpZHRoIC8gKHFyU2l6ZSArIG9wdHMubWFyZ2luICogMilcbiAgICA6IG9wdHMuc2NhbGVcbn1cblxuZXhwb3J0cy5nZXRJbWFnZVdpZHRoID0gZnVuY3Rpb24gZ2V0SW1hZ2VXaWR0aCAocXJTaXplLCBvcHRzKSB7XG4gIGNvbnN0IHNjYWxlID0gZXhwb3J0cy5nZXRTY2FsZShxclNpemUsIG9wdHMpXG4gIHJldHVybiBNYXRoLmZsb29yKChxclNpemUgKyBvcHRzLm1hcmdpbiAqIDIpICogc2NhbGUpXG59XG5cbmV4cG9ydHMucXJUb0ltYWdlRGF0YSA9IGZ1bmN0aW9uIHFyVG9JbWFnZURhdGEgKGltZ0RhdGEsIHFyLCBvcHRzKSB7XG4gIGNvbnN0IHNpemUgPSBxci5tb2R1bGVzLnNpemVcbiAgY29uc3QgZGF0YSA9IHFyLm1vZHVsZXMuZGF0YVxuICBjb25zdCBzY2FsZSA9IGV4cG9ydHMuZ2V0U2NhbGUoc2l6ZSwgb3B0cylcbiAgY29uc3Qgc3ltYm9sU2l6ZSA9IE1hdGguZmxvb3IoKHNpemUgKyBvcHRzLm1hcmdpbiAqIDIpICogc2NhbGUpXG4gIGNvbnN0IHNjYWxlZE1hcmdpbiA9IG9wdHMubWFyZ2luICogc2NhbGVcbiAgY29uc3QgcGFsZXR0ZSA9IFtvcHRzLmNvbG9yLmxpZ2h0LCBvcHRzLmNvbG9yLmRhcmtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzeW1ib2xTaXplOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN5bWJvbFNpemU7IGorKykge1xuICAgICAgbGV0IHBvc0RzdCA9IChpICogc3ltYm9sU2l6ZSArIGopICogNFxuICAgICAgbGV0IHB4Q29sb3IgPSBvcHRzLmNvbG9yLmxpZ2h0XG5cbiAgICAgIGlmIChpID49IHNjYWxlZE1hcmdpbiAmJiBqID49IHNjYWxlZE1hcmdpbiAmJlxuICAgICAgICBpIDwgc3ltYm9sU2l6ZSAtIHNjYWxlZE1hcmdpbiAmJiBqIDwgc3ltYm9sU2l6ZSAtIHNjYWxlZE1hcmdpbikge1xuICAgICAgICBjb25zdCBpU3JjID0gTWF0aC5mbG9vcigoaSAtIHNjYWxlZE1hcmdpbikgLyBzY2FsZSlcbiAgICAgICAgY29uc3QgalNyYyA9IE1hdGguZmxvb3IoKGogLSBzY2FsZWRNYXJnaW4pIC8gc2NhbGUpXG4gICAgICAgIHB4Q29sb3IgPSBwYWxldHRlW2RhdGFbaVNyYyAqIHNpemUgKyBqU3JjXSA/IDEgOiAwXVxuICAgICAgfVxuXG4gICAgICBpbWdEYXRhW3Bvc0RzdCsrXSA9IHB4Q29sb3IuclxuICAgICAgaW1nRGF0YVtwb3NEc3QrK10gPSBweENvbG9yLmdcbiAgICAgIGltZ0RhdGFbcG9zRHN0KytdID0gcHhDb2xvci5iXG4gICAgICBpbWdEYXRhW3Bvc0RzdF0gPSBweENvbG9yLmFcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudXNlVGhyb3R0bGVkRWZmZWN0ID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciB1c2VUaHJvdHRsZWRFZmZlY3QgPSBleHBvcnRzLnVzZVRocm90dGxlZEVmZmVjdCA9IGZ1bmN0aW9uIHVzZVRocm90dGxlZEVmZmVjdChjYWxsYmFjaywgZGVsYXkpIHtcbiAgdmFyIGRlcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuXG4gIHZhciBsYXN0UmFuID0gKDAsIF9yZWFjdC51c2VSZWYpKERhdGUubm93KCkpO1xuXG4gICgwLCBfcmVhY3QudXNlRWZmZWN0KShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChEYXRlLm5vdygpIC0gbGFzdFJhbi5jdXJyZW50ID49IGRlbGF5KSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIGxhc3RSYW4uY3VycmVudCA9IERhdGUubm93KCk7XG4gICAgICB9XG4gICAgfSwgZGVsYXkgLSAoRGF0ZS5ub3coKSAtIGxhc3RSYW4uY3VycmVudCkpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChoYW5kbGVyKTtcbiAgICB9O1xuICB9LCBbZGVsYXldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZGVwcykpKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHVzZVRocm90dGxlZEVmZmVjdDsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIFN0eWxlU2hlZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5faW5zZXJ0VGFnID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKF90aGlzLnRhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChfdGhpcy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmluc2VydGlvblBvaW50Lm5leHRTaWJsaW5nO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnByZXBlbmQpIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5iZWZvcmU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJlZm9yZSA9IF90aGlzLnRhZ3NbX3RoaXMudGFncy5sZW5ndGggLSAxXS5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0YWcsIGJlZm9yZSk7XG5cbiAgICAgIF90aGlzLnRhZ3MucHVzaCh0YWcpO1xuICAgIH07XG5cbiAgICB0aGlzLmlzU3BlZWR5ID0gb3B0aW9ucy5zcGVlZHkgPT09IHVuZGVmaW5lZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgOiBvcHRpb25zLnNwZWVkeTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gICAgdGhpcy5ub25jZSA9IG9wdGlvbnMubm9uY2U7IC8vIGtleSBpcyB0aGUgdmFsdWUgb2YgdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUsIGl0J3MgdXNlZCB0byBpZGVudGlmeSBkaWZmZXJlbnQgc2hlZXRzXG5cbiAgICB0aGlzLmtleSA9IG9wdGlvbnMua2V5O1xuICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XG4gICAgdGhpcy5wcmVwZW5kID0gb3B0aW9ucy5wcmVwZW5kO1xuICAgIHRoaXMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaHlkcmF0ZSA9IGZ1bmN0aW9uIGh5ZHJhdGUobm9kZXMpIHtcbiAgICBub2Rlcy5mb3JFYWNoKHRoaXMuX2luc2VydFRhZyk7XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgLy8gdGhlIG1heCBsZW5ndGggaXMgaG93IG1hbnkgcnVsZXMgd2UgaGF2ZSBwZXIgc3R5bGUgdGFnLCBpdCdzIDY1MDAwIGluIHNwZWVkeSBtb2RlXG4gICAgLy8gaXQncyAxIGluIGRldiBiZWNhdXNlIHdlIGluc2VydCBzb3VyY2UgbWFwcyB0aGF0IG1hcCBhIHNpbmdsZSBydWxlIHRvIGEgbG9jYXRpb25cbiAgICAvLyBhbmQgeW91IGNhbiBvbmx5IGhhdmUgb25lIHNvdXJjZSBtYXAgcGVyIHN0eWxlIHRhZ1xuICAgIGlmICh0aGlzLmN0ciAlICh0aGlzLmlzU3BlZWR5ID8gNjUwMDAgOiAxKSA9PT0gMCkge1xuICAgICAgdGhpcy5faW5zZXJ0VGFnKGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzSW1wb3J0UnVsZSA9IHJ1bGUuY2hhckNvZGVBdCgwKSA9PT0gNjQgJiYgcnVsZS5jaGFyQ29kZUF0KDEpID09PSAxMDU7XG5cbiAgICAgIGlmIChpc0ltcG9ydFJ1bGUgJiYgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUpIHtcbiAgICAgICAgLy8gdGhpcyB3b3VsZCBvbmx5IGNhdXNlIHByb2JsZW0gaW4gc3BlZWR5IG1vZGVcbiAgICAgICAgLy8gYnV0IHdlIGRvbid0IHdhbnQgZW5hYmxpbmcgc3BlZWR5IHRvIGFmZmVjdCB0aGUgb2JzZXJ2YWJsZSBiZWhhdmlvclxuICAgICAgICAvLyBzbyB3ZSByZXBvcnQgdGhpcyBlcnJvciBhdCBhbGwgdGltZXNcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSdyZSBhdHRlbXB0aW5nIHRvIGluc2VydCB0aGUgZm9sbG93aW5nIHJ1bGU6XFxuXCIgKyBydWxlICsgJ1xcblxcbmBAaW1wb3J0YCBydWxlcyBtdXN0IGJlIGJlZm9yZSBhbGwgb3RoZXIgdHlwZXMgb2YgcnVsZXMgaW4gYSBzdHlsZXNoZWV0IGJ1dCBvdGhlciBydWxlcyBoYXZlIGFscmVhZHkgYmVlbiBpbnNlcnRlZC4gUGxlYXNlIGVuc3VyZSB0aGF0IGBAaW1wb3J0YCBydWxlcyBhcmUgYmVmb3JlIGFsbCBvdGhlciBydWxlcy4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgfHwgIWlzSW1wb3J0UnVsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NwZWVkeSkge1xuICAgICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcodGFnKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAvLyB0aGUgYmlnIGRyYXdiYWNrIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEvOigtbW96LXBsYWNlaG9sZGVyfC1tb3otZm9jdXMtaW5uZXJ8LW1vei1mb2N1c3Jpbmd8LW1zLWlucHV0LXBsYWNlaG9sZGVyfC1tb3otcmVhZC13cml0ZXwtbW96LXJlYWQtb25seXwtbXMtY2xlYXIpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUudHJpbSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuICogQHJldHVybiB7c3RyaW5nP31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoICh2YWx1ZSwgcGF0dGVybikge1xuXHRyZXR1cm4gKHZhbHVlID0gcGF0dGVybi5leGVjKHZhbHVlKSkgPyB2YWx1ZVswXSA6IHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gcGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlICh2YWx1ZSwgcGF0dGVybiwgcmVwbGFjZW1lbnQpIHtcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZW1lbnQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRleG9mICh2YWx1ZSwgc2VhcmNoKSB7XG5cdHJldHVybiB2YWx1ZS5pbmRleE9mKHNlYXJjaClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhcmF0ICh2YWx1ZSwgaW5kZXgpIHtcblx0cmV0dXJuIHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpIHwgMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdHIgKHZhbHVlLCBiZWdpbiwgZW5kKSB7XG5cdHJldHVybiB2YWx1ZS5zbGljZShiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RybGVuICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnlbXX0gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpemVvZiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCAodmFsdWUsIGFycmF5KSB7XG5cdHJldHVybiBhcnJheS5wdXNoKHZhbHVlKSwgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcnJheVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUgKGFycmF5LCBjYWxsYmFjaykge1xuXHRyZXR1cm4gYXJyYXkubWFwKGNhbGxiYWNrKS5qb2luKCcnKVxufVxuIiwiaW1wb3J0IHtmcm9tLCB0cmltLCBjaGFyYXQsIHN0cmxlbiwgc3Vic3RyLCBhcHBlbmQsIGFzc2lnbn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG5leHBvcnQgdmFyIGxpbmUgPSAxXG5leHBvcnQgdmFyIGNvbHVtbiA9IDFcbmV4cG9ydCB2YXIgbGVuZ3RoID0gMFxuZXhwb3J0IHZhciBwb3NpdGlvbiA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVyID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXJzID0gJydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdIHwgc3RyaW5nfSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3RbXSB8IHN0cmluZ30gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGUgKHZhbHVlLCByb290LCBwYXJlbnQsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKSB7XG5cdHJldHVybiB7dmFsdWU6IHZhbHVlLCByb290OiByb290LCBwYXJlbnQ6IHBhcmVudCwgdHlwZTogdHlwZSwgcHJvcHM6IHByb3BzLCBjaGlsZHJlbjogY2hpbGRyZW4sIGxpbmU6IGxpbmUsIGNvbHVtbjogY29sdW1uLCBsZW5ndGg6IGxlbmd0aCwgcmV0dXJuOiAnJ31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5IChyb290LCBwcm9wcykge1xuXHRyZXR1cm4gYXNzaWduKG5vZGUoJycsIG51bGwsIG51bGwsICcnLCBudWxsLCBudWxsLCAwKSwgcm9vdCwge2xlbmd0aDogLXJvb3QubGVuZ3RofSwgcHJvcHMpXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhciAoKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPiAwID8gY2hhcmF0KGNoYXJhY3RlcnMsIC0tcG9zaXRpb24pIDogMFxuXG5cdGlmIChjb2x1bW4tLSwgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lLS1cblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV4dCAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uIDwgbGVuZ3RoID8gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKyspIDogMFxuXG5cdGlmIChjb2x1bW4rKywgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lKytcblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVlayAoKSB7XG5cdHJldHVybiBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24pXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FyZXQgKCkge1xuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG5cdHJldHVybiBzdWJzdHIoY2hhcmFjdGVycywgYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW4gKHR5cGUpIHtcblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Ly8gXFwwIFxcdCBcXG4gXFxyIFxccyB3aGl0ZXNwYWNlIHRva2VuXG5cdFx0Y2FzZSAwOiBjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRyZXR1cm4gNVxuXHRcdC8vICEgKyAsIC8gPiBAIH4gaXNvbGF0ZSB0b2tlblxuXHRcdGNhc2UgMzM6IGNhc2UgNDM6IGNhc2UgNDQ6IGNhc2UgNDc6IGNhc2UgNjI6IGNhc2UgNjQ6IGNhc2UgMTI2OlxuXHRcdC8vIDsgeyB9IGJyZWFrcG9pbnQgdG9rZW5cblx0XHRjYXNlIDU5OiBjYXNlIDEyMzogY2FzZSAxMjU6XG5cdFx0XHRyZXR1cm4gNFxuXHRcdC8vIDogYWNjb21wYW5pZWQgdG9rZW5cblx0XHRjYXNlIDU4OlxuXHRcdFx0cmV0dXJuIDNcblx0XHQvLyBcIiAnICggWyBvcGVuaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDQwOiBjYXNlIDkxOlxuXHRcdFx0cmV0dXJuIDJcblx0XHQvLyApIF0gY2xvc2luZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSA0MTogY2FzZSA5Mzpcblx0XHRcdHJldHVybiAxXG5cdH1cblxuXHRyZXR1cm4gMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7YW55W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGxpbmUgPSBjb2x1bW4gPSAxLCBsZW5ndGggPSBzdHJsZW4oY2hhcmFjdGVycyA9IHZhbHVlKSwgcG9zaXRpb24gPSAwLCBbXVxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGNoYXJhY3RlcnMgPSAnJywgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdCAodHlwZSkge1xuXHRyZXR1cm4gdHJpbShzbGljZShwb3NpdGlvbiAtIDEsIGRlbGltaXRlcih0eXBlID09PSA5MSA/IHR5cGUgKyAyIDogdHlwZSA9PT0gNDAgPyB0eXBlICsgMSA6IHR5cGUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHRva2VuaXplcihhbGxvYyh2YWx1ZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGl0ZXNwYWNlICh0eXBlKSB7XG5cdHdoaWxlIChjaGFyYWN0ZXIgPSBwZWVrKCkpXG5cdFx0aWYgKGNoYXJhY3RlciA8IDMzKVxuXHRcdFx0bmV4dCgpXG5cdFx0ZWxzZVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gdG9rZW4odHlwZSkgPiAyIHx8IHRva2VuKGNoYXJhY3RlcikgPiAzID8gJycgOiAnICdcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZXIgKGNoaWxkcmVuKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG5cdFx0XHRjYXNlIDA6IGFwcGVuZChpZGVudGlmaWVyKHBvc2l0aW9uIC0gMSksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOiBhcHBlbmQoZGVsaW1pdChjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGRlZmF1bHQ6IGFwcGVuZChmcm9tKGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdH1cblxuXHRyZXR1cm4gY2hpbGRyZW5cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBpbmcgKGluZGV4LCBjb3VudCkge1xuXHR3aGlsZSAoLS1jb3VudCAmJiBuZXh0KCkpXG5cdFx0Ly8gbm90IDAtOSBBLUYgYS1mXG5cdFx0aWYgKGNoYXJhY3RlciA8IDQ4IHx8IGNoYXJhY3RlciA+IDEwMiB8fCAoY2hhcmFjdGVyID4gNTcgJiYgY2hhcmFjdGVyIDwgNjUpIHx8IChjaGFyYWN0ZXIgPiA3MCAmJiBjaGFyYWN0ZXIgPCA5NykpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiBzbGljZShpbmRleCwgY2FyZXQoKSArIChjb3VudCA8IDYgJiYgcGVlaygpID09IDMyICYmIG5leHQoKSA9PSAzMikpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXRlciAodHlwZSkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHQvLyBdICkgXCIgJ1xuXHRcdFx0Y2FzZSB0eXBlOlxuXHRcdFx0XHRyZXR1cm4gcG9zaXRpb25cblx0XHRcdC8vIFwiICdcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6XG5cdFx0XHRcdGlmICh0eXBlICE9PSAzNCAmJiB0eXBlICE9PSAzOSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gKFxuXHRcdFx0Y2FzZSA0MDpcblx0XHRcdFx0aWYgKHR5cGUgPT09IDQxKVxuXHRcdFx0XHRcdGRlbGltaXRlcih0eXBlKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdG5leHQoKVxuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ZXIgKHR5cGUsIGluZGV4KSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0Ly8gLy9cblx0XHRpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDcgKyAxMClcblx0XHRcdGJyZWFrXG5cdFx0Ly8gLypcblx0XHRlbHNlIGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0MiArIDQyICYmIHBlZWsoKSA9PT0gNDcpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiAnLyonICsgc2xpY2UoaW5kZXgsIHBvc2l0aW9uIC0gMSkgKyAnKicgKyBmcm9tKHR5cGUgPT09IDQ3ID8gdHlwZSA6IG5leHQoKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aWZpZXIgKGluZGV4KSB7XG5cdHdoaWxlICghdG9rZW4ocGVlaygpKSlcblx0XHRuZXh0KClcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIHBvc2l0aW9uKVxufVxuIiwiZXhwb3J0IHZhciBNUyA9ICctbXMtJ1xuZXhwb3J0IHZhciBNT1ogPSAnLW1vei0nXG5leHBvcnQgdmFyIFdFQktJVCA9ICctd2Via2l0LSdcblxuZXhwb3J0IHZhciBDT01NRU5UID0gJ2NvbW0nXG5leHBvcnQgdmFyIFJVTEVTRVQgPSAncnVsZSdcbmV4cG9ydCB2YXIgREVDTEFSQVRJT04gPSAnZGVjbCdcblxuZXhwb3J0IHZhciBQQUdFID0gJ0BwYWdlJ1xuZXhwb3J0IHZhciBNRURJQSA9ICdAbWVkaWEnXG5leHBvcnQgdmFyIElNUE9SVCA9ICdAaW1wb3J0J1xuZXhwb3J0IHZhciBDSEFSU0VUID0gJ0BjaGFyc2V0J1xuZXhwb3J0IHZhciBWSUVXUE9SVCA9ICdAdmlld3BvcnQnXG5leHBvcnQgdmFyIFNVUFBPUlRTID0gJ0BzdXBwb3J0cydcbmV4cG9ydCB2YXIgRE9DVU1FTlQgPSAnQGRvY3VtZW50J1xuZXhwb3J0IHZhciBOQU1FU1BBQ0UgPSAnQG5hbWVzcGFjZSdcbmV4cG9ydCB2YXIgS0VZRlJBTUVTID0gJ0BrZXlmcmFtZXMnXG5leHBvcnQgdmFyIEZPTlRfRkFDRSA9ICdAZm9udC1mYWNlJ1xuZXhwb3J0IHZhciBDT1VOVEVSX1NUWUxFID0gJ0Bjb3VudGVyLXN0eWxlJ1xuZXhwb3J0IHZhciBGT05UX0ZFQVRVUkVfVkFMVUVTID0gJ0Bmb250LWZlYXR1cmUtdmFsdWVzJ1xuIiwiaW1wb3J0IHtJTVBPUlQsIENPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OLCBLRVlGUkFNRVN9IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7c3RybGVuLCBzaXplb2Z9IGZyb20gJy4vVXRpbGl0eS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSAoY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHZhciBvdXRwdXQgPSAnJ1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNoaWxkcmVuKVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0b3V0cHV0ICs9IGNhbGxiYWNrKGNoaWxkcmVuW2ldLCBpLCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0cmV0dXJuIG91dHB1dFxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5IChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0Y2FzZSBJTVBPUlQ6IGNhc2UgREVDTEFSQVRJT046IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQucmV0dXJuIHx8IGVsZW1lbnQudmFsdWVcblx0XHRjYXNlIENPTU1FTlQ6IHJldHVybiAnJ1xuXHRcdGNhc2UgS0VZRlJBTUVTOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSArICd9J1xuXHRcdGNhc2UgUlVMRVNFVDogZWxlbWVudC52YWx1ZSA9IGVsZW1lbnQucHJvcHMuam9pbignLCcpXG5cdH1cblxuXHRyZXR1cm4gc3RybGVuKGNoaWxkcmVuID0gc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSkgPyBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBjaGlsZHJlbiArICd9JyA6ICcnXG59XG4iLCJpbXBvcnQge01TLCBNT1osIFdFQktJVH0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHtoYXNoLCBjaGFyYXQsIHN0cmxlbiwgaW5kZXhvZiwgcmVwbGFjZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ICh2YWx1ZSwgbGVuZ3RoKSB7XG5cdHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuXHRcdC8vIGNvbG9yLWFkanVzdFxuXHRcdGNhc2UgNTEwMzpcblx0XHRcdHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWVcblx0XHQvLyBhbmltYXRpb24sIGFuaW1hdGlvbi0oZGVsYXl8ZGlyZWN0aW9ufGR1cmF0aW9ufGZpbGwtbW9kZXxpdGVyYXRpb24tY291bnR8bmFtZXxwbGF5LXN0YXRlfHRpbWluZy1mdW5jdGlvbilcblx0XHRjYXNlIDU3Mzc6IGNhc2UgNDIwMTogY2FzZSAzMTc3OiBjYXNlIDM0MzM6IGNhc2UgMTY0MTogY2FzZSA0NDU3OiBjYXNlIDI5MjE6XG5cdFx0Ly8gdGV4dC1kZWNvcmF0aW9uLCBmaWx0ZXIsIGNsaXAtcGF0aCwgYmFja2ZhY2UtdmlzaWJpbGl0eSwgY29sdW1uLCBib3gtZGVjb3JhdGlvbi1icmVha1xuXHRcdGNhc2UgNTU3MjogY2FzZSA2MzU2OiBjYXNlIDU4NDQ6IGNhc2UgMzE5MTogY2FzZSA2NjQ1OiBjYXNlIDMwMDU6XG5cdFx0Ly8gbWFzaywgbWFzay1pbWFnZSwgbWFzay0obW9kZXxjbGlwfHNpemUpLCBtYXNrLShyZXBlYXR8b3JpZ2luKSwgbWFzay1wb3NpdGlvbiwgbWFzay1jb21wb3NpdGUsXG5cdFx0Y2FzZSA2MzkxOiBjYXNlIDU4Nzk6IGNhc2UgNTYyMzogY2FzZSA2MTM1OiBjYXNlIDQ1OTk6IGNhc2UgNDg1NTpcblx0XHQvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXHRcdGNhc2UgNDIxNTogY2FzZSA2Mzg5OiBjYXNlIDUxMDk6IGNhc2UgNTM2NTogY2FzZSA1NjIxOiBjYXNlIDM4Mjk6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIGFwcGVhcmFuY2UsIHVzZXItc2VsZWN0LCB0cmFuc2Zvcm0sIGh5cGhlbnMsIHRleHQtc2l6ZS1hZGp1c3Rcblx0XHRjYXNlIDUzNDk6IGNhc2UgNDI0NjogY2FzZSA0ODEwOiBjYXNlIDY5Njg6IGNhc2UgMjc1Njpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1PWiArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gZmxleCwgZmxleC1kaXJlY3Rpb25cblx0XHRjYXNlIDY4Mjg6IGNhc2UgNDI2ODpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIG9yZGVyXG5cdFx0Y2FzZSA2MTY1OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC0nICsgdmFsdWUgKyB2YWx1ZVxuXHRcdC8vIGFsaWduLWl0ZW1zXG5cdFx0Y2FzZSA1MTg3OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgcmVwbGFjZSh2YWx1ZSwgLyhcXHcrKS4rKDpbXl0rKS8sIFdFQktJVCArICdib3gtJDEkMicgKyBNUyArICdmbGV4LSQxJDInKSArIHZhbHVlXG5cdFx0Ly8gYWxpZ24tc2VsZlxuXHRcdGNhc2UgNTQ0Mzpcblx0XHRcdHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtaXRlbS0nICsgcmVwbGFjZSh2YWx1ZSwgL2ZsZXgtfC1zZWxmLywgJycpICsgdmFsdWVcblx0XHQvLyBhbGlnbi1jb250ZW50XG5cdFx0Y2FzZSA0Njc1OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1saW5lLXBhY2snICsgcmVwbGFjZSh2YWx1ZSwgL2FsaWduLWNvbnRlbnR8ZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZVxuXHRcdC8vIGZsZXgtc2hyaW5rXG5cdFx0Y2FzZSA1NTQ4OlxuXHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnc2hyaW5rJywgJ25lZ2F0aXZlJykgKyB2YWx1ZVxuXHRcdC8vIGZsZXgtYmFzaXNcblx0XHRjYXNlIDUyOTI6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgdmFsdWVcblx0XHQvLyBmbGV4LWdyb3dcblx0XHRjYXNlIDYwNjA6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgJ2JveC0nICsgcmVwbGFjZSh2YWx1ZSwgJy1ncm93JywgJycpICsgV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdncm93JywgJ3Bvc2l0aXZlJykgKyB2YWx1ZVxuXHRcdC8vIHRyYW5zaXRpb25cblx0XHRjYXNlIDQ1NTQ6XG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgcmVwbGFjZSh2YWx1ZSwgLyhbXi1dKSh0cmFuc2Zvcm0pL2csICckMScgKyBXRUJLSVQgKyAnJDInKSArIHZhbHVlXG5cdFx0Ly8gY3Vyc29yXG5cdFx0Y2FzZSA2MTg3OlxuXHRcdFx0cmV0dXJuIHJlcGxhY2UocmVwbGFjZShyZXBsYWNlKHZhbHVlLCAvKHpvb20tfGdyYWIpLywgV0VCS0lUICsgJyQxJyksIC8oaW1hZ2Utc2V0KS8sIFdFQktJVCArICckMScpLCB2YWx1ZSwgJycpICsgdmFsdWVcblx0XHQvLyBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLWltYWdlXG5cdFx0Y2FzZSA1NDk1OiBjYXNlIDM5NTk6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpXG5cdFx0Ly8ganVzdGlmeS1jb250ZW50XG5cdFx0Y2FzZSA0OTY4OlxuXHRcdFx0cmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlXG5cdFx0Ly8gKG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUtKHN0YXJ0fGVuZClcblx0XHRjYXNlIDQwOTU6IGNhc2UgMzU4MzogY2FzZSA0MDY4OiBjYXNlIDI1MzI6XG5cdFx0XHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZVxuXHRcdC8vIChtaW58bWF4KT8od2lkdGh8aGVpZ2h0fGlubGluZS1zaXplfGJsb2NrLXNpemUpXG5cdFx0Y2FzZSA4MTE2OiBjYXNlIDcwNTk6IGNhc2UgNTc1MzogY2FzZSA1NTM1OlxuXHRcdGNhc2UgNTQ0NTogY2FzZSA1NzAxOiBjYXNlIDQ5MzM6IGNhc2UgNDY3Nzpcblx0XHRjYXNlIDU1MzM6IGNhc2UgNTc4OTogY2FzZSA1MDIxOiBjYXNlIDQ3NjU6XG5cdFx0XHQvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG5cdFx0XHRpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KVxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcblx0XHRcdFx0XHQvLyAobSlheC1jb250ZW50LCAobSlpbi1jb250ZW50XG5cdFx0XHRcdFx0Y2FzZSAxMDk6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyA0KSAhPT0gNDUpXG5cdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXHRcdFx0XHRcdGNhc2UgMTAyOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLis6KSguKyktKFteXSspLywgJyQxJyArIFdFQktJVCArICckMi0kMycgKyAnJDEnICsgTU9aICsgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMykgPT0gMTA4ID8gJyQzJyA6ICckMi0kMycpKSArIHZhbHVlXG5cdFx0XHRcdFx0Ly8gKHMpdHJldGNoXG5cdFx0XHRcdFx0Y2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRyZXR1cm4gfmluZGV4b2YodmFsdWUsICdzdHJldGNoJykgPyBwcmVmaXgocmVwbGFjZSh2YWx1ZSwgJ3N0cmV0Y2gnLCAnZmlsbC1hdmFpbGFibGUnKSwgbGVuZ3RoKSArIHZhbHVlIDogdmFsdWVcblx0XHRcdFx0fVxuXHRcdFx0YnJlYWtcblx0XHQvLyBwb3NpdGlvbjogc3RpY2t5XG5cdFx0Y2FzZSA0OTQ5OlxuXHRcdFx0Ly8gKHMpdGlja3k/XG5cdFx0XHRpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KVxuXHRcdFx0XHRicmVha1xuXHRcdC8vIGRpc3BsYXk6IChmbGV4fGlubGluZS1mbGV4KVxuXHRcdGNhc2UgNjQ0NDpcblx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG5cdFx0XHRcdC8vIHN0aWMoayl5XG5cdFx0XHRcdGNhc2UgMTA3OlxuXHRcdFx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZVxuXHRcdFx0XHQvLyAoaW5saW5lLSk/ZmwoZSl4XG5cdFx0XHRcdGNhc2UgMTAxOlxuXHRcdFx0XHRcdHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZVxuXHRcdFx0fVxuXHRcdFx0YnJlYWtcblx0XHQvLyB3cml0aW5nLW1vZGVcblx0XHRjYXNlIDU5MzY6XG5cdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG5cdFx0XHRcdC8vIHZlcnRpY2FsLWwocilcblx0XHRcdFx0Y2FzZSAxMTQ6XG5cdFx0XHRcdFx0cmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWVcblx0XHRcdFx0Ly8gdmVydGljYWwtcihsKVxuXHRcdFx0XHRjYXNlIDEwODpcblx0XHRcdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZVxuXHRcdFx0XHQvLyBob3Jpem9udGFsKC0pdGJcblx0XHRcdFx0Y2FzZSA0NTpcblx0XHRcdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWVcblx0fVxuXG5cdHJldHVybiB2YWx1ZVxufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIHRyaW0sIGZyb20sIHNpemVvZiwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgcmVwbGFjZSwgaW5kZXhvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtub2RlLCBjaGFyLCBwcmV2LCBuZXh0LCBwZWVrLCBjYXJldCwgYWxsb2MsIGRlYWxsb2MsIGRlbGltaXQsIHdoaXRlc3BhY2UsIGVzY2FwaW5nLCBpZGVudGlmaWVyLCBjb21tZW50ZXJ9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7b2JqZWN0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyhwYXJzZSgnJywgbnVsbCwgbnVsbCwgbnVsbCwgWycnXSwgdmFsdWUgPSBhbGxvYyh2YWx1ZSksIDAsIFswXSwgdmFsdWUpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNldHNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBzZXVkb1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkZWNsYXJhdGlvbnNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBydWxlLCBydWxlcywgcnVsZXNldHMsIHBzZXVkbywgcG9pbnRzLCBkZWNsYXJhdGlvbnMpIHtcblx0dmFyIGluZGV4ID0gMFxuXHR2YXIgb2Zmc2V0ID0gMFxuXHR2YXIgbGVuZ3RoID0gcHNldWRvXG5cdHZhciBhdHJ1bGUgPSAwXG5cdHZhciBwcm9wZXJ0eSA9IDBcblx0dmFyIHByZXZpb3VzID0gMFxuXHR2YXIgdmFyaWFibGUgPSAxXG5cdHZhciBzY2FubmluZyA9IDFcblx0dmFyIGFtcGVyc2FuZCA9IDFcblx0dmFyIGNoYXJhY3RlciA9IDBcblx0dmFyIHR5cGUgPSAnJ1xuXHR2YXIgcHJvcHMgPSBydWxlc1xuXHR2YXIgY2hpbGRyZW4gPSBydWxlc2V0c1xuXHR2YXIgcmVmZXJlbmNlID0gcnVsZVxuXHR2YXIgY2hhcmFjdGVycyA9IHR5cGVcblxuXHR3aGlsZSAoc2Nhbm5pbmcpXG5cdFx0c3dpdGNoIChwcmV2aW91cyA9IGNoYXJhY3RlciwgY2hhcmFjdGVyID0gbmV4dCgpKSB7XG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAocHJldmlvdXMgIT0gMTA4ICYmIGNoYXJhY3RlcnMuY2hhckNvZGVBdChsZW5ndGggLSAxKSA9PSA1OCkge1xuXHRcdFx0XHRcdGlmIChpbmRleG9mKGNoYXJhY3RlcnMgKz0gcmVwbGFjZShkZWxpbWl0KGNoYXJhY3RlciksICcmJywgJyZcXGYnKSwgJyZcXGYnKSAhPSAtMSlcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IC0xXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0Ly8gXCIgJyBbXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDkxOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFx0IFxcbiBcXHIgXFxzXG5cdFx0XHRjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gd2hpdGVzcGFjZShwcmV2aW91cylcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGVzY2FwaW5nKGNhcmV0KCkgLSAxLCA3KVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0Ly8gL1xuXHRcdFx0Y2FzZSA0Nzpcblx0XHRcdFx0c3dpdGNoIChwZWVrKCkpIHtcblx0XHRcdFx0XHRjYXNlIDQyOiBjYXNlIDQ3OlxuXHRcdFx0XHRcdFx0YXBwZW5kKGNvbW1lbnQoY29tbWVudGVyKG5leHQoKSwgY2FyZXQoKSksIHJvb3QsIHBhcmVudCksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6XG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSkgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEAgO1xuXHRcdFx0XHRcdGNhc2UgNTk6IGNoYXJhY3RlcnMgKz0gJzsnXG5cdFx0XHRcdFx0Ly8geyBydWxlL2F0LXJ1bGVcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YXBwZW5kKHJlZmVyZW5jZSA9IHJ1bGVzZXQoY2hhcmFjdGVycywgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcyA9IFtdLCBjaGlsZHJlbiA9IFtdLCBsZW5ndGgpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA5OiBjYXNlIDExNTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBydWxlICYmIGFwcGVuZChydWxlc2V0KHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgMCwgMCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcnVsZXMsIHByb3BzID0gW10sIGxlbmd0aCksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmRleCA9IG9mZnNldCA9IHByb3BlcnR5ID0gMCwgdmFyaWFibGUgPSBhbXBlcnNhbmQgPSAxLCB0eXBlID0gY2hhcmFjdGVycyA9ICcnLCBsZW5ndGggPSBwc2V1ZG9cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIDpcblx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdGxlbmd0aCA9IDEgKyBzdHJsZW4oY2hhcmFjdGVycyksIHByb3BlcnR5ID0gcHJldmlvdXNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmICh2YXJpYWJsZSA8IDEpXG5cdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PSAxMjMpXG5cdFx0XHRcdFx0XHQtLXZhcmlhYmxlXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2hhcmFjdGVyID09IDEyNSAmJiB2YXJpYWJsZSsrID09IDAgJiYgcHJldigpID09IDEyNSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXJzICs9IGZyb20oY2hhcmFjdGVyKSwgY2hhcmFjdGVyICogdmFyaWFibGUpIHtcblx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IG9mZnNldCA+IDAgPyAxIDogKGNoYXJhY3RlcnMgKz0gJ1xcZicsIC0xKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAsXG5cdFx0XHRcdFx0Y2FzZSA0NDpcblx0XHRcdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IChzdHJsZW4oY2hhcmFjdGVycykgLSAxKSAqIGFtcGVyc2FuZCwgYW1wZXJzYW5kID0gMVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAXG5cdFx0XHRcdFx0Y2FzZSA2NDpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChwZWVrKCkgPT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQobmV4dCgpKVxuXG5cdFx0XHRcdFx0XHRhdHJ1bGUgPSBwZWVrKCksIG9mZnNldCA9IGxlbmd0aCA9IHN0cmxlbih0eXBlID0gY2hhcmFjdGVycyArPSBpZGVudGlmaWVyKGNhcmV0KCkpKSwgY2hhcmFjdGVyKytcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0XHRpZiAocHJldmlvdXMgPT09IDQ1ICYmIHN0cmxlbihjaGFyYWN0ZXJzKSA9PSAyKVxuXHRcdFx0XHRcdFx0XHR2YXJpYWJsZSA9IDBcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRyZXR1cm4gcnVsZXNldHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgpXG59XG4iLCJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IHsgZGVhbGxvYywgYWxsb2MsIG5leHQsIHRva2VuLCBmcm9tLCBwZWVrLCBkZWxpbWl0LCBzbGljZSwgcG9zaXRpb24sIHN0cmluZ2lmeSwgQ09NTUVOVCwgcnVsZXNoZWV0LCBtaWRkbGV3YXJlLCBwcmVmaXhlciwgc2VyaWFsaXplLCBjb21waWxlIH0gZnJvbSAnc3R5bGlzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBsYXN0ID0gZnVuY3Rpb24gbGFzdChhcnIpIHtcbiAgcmV0dXJuIGFyci5sZW5ndGggPyBhcnJbYXJyLmxlbmd0aCAtIDFdIDogbnVsbDtcbn07IC8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS90aHlzdWx0YW4vc3R5bGlzLmpzL2Jsb2IvZTY4NDNjMzczZWJjYmJmYWRlMjVlYmNjMjNmNTQwZWQ4NTA4ZGEwYS9zcmMvVG9rZW5pemVyLmpzI0wyMzktTDI0NFxuXG5cbnZhciBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcgPSBmdW5jdGlvbiBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcoYmVnaW4sIHBvaW50cywgaW5kZXgpIHtcbiAgdmFyIHByZXZpb3VzID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IDA7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSBwZWVrKCk7IC8vICZcXGZcblxuICAgIGlmIChwcmV2aW91cyA9PT0gMzggJiYgY2hhcmFjdGVyID09PSAxMikge1xuICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIG5leHQoKTtcbiAgfVxuXG4gIHJldHVybiBzbGljZShiZWdpbiwgcG9zaXRpb24pO1xufTtcblxudmFyIHRvUnVsZXMgPSBmdW5jdGlvbiB0b1J1bGVzKHBhcnNlZCwgcG9pbnRzKSB7XG4gIC8vIHByZXRlbmQgd2UndmUgc3RhcnRlZCB3aXRoIGEgY29tbWFcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjaGFyYWN0ZXIgPSA0NDtcblxuICBkbyB7XG4gICAgc3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8vICZcXGZcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gMzggJiYgcGVlaygpID09PSAxMikge1xuICAgICAgICAgIC8vIHRoaXMgaXMgbm90IDEwMCUgY29ycmVjdCwgd2UgZG9uJ3QgYWNjb3VudCBmb3IgbGl0ZXJhbCBzZXF1ZW5jZXMgaGVyZSAtIGxpa2UgZm9yIGV4YW1wbGUgcXVvdGVkIHN0cmluZ3NcbiAgICAgICAgICAvLyBzdHlsaXMgaW5zZXJ0cyBcXGYgYWZ0ZXIgJiB0byBrbm93IHdoZW4gJiB3aGVyZSBpdCBzaG91bGQgcmVwbGFjZSB0aGlzIHNlcXVlbmNlIHdpdGggdGhlIGNvbnRleHQgc2VsZWN0b3JcbiAgICAgICAgICAvLyBhbmQgd2hlbiBpdCBzaG91bGQganVzdCBjb25jYXRlbmF0ZSB0aGUgb3V0ZXIgYW5kIGlubmVyIHNlbGVjdG9yc1xuICAgICAgICAgIC8vIGl0J3MgdmVyeSB1bmxpa2VseSBmb3IgdGhpcyBzZXF1ZW5jZSB0byBhY3R1YWxseSBhcHBlYXIgaW4gYSBkaWZmZXJlbnQgY29udGV4dCwgc28gd2UganVzdCBsZXZlcmFnZSB0aGlzIGZhY3QgaGVyZVxuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcocG9zaXRpb24gLSAxLCBwb2ludHMsIGluZGV4KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBkZWxpbWl0KGNoYXJhY3Rlcik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIC8vIGNvbW1hXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDQ0KSB7XG4gICAgICAgICAgLy8gY29sb25cbiAgICAgICAgICBwYXJzZWRbKytpbmRleF0gPSBwZWVrKCkgPT09IDU4ID8gJyZcXGYnIDogJyc7XG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IHBhcnNlZFtpbmRleF0ubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIC8vIGZhbGx0aHJvdWdoXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZnJvbShjaGFyYWN0ZXIpO1xuICAgIH1cbiAgfSB3aGlsZSAoY2hhcmFjdGVyID0gbmV4dCgpKTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxudmFyIGdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXModmFsdWUsIHBvaW50cykge1xuICByZXR1cm4gZGVhbGxvYyh0b1J1bGVzKGFsbG9jKHZhbHVlKSwgcG9pbnRzKSk7XG59OyAvLyBXZWFrU2V0IHdvdWxkIGJlIG1vcmUgYXBwcm9wcmlhdGUsIGJ1dCBvbmx5IFdlYWtNYXAgaXMgc3VwcG9ydGVkIGluIElFMTFcblxuXG52YXIgZml4ZWRFbGVtZW50cyA9IC8qICNfX1BVUkVfXyAqL25ldyBXZWFrTWFwKCk7XG52YXIgY29tcGF0ID0gZnVuY3Rpb24gY29tcGF0KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8ICFlbGVtZW50LnBhcmVudCB8fCAvLyBwb3NpdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBjb250YWlucyBwc2V1ZG9cbiAgLy8gbmVnYXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgaGFzIGJlZW4gYWxyZWFkeSBwcmVmaXhlZFxuICBlbGVtZW50Lmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlLFxuICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gIHZhciBpc0ltcGxpY2l0UnVsZSA9IGVsZW1lbnQuY29sdW1uID09PSBwYXJlbnQuY29sdW1uICYmIGVsZW1lbnQubGluZSA9PT0gcGFyZW50LmxpbmU7XG5cbiAgd2hpbGUgKHBhcmVudC50eXBlICE9PSAncnVsZScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIGlmICghcGFyZW50KSByZXR1cm47XG4gIH0gLy8gc2hvcnQtY2lyY3VpdCBmb3IgdGhlIHNpbXBsZXN0IGNhc2VcblxuXG4gIGlmIChlbGVtZW50LnByb3BzLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZS5jaGFyQ29kZUF0KDApICE9PSA1OFxuICAvKiBjb2xvbiAqL1xuICAmJiAhZml4ZWRFbGVtZW50cy5nZXQocGFyZW50KSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBpZiB0aGlzIGlzIGFuIGltcGxpY2l0bHkgaW5zZXJ0ZWQgcnVsZSAodGhlIG9uZSBlYWdlcmx5IGluc2VydGVkIGF0IHRoZSBlYWNoIG5ldyBuZXN0ZWQgbGV2ZWwpXG4gIC8vIHRoZW4gdGhlIHByb3BzIGhhcyBhbHJlYWR5IGJlZW4gbWFuaXB1bGF0ZWQgYmVmb3JlaGFuZCBhcyB0aGV5IHRoYXQgYXJyYXkgaXMgc2hhcmVkIGJldHdlZW4gaXQgYW5kIGl0cyBcInJ1bGUgcGFyZW50XCJcblxuXG4gIGlmIChpc0ltcGxpY2l0UnVsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpeGVkRWxlbWVudHMuc2V0KGVsZW1lbnQsIHRydWUpO1xuICB2YXIgcG9pbnRzID0gW107XG4gIHZhciBydWxlcyA9IGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpO1xuICB2YXIgcGFyZW50UnVsZXMgPSBwYXJlbnQucHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmVudFJ1bGVzLmxlbmd0aDsgaisrLCBrKyspIHtcbiAgICAgIGVsZW1lbnQucHJvcHNba10gPSBwb2ludHNbaV0gPyBydWxlc1tpXS5yZXBsYWNlKC8mXFxmL2csIHBhcmVudFJ1bGVzW2pdKSA6IHBhcmVudFJ1bGVzW2pdICsgXCIgXCIgKyBydWxlc1tpXTtcbiAgICB9XG4gIH1cbn07XG52YXIgcmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgPT09ICdkZWNsJykge1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG5cbiAgICBpZiAoIC8vIGNoYXJjb2RlIGZvciBsXG4gICAgdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMTA4ICYmIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgdmFsdWUuY2hhckNvZGVBdCgyKSA9PT0gOTgpIHtcbiAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICAgICAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxufTtcbnZhciBpZ25vcmVGbGFnID0gJ2Vtb3Rpb24tZGlzYWJsZS1zZXJ2ZXItcmVuZGVyaW5nLXVuc2FmZS1zZWxlY3Rvci13YXJuaW5nLXBsZWFzZS1kby1ub3QtdXNlLXRoaXMtdGhlLXdhcm5pbmctZXhpc3RzLWZvci1hLXJlYXNvbic7XG5cbnZhciBpc0lnbm9yaW5nQ29tbWVudCA9IGZ1bmN0aW9uIGlzSWdub3JpbmdDb21tZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICEhZWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09ICdjb21tJyAmJiBlbGVtZW50LmNoaWxkcmVuLmluZGV4T2YoaWdub3JlRmxhZykgPiAtMTtcbn07XG5cbnZhciBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSA9IGZ1bmN0aW9uIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKGNhY2hlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnKSByZXR1cm47XG4gICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBlbGVtZW50LnZhbHVlLm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgIGlmICh1bnNhZmVQc2V1ZG9DbGFzc2VzICYmIGNhY2hlLmNvbXBhdCAhPT0gdHJ1ZSkge1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gaW5kZXggPiAwID8gY2hpbGRyZW5baW5kZXggLSAxXSA6IG51bGw7XG5cbiAgICAgIGlmIChwcmV2RWxlbWVudCAmJiBpc0lnbm9yaW5nQ29tbWVudChsYXN0KHByZXZFbGVtZW50LmNoaWxkcmVuKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1bnNhZmVQc2V1ZG9DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKHVuc2FmZVBzZXVkb0NsYXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgcHNldWRvIGNsYXNzIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzICsgXCJcXFwiIGlzIHBvdGVudGlhbGx5IHVuc2FmZSB3aGVuIGRvaW5nIHNlcnZlci1zaWRlIHJlbmRlcmluZy4gVHJ5IGNoYW5naW5nIGl0IHRvIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzLnNwbGl0KCctY2hpbGQnKVswXSArIFwiLW9mLXR5cGVcXFwiLlwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBpc0ltcG9ydFJ1bGUgPSBmdW5jdGlvbiBpc0ltcG9ydFJ1bGUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMSkgPT09IDEwNSAmJiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgwKSA9PT0gNjQ7XG59O1xuXG52YXIgaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzID0gZnVuY3Rpb24gaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzKGluZGV4LCBjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmICghaXNJbXBvcnRSdWxlKGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTsgLy8gdXNlIHRoaXMgdG8gcmVtb3ZlIGluY29ycmVjdCBlbGVtZW50cyBmcm9tIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuLy8gc28gdGhleSBkb24ndCBnZXQgaGFuZGVkIHRvIHRoZSBgc2hlZXRgIChvciBhbnl0aGluZyBlbHNlKVxuLy8gYXMgdGhhdCBjb3VsZCBwb3RlbnRpYWxseSBsZWFkIHRvIGFkZGl0aW9uYWwgbG9ncyB3aGljaCBpbiB0dXJuIGNvdWxkIGJlIG92ZXJoZWxtaW5nIHRvIHRoZSB1c2VyXG5cblxudmFyIG51bGxpZnlFbGVtZW50ID0gZnVuY3Rpb24gbnVsbGlmeUVsZW1lbnQoZWxlbWVudCkge1xuICBlbGVtZW50LnR5cGUgPSAnJztcbiAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICBlbGVtZW50W1wicmV0dXJuXCJdID0gJyc7XG4gIGVsZW1lbnQuY2hpbGRyZW4gPSAnJztcbiAgZWxlbWVudC5wcm9wcyA9ICcnO1xufTtcblxudmFyIGluY29ycmVjdEltcG9ydEFsYXJtID0gZnVuY3Rpb24gaW5jb3JyZWN0SW1wb3J0QWxhcm0oZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGlmICghaXNJbXBvcnRSdWxlKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQucGFyZW50KSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBuZXN0ZWQgaW5zaWRlIG90aGVyIHJ1bGVzLiBQbGVhc2UgbW92ZSBpdCB0byB0aGUgdG9wIGxldmVsIGFuZCBwdXQgaXQgYmVmb3JlIHJlZ3VsYXIgcnVsZXMuIEtlZXAgaW4gbWluZCB0aGF0IHRoZXkgY2FuIG9ubHkgYmUgdXNlZCB3aXRoaW4gZ2xvYmFsIHN0eWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH0gZWxzZSBpZiAoaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzKGluZGV4LCBjaGlsZHJlbikpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIGFmdGVyIG90aGVyIHJ1bGVzLiBQbGVhc2UgcHV0IHlvdXIgYEBpbXBvcnRgIHJ1bGVzIGJlZm9yZSB5b3VyIG90aGVyIHJ1bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfVxufTtcblxudmFyIGRlZmF1bHRTdHlsaXNQbHVnaW5zID0gW3ByZWZpeGVyXTtcblxudmFyIGNyZWF0ZUNhY2hlID0gZnVuY3Rpb24gY3JlYXRlQ2FjaGUob3B0aW9ucykge1xuICB2YXIga2V5ID0gb3B0aW9ucy5rZXk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWtleSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBoYXZlIHRvIGNvbmZpZ3VyZSBga2V5YCBmb3IgeW91ciBjYWNoZS4gUGxlYXNlIG1ha2Ugc3VyZSBpdCdzIHVuaXF1ZSAoYW5kIG5vdCBlcXVhbCB0byAnY3NzJykgYXMgaXQncyB1c2VkIGZvciBsaW5raW5nIHN0eWxlcyB0byB5b3VyIGNhY2hlLlxcblwiICsgXCJJZiBtdWx0aXBsZSBjYWNoZXMgc2hhcmUgdGhlIHNhbWUga2V5IHRoZXkgbWlnaHQgXFxcImZpZ2h0XFxcIiBmb3IgZWFjaCBvdGhlcidzIHN0eWxlIGVsZW1lbnRzLlwiKTtcbiAgfVxuXG4gIGlmICgga2V5ID09PSAnY3NzJykge1xuICAgIHZhciBzc3JTdHlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXTpub3QoW2RhdGEtc10pXCIpOyAvLyBnZXQgU1NSZWQgc3R5bGVzIG91dCBvZiB0aGUgd2F5IG9mIFJlYWN0J3MgaHlkcmF0aW9uXG4gICAgLy8gZG9jdW1lbnQuaGVhZCBpcyBhIHNhZmUgcGxhY2UgdG8gbW92ZSB0aGVtIHRvKHRob3VnaCBub3RlIGRvY3VtZW50LmhlYWQgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IHBsYWNlIHRoZXkgd2lsbCBiZSlcbiAgICAvLyBub3RlIHRoaXMgdmVyeSB2ZXJ5IGludGVudGlvbmFsbHkgdGFyZ2V0cyBhbGwgc3R5bGUgZWxlbWVudHMgcmVnYXJkbGVzcyBvZiB0aGUga2V5IHRvIGVuc3VyZVxuICAgIC8vIHRoYXQgY3JlYXRpbmcgYSBjYWNoZSB3b3JrcyBpbnNpZGUgb2YgcmVuZGVyIG9mIGEgUmVhY3QgY29tcG9uZW50XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNzclN0eWxlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIHdlIHdhbnQgdG8gb25seSBtb3ZlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBzcGFjZSBpbiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgLy8gYmVjYXVzZSB0aGF0IGluZGljYXRlcyB0aGF0IGl0IGlzIGFuIEVtb3Rpb24gMTEgc2VydmVyLXNpZGUgcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICAgIC8vIHdoaWxlIHdlIHdpbGwgYWxyZWFkeSBpZ25vcmUgRW1vdGlvbiAxMSBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgYmVjYXVzZSBvZiB0aGUgOm5vdChbZGF0YS1zXSkgcGFydCBpbiB0aGUgc2VsZWN0b3JcbiAgICAgIC8vIEVtb3Rpb24gMTAgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGRpZCBub3QgaGF2ZSBkYXRhLXMgKGJ1dCBpbXBvcnRhbnRseSBkaWQgbm90IGhhdmUgYSBzcGFjZSBpbiB0aGVpciBkYXRhLWVtb3Rpb24gYXR0cmlidXRlcylcbiAgICAgIC8vIHNvIGNoZWNraW5nIGZvciB0aGUgc3BhY2UgZW5zdXJlcyB0aGF0IGxvYWRpbmcgRW1vdGlvbiAxMSBhZnRlciBFbW90aW9uIDEwIGhhcyBpbnNlcnRlZCBzb21lIHN0eWxlc1xuICAgICAgLy8gd2lsbCBub3QgcmVzdWx0IGluIHRoZSBFbW90aW9uIDEwIHN0eWxlcyBiZWluZyBkZXN0cm95ZWRcbiAgICAgIHZhciBkYXRhRW1vdGlvbkF0dHJpYnV0ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nKTtcblxuICAgICAgaWYgKGRhdGFFbW90aW9uQXR0cmlidXRlLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgc3R5bGlzUGx1Z2lucyA9IG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCBkZWZhdWx0U3R5bGlzUGx1Z2lucztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307IC8vICRGbG93Rml4TWVcblxuICB2YXIgY29udGFpbmVyO1xuICB2YXIgbm9kZXNUb0h5ZHJhdGUgPSBbXTtcblxuICB7XG4gICAgY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXIgfHwgZG9jdW1lbnQuaGVhZDtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKCAvLyB0aGlzIG1lYW5zIHdlIHdpbGwgaWdub3JlIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYSBzcGFjZSBpbiB0aGVtIHdoaWNoXG4gICAgLy8gbWVhbnMgdGhhdCB0aGUgc3R5bGUgZWxlbWVudHMgd2UncmUgbG9va2luZyBhdCBhcmUgb25seSBFbW90aW9uIDExIHNlcnZlci1yZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25ePVxcXCJcIiArIGtleSArIFwiIFxcXCJdXCIpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGF0dHJpYiA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbW90aW9uXCIpLnNwbGl0KCcgJyk7IC8vICRGbG93Rml4TWVcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhdHRyaWIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5zZXJ0ZWRbYXR0cmliW2ldXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGVzVG9IeWRyYXRlLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgX2luc2VydDtcblxuICB2YXIgb21uaXByZXNlbnRQbHVnaW5zID0gW2NvbXBhdCwgcmVtb3ZlTGFiZWxdO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgb21uaXByZXNlbnRQbHVnaW5zLnB1c2goY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oe1xuICAgICAgZ2V0IGNvbXBhdCgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmNvbXBhdDtcbiAgICAgIH1cblxuICAgIH0pLCBpbmNvcnJlY3RJbXBvcnRBbGFybSk7XG4gIH1cblxuICB7XG4gICAgdmFyIGN1cnJlbnRTaGVldDtcbiAgICB2YXIgZmluYWxpemluZ1BsdWdpbnMgPSBbc3RyaW5naWZ5LCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudC5yb290KSB7XG4gICAgICAgIGlmIChlbGVtZW50W1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50W1wicmV0dXJuXCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnZhbHVlICYmIGVsZW1lbnQudHlwZSAhPT0gQ09NTUVOVCkge1xuICAgICAgICAgIC8vIGluc2VydCBlbXB0eSBydWxlIGluIG5vbi1wcm9kdWN0aW9uIGVudmlyb25tZW50c1xuICAgICAgICAgIC8vIHNvIEBlbW90aW9uL2plc3QgY2FuIGdyYWIgYGtleWAgZnJvbSB0aGUgKEpTKURPTSBmb3IgY2FjaGVzIHdpdGhvdXQgYW55IHJ1bGVzIGluc2VydGVkIHlldFxuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudC52YWx1ZSArIFwie31cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDogcnVsZXNoZWV0KGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KHJ1bGUpO1xuICAgIH0pXTtcbiAgICB2YXIgc2VyaWFsaXplciA9IG1pZGRsZXdhcmUob21uaXByZXNlbnRQbHVnaW5zLmNvbmNhdChzdHlsaXNQbHVnaW5zLCBmaW5hbGl6aW5nUGx1Z2lucykpO1xuXG4gICAgdmFyIHN0eWxpcyA9IGZ1bmN0aW9uIHN0eWxpcyhzdHlsZXMpIHtcbiAgICAgIHJldHVybiBzZXJpYWxpemUoY29tcGlsZShzdHlsZXMpLCBzZXJpYWxpemVyKTtcbiAgICB9O1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICBjdXJyZW50U2hlZXQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50U2hlZXQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBzZXJpYWxpemVkLm1hcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzdHlsaXMoc2VsZWN0b3IgPyBzZWxlY3RvciArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIiA6IHNlcmlhbGl6ZWQuc3R5bGVzKTtcblxuICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgIGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGUgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hlZXQ6IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIHNwZWVkeTogb3B0aW9ucy5zcGVlZHksXG4gICAgICBwcmVwZW5kOiBvcHRpb25zLnByZXBlbmQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogb3B0aW9ucy5pbnNlcnRpb25Qb2ludFxuICAgIH0pLFxuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGluc2VydGVkOiBpbnNlcnRlZCxcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnQ6IF9pbnNlcnRcbiAgfTtcbiAgY2FjaGUuc2hlZXQuaHlkcmF0ZShub2Rlc1RvSHlkcmF0ZSk7XG4gIHJldHVybiBjYWNoZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNhY2hlO1xuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdGNhc2UgS0VZRlJBTUVTOlxuXHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge3ZhbHVlOiByZXBsYWNlKGVsZW1lbnQudmFsdWUsICdAJywgJ0AnICsgV0VCS0lUKX0pXSwgY2FsbGJhY2spXG5cdFx0XHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdFx0XHRpZiAoZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyA6cmVhZC0ob25seXx3cml0ZSlcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6cmVhZC1vbmx5JzogY2FzZSAnOnJlYWQtd3JpdGUnOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldfSldLCBjYWxsYmFjaylcblx0XHRcdFx0XHRcdFx0XHQvLyA6cGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6OnBsYWNlaG9sZGVyJzpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldfSlcblx0XHRcdFx0XHRcdFx0XHRcdF0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuICcnXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1lc3BhY2UgKGVsZW1lbnQpIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRlbGVtZW50LnByb3BzID0gZWxlbWVudC5wcm9wcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBjb21iaW5lKHRva2VuaXplKHZhbHVlKSwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgMCkpIHtcblx0XHRcdFx0XHRcdC8vIFxcZlxuXHRcdFx0XHRcdFx0Y2FzZSAxMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHN1YnN0cih2YWx1ZSwgMSwgc3RybGVuKHZhbHVlKSlcblx0XHRcdFx0XHRcdC8vIFxcMCAoICsgPiB+XG5cdFx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgNDA6IGNhc2UgNDM6IGNhc2UgNjI6IGNhc2UgMTI2OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdC8vIDpcblx0XHRcdFx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdFx0XHRcdGlmIChjaGlsZHJlblsrK2luZGV4XSA9PT0gJ2dsb2JhbCcpXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5baW5kZXhdID0gJycsIGNoaWxkcmVuWysraW5kZXhdID0gJ1xcZicgKyBzdWJzdHIoY2hpbGRyZW5baW5kZXhdLCBpbmRleCA9IDEsIC0xKVxuXHRcdFx0XHRcdFx0Ly8gXFxzXG5cdFx0XHRcdFx0XHRjYXNlIDMyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAwOiBlbGVtZW50ID0gdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzaXplb2YoY2hpbGRyZW4pID4gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRjYXNlIGluZGV4ID0gc2l6ZW9mKGNoaWxkcmVuKSAtIDE6IGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMiA/IHZhbHVlICsgZWxlbWVudCArIGVsZW1lbnQgOiB2YWx1ZSArIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHR9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbXVybXVyMjtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcbnZhciBVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUiA9IFwiWW91IGhhdmUgcGFzc2VkIGluIGZhbHN5IHZhbHVlIGFzIHN0eWxlIG9iamVjdCdzIGtleSAoY2FuIGhhcHBlbiB3aGVuIGluIGV4YW1wbGUgeW91IHBhc3MgdW5leHBvcnRlZCBjb21wb25lbnQgYXMgY29tcHV0ZWQga2V5KS5cIjtcbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBhbmltYXRpb25SZWdleCA9IC9fRU1PXyhbXl9dKz8pXyhbXl0qPylfRU1PXy9nO1xuXG52YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuIHByb3BlcnR5LmNoYXJDb2RlQXQoMSkgPT09IDQ1O1xufTtcblxudmFyIGlzUHJvY2Vzc2FibGVWYWx1ZSA9IGZ1bmN0aW9uIGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJztcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBpc0N1c3RvbVByb3BlcnR5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcblxudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IHAxLFxuICAgICAgICAgICAgICBzdHlsZXM6IHAyLFxuICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8odmFyfGF0dHJ8Y291bnRlcnM/fHVybHwoKChyZXBlYXRpbmctKT8obGluZWFyfHJhZGlhbCkpfGNvbmljKS1ncmFkaWVudClcXCh8KG5vLSk/KG9wZW58Y2xvc2UpLXF1b3RlLztcbiAgdmFyIGNvbnRlbnRWYWx1ZXMgPSBbJ25vcm1hbCcsICdub25lJywgJ2luaXRpYWwnLCAnaW5oZXJpdCcsICd1bnNldCddO1xuICB2YXIgb2xkUHJvY2Vzc1N0eWxlVmFsdWUgPSBwcm9jZXNzU3R5bGVWYWx1ZTtcbiAgdmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG4gIHZhciBoeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcbiAgdmFyIGh5cGhlbmF0ZWRDYWNoZSA9IHt9O1xuXG4gIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgY29udGVudFZhbHVlcy5pbmRleE9mKHZhbHVlKSA9PT0gLTEgJiYgIWNvbnRlbnRWYWx1ZVBhdHRlcm4udGVzdCh2YWx1ZSkgJiYgKHZhbHVlLmNoYXJBdCgwKSAhPT0gdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpIHx8IHZhbHVlLmNoYXJBdCgwKSAhPT0gJ1wiJyAmJiB2YWx1ZS5jaGFyQXQoMCkgIT09IFwiJ1wiKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3Ugc2VlbSB0byBiZSB1c2luZyBhIHZhbHVlIGZvciAnY29udGVudCcgd2l0aG91dCBxdW90ZXMsIHRyeSByZXBsYWNpbmcgaXQgd2l0aCBgY29udGVudDogJ1xcXCJcIiArIHZhbHVlICsgXCJcXFwiJ2BcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb2Nlc3NlZCA9IG9sZFByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpO1xuXG4gICAgaWYgKHByb2Nlc3NlZCAhPT0gJycgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiBrZXkuaW5kZXhPZignLScpICE9PSAtMSAmJiBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVXNpbmcga2ViYWItY2FzZSBmb3IgY3NzIHByb3BlcnRpZXMgaW4gb2JqZWN0cyBpcyBub3Qgc3VwcG9ydGVkLiBEaWQgeW91IG1lYW4gXCIgKyBrZXkucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKS5yZXBsYWNlKGh5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChzdHIsIF9jaGFyKSB7XG4gICAgICAgIHJldHVybiBfY2hhci50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSkgKyBcIj9cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbikge1xuICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKGludGVycG9sYXRpb24uX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi50b1N0cmluZygpID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBAZW1vdGlvbi9iYWJlbC1wbHVnaW4uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBpbnRlcnBvbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICBzdHlsZXM6IGludGVycG9sYXRpb24uc3R5bGVzLFxuICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbi5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGludGVycG9sYXRpb24ubmV4dDtcblxuICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdCB0aGUgbW9zdCBlZmZpY2llbnQgdGhpbmcgZXZlciBidXQgdGhpcyBpcyBhIHByZXR0eSByYXJlIGNhc2VcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB3aWxsIGJlIHZlcnkgZmV3IGl0ZXJhdGlvbnMgb2YgdGhpcyBnZW5lcmFsbHlcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5leHQubmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IG5leHQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXMgPSBpbnRlcnBvbGF0aW9uLnN0eWxlcyArIFwiO1wiO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGVzICs9IGludGVycG9sYXRpb24ubWFwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIGlmIChtZXJnZWRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzQ3Vyc29yID0gY3Vyc29yO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzKTtcbiAgICAgICAgICBjdXJzb3IgPSBwcmV2aW91c0N1cnNvcjtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRnVuY3Rpb25zIHRoYXQgYXJlIGludGVycG9sYXRlZCBpbiBjc3MgY2FsbHMgd2lsbCBiZSBzdHJpbmdpZmllZC5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gaW50ZXJwb2xhdGlvbi5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgIHZhciBmYWtlVmFyTmFtZSA9IFwiYW5pbWF0aW9uXCIgKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICBtYXRjaGVkLnB1c2goXCJjb25zdCBcIiArIGZha2VWYXJOYW1lICsgXCIgPSBrZXlmcmFtZXNgXCIgKyBwMi5yZXBsYWNlKC9eQGtleWZyYW1lcyBhbmltYXRpb24tXFx3Ky8sICcnKSArIFwiYFwiKTtcbiAgICAgICAgICByZXR1cm4gXCIke1wiICsgZmFrZVZhck5hbWUgKyBcIn1cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYGtleWZyYW1lc2Agb3V0cHV0IGdvdCBpbnRlcnBvbGF0ZWQgaW50byBwbGFpbiBzdHJpbmcsIHBsZWFzZSB3cmFwIGl0IHdpdGggYGNzc2AuXFxuXFxuJyArICdJbnN0ZWFkIG9mIGRvaW5nIHRoaXM6XFxuXFxuJyArIFtdLmNvbmNhdChtYXRjaGVkLCBbXCJgXCIgKyByZXBsYWNlZCArIFwiYFwiXSkuam9pbignXFxuJykgKyAnXFxuXFxuWW91IHNob3VsZCB3cmFwIGl0IHdpdGggYGNzc2AgbGlrZSB0aGlzOlxcblxcbicgKyAoXCJjc3NgXCIgKyByZXBsYWNlZCArIFwiYFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH0gLy8gZmluYWxpemUgc3RyaW5nIHZhbHVlcyAocmVndWxhciBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgaW50ZXJwb2xhdGVkIGludG8gY3NzIGNhbGxzKVxuXG5cbiAgaWYgKHJlZ2lzdGVyZWQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgdmFyIGNhY2hlZCA9IHJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9iaikge1xuICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqW2ldKSArIFwiO1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW19rZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZCAhPSBudWxsICYmIHJlZ2lzdGVyZWRbdmFsdWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgcmVnaXN0ZXJlZFt2YWx1ZV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2tleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggQGVtb3Rpb24vYmFiZWwtcGx1Z2luLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWVbX2ldKSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgdmFsdWUpO1xuXG4gICAgICAgICAgc3dpdGNoIChfa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgaW50ZXJwb2xhdGVkICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIF9rZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgaW50ZXJwb2xhdGVkICsgXCJ9XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufVxuXG52YXIgbGFiZWxQYXR0ZXJuID0gL2xhYmVsOlxccyooW15cXHM7XFxue10rKVxccyooO3wkKS9nO1xudmFyIHNvdXJjZU1hcFBhdHRlcm47XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNvdXJjZU1hcFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vZztcbn0gLy8gdGhpcyBpcyB0aGUgY3Vyc29yIGZvciBrZXlmcmFtZXNcbi8vIGtleWZyYW1lcyBhcmUgc3RvcmVkIG9uIHRoZSBTZXJpYWxpemVkU3R5bGVzIG9iamVjdCBhcyBhIGxpbmtlZCBsaXN0XG5cblxudmFyIGN1cnNvcjtcbnZhciBzZXJpYWxpemVTdHlsZXMgPSBmdW5jdGlvbiBzZXJpYWxpemVTdHlsZXMoYXJncywgcmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSAnb2JqZWN0JyAmJiBhcmdzWzBdICE9PSBudWxsICYmIGFyZ3NbMF0uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXJnc1swXTtcbiAgfVxuXG4gIHZhciBzdHJpbmdNb2RlID0gdHJ1ZTtcbiAgdmFyIHN0eWxlcyA9ICcnO1xuICBjdXJzb3IgPSB1bmRlZmluZWQ7XG4gIHZhciBzdHJpbmdzID0gYXJnc1swXTtcblxuICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHJpbmdNb2RlID0gZmFsc2U7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHN0cmluZ3MpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgfVxuXG4gICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gIH0gLy8gd2Ugc3RhcnQgYXQgMSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIGZpcnN0IGFyZ1xuXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGFyZ3NbaV0pO1xuXG4gICAgaWYgKHN0cmluZ01vZGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNvdXJjZU1hcDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgc291cmNlTWFwID0gbWF0Y2g7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgLy8gJEZsb3dGaXhNZSB3ZSBrbm93IGl0J3Mgbm90IG51bGxcbiAgICBtYXRjaFsxXTtcbiAgfVxuXG4gIHZhciBuYW1lID0gaGFzaFN0cmluZyhzdHlsZXMpICsgaWRlbnRpZmllck5hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFNlcmlhbGl6ZWRTdHlsZXMgdHlwZSBkb2Vzbid0IGhhdmUgdG9TdHJpbmcgcHJvcGVydHkgKGFuZCB3ZSBkb24ndCB3YW50IHRvIGFkZCBpdClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgbWFwOiBzb3VyY2VNYXAsXG4gICAgICBuZXh0OiBjdXJzb3IsXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIllvdSBoYXZlIHRyaWVkIHRvIHN0cmluZ2lmeSBvYmplY3QgcmV0dXJuZWQgZnJvbSBgY3NzYCBmdW5jdGlvbi4gSXQgaXNuJ3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBkaXJlY3RseSAoZS5nLiBhcyB2YWx1ZSBvZiB0aGUgYGNsYXNzTmFtZWAgcHJvcCksIGJ1dCByYXRoZXIgaGFuZGVkIHRvIGVtb3Rpb24gc28gaXQgY2FuIGhhbmRsZSBpdCAoZS5nLiBhcyB2YWx1ZSBvZiBgY3NzYCBwcm9wKS5cIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIG5leHQ6IGN1cnNvclxuICB9O1xufTtcblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciByZWdpc3RlclN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxufTtcbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgdmFyIG1heWJlU3R5bGVzID0gY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfSB3aGlsZSAoY3VycmVudCAhPT0gdW5kZWZpbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcyB9O1xuIiwiaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5cbmZ1bmN0aW9uIGluc2VydFdpdGhvdXRTY29waW5nKGNhY2hlLCBzZXJpYWxpemVkKSB7XG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY2FjaGUuaW5zZXJ0KCcnLCBzZXJpYWxpemVkLCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2UocmVnaXN0ZXJlZCwgY3NzLCBjbGFzc05hbWUpIHtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbXTtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICBpZiAocmVnaXN0ZXJlZFN0eWxlcy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJldHVybiByYXdDbGFzc05hbWUgKyBjc3MocmVnaXN0ZXJlZFN0eWxlcyk7XG59XG5cbnZhciBjcmVhdGVFbW90aW9uID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvbihvcHRpb25zKSB7XG4gIHZhciBjYWNoZSA9IGNyZWF0ZUNhY2hlKG9wdGlvbnMpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgY2FjaGUuc2hlZXQuc3BlZWR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy5jdHIgIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3BlZWR5IG11c3QgYmUgY2hhbmdlZCBiZWZvcmUgYW55IHJ1bGVzIGFyZSBpbnNlcnRlZCcpO1xuICAgIH1cblxuICAgIHRoaXMuaXNTcGVlZHkgPSB2YWx1ZTtcbiAgfTtcblxuICBjYWNoZS5jb21wYXQgPSB0cnVlO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQsIHVuZGVmaW5lZCk7XG4gICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoYXJncywgY2FjaGUucmVnaXN0ZXJlZCk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IFwiYW5pbWF0aW9uLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICAgIGluc2VydFdpdGhvdXRTY29waW5nKGNhY2hlLCB7XG4gICAgICBuYW1lOiBzZXJpYWxpemVkLm5hbWUsXG4gICAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIGFuaW1hdGlvbiArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIlxuICAgIH0pO1xuICAgIHJldHVybiBhbmltYXRpb247XG4gIH07XG5cbiAgdmFyIGluamVjdEdsb2JhbCA9IGZ1bmN0aW9uIGluamVjdEdsb2JhbCgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBpbnNlcnRXaXRob3V0U2NvcGluZyhjYWNoZSwgc2VyaWFsaXplZCk7XG4gIH07XG5cbiAgdmFyIGN4ID0gZnVuY3Rpb24gY3goKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKGNhY2hlLnJlZ2lzdGVyZWQsIGNzcywgY2xhc3NuYW1lcyhhcmdzKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgaW5qZWN0R2xvYmFsOiBpbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzOiBrZXlmcmFtZXMsXG4gICAgaHlkcmF0ZTogZnVuY3Rpb24gaHlkcmF0ZShpZHMpIHtcbiAgICAgIGlkcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRba2V5XSA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZsdXNoOiBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgIGNhY2hlLnJlZ2lzdGVyZWQgPSB7fTtcbiAgICAgIGNhY2hlLmluc2VydGVkID0ge307XG4gICAgICBjYWNoZS5zaGVldC5mbHVzaCgpO1xuICAgIH0sXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHNoZWV0OiBjYWNoZS5zaGVldCxcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgZ2V0UmVnaXN0ZXJlZFN0eWxlczogZ2V0UmVnaXN0ZXJlZFN0eWxlcy5iaW5kKG51bGwsIGNhY2hlLnJlZ2lzdGVyZWQpLFxuICAgIG1lcmdlOiBtZXJnZS5iaW5kKG51bGwsIGNhY2hlLnJlZ2lzdGVyZWQsIGNzcylcbiAgfTtcbn07XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVtb3Rpb247XG4iLCJpbXBvcnQgJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUVtb3Rpb24gZnJvbSAnLi4vY3JlYXRlLWluc3RhbmNlL2Rpc3QvZW1vdGlvbi1jc3MtY3JlYXRlLWluc3RhbmNlLmVzbS5qcyc7XG5cbnZhciBfY3JlYXRlRW1vdGlvbiA9IGNyZWF0ZUVtb3Rpb24oe1xuICBrZXk6ICdjc3MnXG59KSxcbiAgICBmbHVzaCA9IF9jcmVhdGVFbW90aW9uLmZsdXNoLFxuICAgIGh5ZHJhdGUgPSBfY3JlYXRlRW1vdGlvbi5oeWRyYXRlLFxuICAgIGN4ID0gX2NyZWF0ZUVtb3Rpb24uY3gsXG4gICAgbWVyZ2UgPSBfY3JlYXRlRW1vdGlvbi5tZXJnZSxcbiAgICBnZXRSZWdpc3RlcmVkU3R5bGVzID0gX2NyZWF0ZUVtb3Rpb24uZ2V0UmVnaXN0ZXJlZFN0eWxlcyxcbiAgICBpbmplY3RHbG9iYWwgPSBfY3JlYXRlRW1vdGlvbi5pbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzID0gX2NyZWF0ZUVtb3Rpb24ua2V5ZnJhbWVzLFxuICAgIGNzcyA9IF9jcmVhdGVFbW90aW9uLmNzcyxcbiAgICBzaGVldCA9IF9jcmVhdGVFbW90aW9uLnNoZWV0LFxuICAgIGNhY2hlID0gX2NyZWF0ZUVtb3Rpb24uY2FjaGU7XG5cbmV4cG9ydCB7IGNhY2hlLCBjc3MsIGN4LCBmbHVzaCwgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaHlkcmF0ZSwgaW5qZWN0R2xvYmFsLCBrZXlmcmFtZXMsIG1lcmdlLCBzaGVldCB9O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKHVzZUhvb2spIHtcbiAgdmFyIENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG4gIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzKSB7XG4gICAgdmFyIHZhbHVlID0gdXNlSG9vayhwcm9wcy5pbml0aWFsU3RhdGUpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0sIHByb3BzLmNoaWxkcmVuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVzZUNvbnRhaW5lcigpIHtcbiAgICB2YXIgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KENvbnRleHQpO1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21wb25lbnQgbXVzdCBiZSB3cmFwcGVkIHdpdGggPENvbnRhaW5lci5Qcm92aWRlcj5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgdXNlQ29udGFpbmVyOiB1c2VDb250YWluZXJcbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZUNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgcmV0dXJuIGNvbnRhaW5lci51c2VDb250YWluZXIoKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQ29udGFpbmVyLCB1c2VDb250YWluZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuc3RhdGVkLW5leHQubWpzLm1hcFxuIiwiaW1wb3J0IHsgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbnZhciB1cGRhdGVSZWR1Y2VyID0gZnVuY3Rpb24gKG51bSkgeyByZXR1cm4gKG51bSArIDEpICUgMTAwMDAwMDsgfTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVVwZGF0ZSgpIHtcbiAgICB2YXIgX2EgPSB1c2VSZWR1Y2VyKHVwZGF0ZVJlZHVjZXIsIDApLCB1cGRhdGUgPSBfYVsxXTtcbiAgICByZXR1cm4gdXBkYXRlO1xufVxuIiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCdcclxuaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IHVzZVVwZGF0ZSB9IGZyb20gJ3JlYWN0LXVzZSdcclxuXHJcblxyXG5jb25zdCB1c2VXaXNlU3RhdGUgPSAoaW5pdGlhbGl6ZVZhbHVlKSA9PiB7XHJcblx0Y29uc3QgZGF0YSA9IHVzZVJlZihcclxuXHRcdHR5cGVvZiBpbml0aWFsaXplVmFsdWUgPT0gJ2Z1bmN0aW9uJ1xyXG5cdFx0XHQ/IGluaXRpYWxpemVWYWx1ZSgpXHJcblx0XHRcdDogeyAuLi5pbml0aWFsaXplVmFsdWUgfVxyXG5cdCk7XHJcblx0Y29uc3QgdXBkYXRlID0gdXNlVXBkYXRlKClcclxuXHRjb25zdCBoYW5kbGVyID0gdXNlUmVmKHtcclxuXHRcdGdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpIHtcclxuXHRcdFx0aWYoLyhfX3NldCkkL2cudGVzdChrZXkpKSB7XHJcblx0XHRcdFx0cmV0dXJuIChuKSA9PiB7XHJcblx0XHRcdFx0XHRpZih0YXJnZXRba2V5LnJlcGxhY2UoLyhfX3NldCkkL2csICcnKV0gPT0gbilcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0dGFyZ2V0W2tleS5yZXBsYWNlKC8oX19zZXQpJC9nLCAnJyldID0gblxyXG5cdFx0XHRcdFx0dXBkYXRlKClcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFJlZmxlY3QuZ2V0KC4uLmFyZ3VtZW50cyk7XHJcblx0XHR9LFxyXG5cdFx0c2V0KG9iaiwga2V5LCB2YWx1ZSkge1xyXG5cdFx0XHRpZihvYmpba2V5XSA9PSB2YWx1ZSlcclxuXHRcdFx0XHRyZXR1cm4gUmVmbGVjdC5zZXQoLi4uYXJndW1lbnRzKTtcclxuXHRcdFx0UmVmbGVjdC5zZXQoLi4uYXJndW1lbnRzKTtcclxuXHRcdFx0dXBkYXRlKClcclxuXHRcdFx0cmV0dXJuIFJlZmxlY3Quc2V0KC4uLmFyZ3VtZW50cyk7XHJcblx0XHR9XHJcblx0fSlcclxuXHRjb25zdCByID0gdXNlUmVmKG5ldyBQcm94eShkYXRhLmN1cnJlbnQsIGhhbmRsZXIuY3VycmVudCkpO1xyXG5cdHJldHVybiByLmN1cnJlbnQ7XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXNlV2lzZVN0YXRlIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgY3JlYXRlQ29udGFpbmVyIH0gZnJvbSAndW5zdGF0ZWQtbmV4dCdcclxuXHJcbmltcG9ydCB1c2VXaXNlU3RhdGUgZnJvbSAnLi8uLi9saWIvdXNlV2lzZVN0YXRlJ1xyXG5cclxuXHJcbmNvbnN0IEFsZXJ0ID0gY3JlYXRlQ29udGFpbmVyKCgpID0+IHtcclxuXHRjb25zdCBzdGF0ZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRjYWxsYmFja3M6IFtdXHJcblx0fSlcclxuXHJcblx0Y29uc3QgcmVnaXN0ZXIgPSB1c2VDYWxsYmFjayhjYiA9PiB7XHJcblx0XHRzdGF0ZS5jYWxsYmFja3MucHVzaChjYilcclxuXHR9LCBbXSlcclxuXHJcblx0Y29uc3QgcHVzaCA9IHVzZUNhbGxiYWNrKG1lc3NhZ2UgPT4ge1xyXG5cdFx0Zm9yKGxldCBjYWxsYmFjayBvZiBzdGF0ZS5jYWxsYmFja3MpXHJcblx0XHRcdGNhbGxiYWNrKG1lc3NhZ2UpXHJcblx0fSwgW10pXHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRyZWdpc3RlcixcclxuXHRcdHB1c2hcclxuXHR9XHJcbn0pXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWxlcnQiLCJpbXBvcnQgeyBjcmVhdGVDb250YWluZXIgfSBmcm9tICd1bnN0YXRlZC1uZXh0J1xyXG5pbXBvcnQgdXNlVGhyb3R0bGVkRWZmZWN0ICBmcm9tICd1c2UtdGhyb3R0bGVkLWVmZmVjdCdcclxuXHJcbmltcG9ydCBRUkNvZGVNIGZyb20gJ3FyY29kZSdcclxuXHJcbmltcG9ydCB1c2VXaXNlU3RhdGUgZnJvbSAnLi8uLi9saWIvdXNlV2lzZVN0YXRlJ1xyXG5cclxuXHJcbkFycmF5LnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXNbdGhpcy5sZW5ndGggLSAxXTtcclxufVxyXG5cclxuY29uc3QgbW9kID0gKG4sIG0pID0+IHtcclxuXHRuICU9IG1cclxuXHRpZihuIDwgMClcclxuXHRcdG4gKz0gbVxyXG5cdHJldHVybiBuXHJcbn1cclxuXHJcbmNvbnN0IGRpZmYgPSAoYSwgYikgPT4gTWF0aC5hYnMoYSAtIGIpXHJcbi8vIGNvbnN0IG5vcm1hbGl6ZSA9IHZhbHVlID0+IHZhbHVlID09IDAgPyAwIDogdmFsdWUgLyBNYXRoLmFicyh2YWx1ZSlcclxuLy8gY29uc3QgYW1pbiA9IChhLCBiKSA9PiBhID49IDAgJiYgYiA+PSAwID8gTWF0aC5taW4oYSwgYikgOiBNYXRoLm1heChhLCBiKVxyXG4vLyBjb25zdCBhbWF4ID0gKGEsIGIpID0+IGEgPj0gMCAmJiBiID49IDAgPyBNYXRoLm1heChhLCBiKSA6IE1hdGgubWluKGEsIGIpXHJcblxyXG5cclxuY29uc3QgWCA9IDA7XHJcbmNvbnN0IFkgPSAxO1xyXG5jb25zdCBENCA9IFsgWyAwLCAtMSBdLCBbIDEsIDAgXSwgWyAwLCAxIF0sIFsgLTEsIDAgXSBdXHJcbmNvbnN0IEQ4ID0gWyBbIC0xLCAtMV0sIFsgMCwgLTEgXSwgWyAxLCAtMSBdLCBbIDEsIDAgXSwgWyAxLCAxIF0sIFsgMCwgMSBdLCBbIC0xLCAxIF0sIFsgLTEsIDAgXSBdXHJcbmNvbnN0IElMUCA9IFsgWyAwLCAwIF0sIFsgMSwgMCBdLCBbIDEsIDEgXSwgWyAwLCAxIF0gXSAvLyBJbml0IGxpbmUgcG9pbnRcclxuLy8gY29uc3QgSUxQVyA9IFsgWyAxLCAwIF0sIFsgMSwgMSBdLCBbIDAsIDEgXSwgWyAwLCAwIF0gXSAvLyBJbml0IGxpbmUgcG9pbnQgd2hpdGVcclxuLy8gY29uc3QgTjQgPSBbIFsgMCwgMCBdLCBbIDAsIC0xIF0sIFsgLTEsIC0xIF0sIFsgLTEsIDAgXSBdXHJcblxyXG5jb25zdCBENF9VUCA9IDBcclxuY29uc3QgRDRfRE9XTiA9IDJcclxuY29uc3QgRDRfUklHSFQgPSAxXHJcbmNvbnN0IEQ0X0xFRlQgPSAzXHJcblxyXG4vLyBjb25zdCBCTE9DS19EQVRBX0JMQUNLID0gdHJ1ZTtcclxuY29uc3QgQkxPQ0tfREFUQV9XSElURSA9IGZhbHNlO1xyXG5cclxuY29uc3QgRVlFX1NJWkUgPSA3XHJcblxyXG5jb25zdCBFUlJPUl9DT1JSRUNUSU9OID0gWyAnTCcsICdNJywgJ1EnLCAnSCcgXVxyXG5cclxuXHJcbmNvbnN0IFFSQ29kZSA9IGNyZWF0ZUNvbnRhaW5lcigoKSA9PiB7XHJcblxyXG5cdGNvbnN0IHFyY29kZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRpc1ZhbGlkOiBmYWxzZSxcclxuXHRcdGNvbnRlbnQ6IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvKFxcLyspJC9nLCAnJyksXHJcblx0XHRtYXJnaW46IDIsXHJcblx0XHRzaXplOiAyMSxcclxuXHRcdHNoYXBlczogW10sXHJcblx0XHRyb3VuZENvcm5lcjogMCxcclxuXHRcdGV5ZVJvdW5kQ29ybmVyOiAwLFxyXG5cdFx0Zm9yZWdyb3VuZENvbG9yOiBbIDAsIDAsIDAgXSxcclxuXHRcdGJhY2tncm91bmRDb2xvcjogWyAwLCAwLCAxMDAgXVxyXG5cdH0pXHJcblxyXG5cdHVzZVRocm90dGxlZEVmZmVjdCgoKSA9PiB7XHJcblxyXG5cdFx0LypcclxuXHRcdGxldCByYXdTaXplLCByYXdEYXRhXHJcblxyXG5cdFx0aWYoIWRhdGEgfHwgZGF0YS5sZW5ndGggPT0gMCkge1xyXG5cclxuXHRcdFx0cmF3U2l6ZSA9IDIxXHJcblx0XHRcdHJhd0RhdGEgPSBcclxuYDExMTExMTEwMTAxMDEwMTExMTExMVxyXG4xMDAwMDAxMDAxMDEwMDEwMDAwMDFcclxuMTAxMTEwMTAxMDEwMTAxMDExMTAxXHJcbjEwMTExMDEwMDEwMTAwMTAxMTEwMVxyXG4xMDExMTAxMDEwMTAxMDEwMTExMDFcclxuMTAwMDAwMTAwMTAxMDAxMDAwMDAxXHJcbjExMTExMTEwMTAxMDEwMTExMTExMVxyXG4wMDAwMDAwMDAxMDEwMDAwMDAwMDBcclxuMTAxMDEwMTAxMDEwMTAxMDEwMTAxXHJcbjAxMDEwMTAxMDEwMTAxMDEwMTAxMFxyXG4xMDEwMTAxMDEwMTAxMDEwMTAxMDFcclxuMDEwMTAxMDEwMTAxMDEwMTAxMDEwXHJcbjEwMTAxMDEwMTAxMDEwMTAxMDEwMVxyXG4wMDAwMDAwMDAxMDEwMTAxMDEwMTBcclxuMTExMTExMTAxMDEwMTAxMDEwMTAxXHJcbjEwMDAwMDEwMDEwMTAxMDEwMTAxMFxyXG4xMDExMTAxMDEwMTAxMDEwMTAxMDFcclxuMTAxMTEwMTAwMTAxMDEwMTAxMDEwXHJcbjEwMTExMDEwMTAxMDEwMTAxMDEwMVxyXG4xMDAwMDAxMDAxMDEwMTAxMDEwMTBcclxuMTExMTExMTAxMDEwMTAxMDEwMTAxYC5yZXBsYWNlKC9cXG4vZywgJycpLnNwbGl0KCcnKS5tYXAobiA9PiBOdW1iZXIobikpXHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGxldCBkYXRhTW9kdWxlID0gUVJDb2RlTS5jcmVhdGUoZGF0YSwgeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogJ0wnIH0pLm1vZHVsZXNcclxuXHJcblx0XHRcdGxldCBsID0gMVxyXG5cdFx0XHR3aGlsZShkYXRhTW9kdWxlLnNpemUgPD0gMjEgJiYgbCA8IDQpIHtcclxuXHRcdFx0XHRkYXRhTW9kdWxlID0gUVJDb2RlTS5jcmVhdGUoZGF0YSwgeyBlcnJvckNvcnJlY3Rpb25MZXZlbDogRVJST1JfQ09SUkVDVElPTltsXSB9KS5tb2R1bGVzXHJcblx0XHRcdFx0bCsrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyYXdTaXplID0gZGF0YU1vZHVsZS5zaXplXHJcblx0XHRcdHJhd0RhdGEgPSBkYXRhTW9kdWxlLmRhdGFcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHJhd1NpemUsIHJhd0RhdGFcclxuXHJcblx0XHRpZighcXJjb2RlLmlzSW5pdGlhbGl6ZWQpIHtcclxuXHJcblx0XHRcdHJhd1NpemUgPSAyNVxyXG5cdFx0XHRyYXdEYXRhID0gXHJcbmAxMTExMTExMDAwMDAwMDAwMDAxMTExMTExXHJcbjEwMDAwMDEwMDAwMDAwMDAwMDEwMDAwMDFcclxuMTAxMTEwMTAwMDAwMDAwMDAwMTAxMTEwMVxyXG4xMDExMTAxMDAwMDAwMDAwMDAxMDExMTAxXHJcbjEwMTExMDEwMDAwMDAwMDAwMDEwMTExMDFcclxuMTAwMDAwMTAwMDAwMDAwMDAwMTAwMDAwMVxyXG4xMTExMTExMDEwMTAxMDEwMTAxMTExMTExXHJcbjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcclxuMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMFxyXG4wMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXHJcbjAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDBcclxuMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFxyXG4wMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwXHJcbjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcclxuMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMFxyXG4wMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXHJcbjAwMDAwMDEwMDAwMDAwMDAxMTExMTAwMDBcclxuMDAwMDAwMDAwMDAwMDAwMDEwMDAxMDAwMFxyXG4xMTExMTExMDAwMDAwMDAwMTAxMDEwMDAwXHJcbjEwMDAwMDEwMDAwMDAwMDAxMDAwMTAwMDBcclxuMTAxMTEwMTAwMDAwMDAwMDExMTExMDAwMFxyXG4xMDExMTAxMDAwMDAwMDAwMDAwMDAwMDAwXHJcbjEwMTExMDEwMDAwMDAwMDAwMDAwMDAwMDBcclxuMTAwMDAwMTAwMDAwMDAwMDAwMDAwMDAwMFxyXG4xMTExMTExMDAwMDAwMDAwMDAwMDAwMDAwYC5yZXBsYWNlKC9cXG4vZywgJycpLnNwbGl0KCcnKS5tYXAobiA9PiBOdW1iZXIobikpXHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdCovXHJcblxyXG5cdFx0aWYoIXFyY29kZS5pc1ZhbGlkIHx8ICFxcmNvZGUuY29udGVudCB8fCBxcmNvZGUuY29udGVudC5sZW5ndGggPT0gMClcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdGxldCBkYXRhTW9kdWxlID0gUVJDb2RlTS5jcmVhdGUocXJjb2RlLmNvbnRlbnQsIHsgZXJyb3JDb3JyZWN0aW9uTGV2ZWw6ICdMJyB9KS5tb2R1bGVzXHJcblxyXG5cdFx0bGV0IGwgPSAxXHJcblx0XHR3aGlsZShkYXRhTW9kdWxlLnNpemUgPD0gMjEgJiYgbCA8IDQpIHtcclxuXHRcdFx0ZGF0YU1vZHVsZSA9IFFSQ29kZU0uY3JlYXRlKHFyY29kZS5jb250ZW50LCB7IGVycm9yQ29ycmVjdGlvbkxldmVsOiBFUlJPUl9DT1JSRUNUSU9OW2xdIH0pLm1vZHVsZXNcclxuXHRcdFx0bCsrO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCByYXdTaXplID0gZGF0YU1vZHVsZS5zaXplXHJcblx0XHRsZXQgcmF3RGF0YSA9IGRhdGFNb2R1bGUuZGF0YVxyXG5cdFxyXG5cclxuXHRcdGxldCBzaXplID0gcmF3U2l6ZSArIChxcmNvZGUubWFyZ2luICogMilcclxuXHRcdGxldCBibG9ja3MgPSBBcnJheShzaXplKVxyXG5cdFx0Zm9yKGxldCB5PTA7IHk8c2l6ZTsgeSsrKSB7XHJcblx0XHRcdGJsb2Nrc1t5XSA9IEFycmF5KHNpemUpXHJcblx0XHRcdGZvcihsZXQgeD0wOyB4PHNpemU7IHgrKykge1xyXG5cdFx0XHRcdGxldCBfeCA9IHggLSBxcmNvZGUubWFyZ2luXHJcblx0XHRcdFx0bGV0IF95ID0geSAtIHFyY29kZS5tYXJnaW5cclxuXHJcblx0XHRcdFx0YmxvY2tzW3ldW3hdID0ge1xyXG5cdFx0XHRcdFx0Z3JvdXBJbmRleDogdW5kZWZpbmVkXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJsb2Nrc1t5XVt4XS5kYXRhID1cclxuXHRcdFx0XHRcdF94IDwgMCB8fCBfeSA8IDAgfHwgX3ggPj0gcmF3U2l6ZSB8fCBfeSA+PSByYXdTaXplXHJcblx0XHRcdFx0XHRcdD8gMFxyXG5cdFx0XHRcdFx0XHQ6IHJhd0RhdGFbKF95ICogcmF3U2l6ZSkgKyBfeF1cclxuXHRcdFx0XHRibG9ja3NbeV1beF0udHlwZSA9XHJcblx0XHRcdFx0XHRfeCA8IDAgfHwgX3kgPCAwIHx8IF94ID49IHJhd1NpemUgfHwgX3kgPj0gcmF3U2l6ZVxyXG5cdFx0XHRcdFx0XHQ/IDBcclxuXHRcdFx0XHRcdFx0OiAoX3ggPCBFWUVfU0laRSAmJiBfeSA8IEVZRV9TSVpFKSB8fCAoIF94ID49IHJhd1NpemUgLSBFWUVfU0laRSAmJiBfeSA8IEVZRV9TSVpFKSB8fCAoX3ggPCBFWUVfU0laRSAmJiBfeSA+PSByYXdTaXplIC0gRVlFX1NJWkUpID8gMSA6IDBcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdC8qXHJcblx0XHRsZXQgZCA9ICcnXHJcblxyXG5cdFx0Zm9yKGxldCB5PTA7IHk8dGhpcy5zaXplOyB5KyspIHtcclxuXHRcdFx0Zm9yKGxldCB4PTA7IHg8dGhpcy5zaXplOyB4KyspIHtcclxuXHRcdFx0XHQvLyBkICs9IHRoaXMuYmxvY2tzW3ldW3hdLmRhdGEgPyAnWCcgOiAnICdcclxuXHRcdFx0XHRkICs9IHRoaXMuYmxvY2tzW3ldW3hdLnR5cGUgPyAnWCcgOiAnICdcclxuXHRcdFx0fVxyXG5cdFx0XHRkICs9ICdcXG4nXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc29sZS5sb2coZClcclxuXHRcdCovXHJcblxyXG5cdFx0bGV0IHNoYXBlcyA9IFtdXHJcblx0XHRsZXQgYmxvY2tHcm91cHMgPSBbXVxyXG5cdFx0bGV0IGJsb2NrR3JvdXBJbmRleCA9IC0xXHJcblx0XHRsZXQgbWFyZ2luQmxvY2tzID0gW11cclxuXHRcdGxldCBpc0dyb3VwZWQgPSBmYWxzZVxyXG5cclxuXHRcdGNvbnN0IGdyb3VwSXNsYW5kID0gKHApID0+IHtcclxuXHJcblx0XHRcdGlmKGJsb2Nrc1twW1ldXVtwW1hdXS5ncm91cEluZGV4ICE9IHVuZGVmaW5lZClcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHRsZXQgZGF0YSA9IGJsb2Nrc1twW1ldXVtwW1hdXS5kYXRhXHJcblx0XHRcclxuXHRcdFx0aWYoIWJsb2NrR3JvdXBzW2Jsb2NrR3JvdXBJbmRleF0pIHtcclxuXHRcdFx0XHRibG9ja0dyb3Vwc1tibG9ja0dyb3VwSW5kZXhdID0ge1xyXG5cdFx0XHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0XHRcdGJsb2NrczogW11cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRibG9ja3NbcFtZXV1bcFtYXV0uZ3JvdXBJbmRleCA9IGJsb2NrR3JvdXBJbmRleFxyXG5cdFx0XHRibG9ja0dyb3Vwc1tibG9ja0dyb3VwSW5kZXhdLmJsb2Nrcy5wdXNoKFsgcFtYXSwgcFtZXSBdKVxyXG5cdFx0XHRpc0dyb3VwZWQgPSB0cnVlXHJcblx0XHRcclxuXHRcdFx0aWYoIWRhdGEpIHtcclxuXHRcdFx0XHRENC5mb3JFYWNoKEQgPT4ge1xyXG5cdFx0XHJcblx0XHRcdFx0XHRsZXQgeCA9IHBbWF0gKyBEW1hdXHJcblx0XHRcdFx0XHRsZXQgeSA9IHBbWV0gKyBEW1ldXHJcblx0XHRcclxuXHRcdFx0XHRcdGlmKHggPCAwIHx8IHkgPCAwIHx8IHggPj0gc2l6ZSB8fCB5ID49IHNpemUpXHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFxyXG5cdFx0XHRcdFx0aWYoYmxvY2tzW3ldW3hdLmRhdGEpXHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFxyXG5cdFx0XHRcdFx0bWFyZ2luQmxvY2tzLnB1c2goW3gsIHldKVxyXG5cdFx0XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHREOC5mb3JFYWNoKEQgPT4ge1xyXG5cdFx0XHJcblx0XHRcdFx0XHRsZXQgeCA9IHBbWF0gKyBEW1hdXHJcblx0XHRcdFx0XHRsZXQgeSA9IHBbWV0gKyBEW1ldXHJcblx0XHRcclxuXHRcdFx0XHRcdGlmKHggPCAwIHx8IHkgPCAwIHx8IHggPj0gc2l6ZSB8fCB5ID49IHNpemUpXHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFxyXG5cdFx0XHRcdFx0aWYoIWJsb2Nrc1t5XVt4XS5kYXRhKVxyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcclxuXHRcdFx0XHRcdG1hcmdpbkJsb2Nrcy5wdXNoKFt4LCB5XSlcclxuXHRcdFxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHR3aGlsZShtYXJnaW5CbG9ja3MubGVuZ3RoKSB7XHJcblx0XHRcdFx0Z3JvdXBJc2xhbmQobWFyZ2luQmxvY2tzLnNoaWZ0KCkpXHJcblx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRyZXR1cm4gaXNHcm91cGVkO1xyXG5cdFx0XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yKGxldCB5PTA7IHk8c2l6ZTsgeSsrKSB7XHJcblx0XHRcdGZvcihsZXQgeD0wOyB4PHNpemU7IHgrKykge1xyXG5cdFx0XHRcdGdyb3VwSXNsYW5kKFt4LCB5XSlcclxuXHRcdFx0XHRpZihpc0dyb3VwZWQpIHtcclxuXHRcdFx0XHRcdGJsb2NrR3JvdXBJbmRleCsrXHJcblx0XHRcdFx0XHRtYXJnaW5CbG9ja3MgPSBbXVxyXG5cdFx0XHRcdFx0aXNHcm91cGVkID0gZmFsc2VcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmb3IobGV0IG49MDsgbjxibG9ja0dyb3Vwcy5sZW5ndGg7IG4rKykge1xyXG5cclxuXHRcdFx0bGV0IGJsb2NrR3JvdXAgPSBibG9ja0dyb3Vwc1tuXVxyXG5cdFx0XHJcblx0XHRcdGxldCBwb2ludHMgPSBbXVxyXG5cdFx0XHRsZXQgZGlyZWN0aW9ucyA9IFtdXHJcblxyXG5cdFx0XHRsZXQgbCA9IDBcclxuXHRcdFx0bGV0IGlzQ2xvc2VMb29wID0gZmFsc2U7XHJcblx0XHRcdHdoaWxlKCFpc0Nsb3NlTG9vcCkge1xyXG5cdFx0XHJcblx0XHRcdFx0bCsrO1xyXG5cdFx0XHJcblx0XHRcdFx0aWYobCA+IDk5OTk5OTk5OSlcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHJcblx0XHRcdFx0aWYocG9pbnRzLmxlbmd0aCA9PSAwKSB7XHJcblx0XHRcclxuXHRcdFx0XHRcdGlmKGJsb2NrR3JvdXAuZGF0YSA9PSBCTE9DS19EQVRBX1dISVRFKSB7XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0bGV0IHgxID0gYmxvY2tHcm91cC5ibG9ja3NbMF1bWF1cclxuXHRcdFx0XHRcdFx0bGV0IHkxID0gYmxvY2tHcm91cC5ibG9ja3NbMF1bWV1cclxuXHRcdFx0XHRcdFx0bGV0IHgyID0geDEgKyAxXHJcblx0XHRcdFx0XHRcdGxldCB5MiA9IHkxXHJcblx0XHRcclxuXHRcdFx0XHRcdFx0cG9pbnRzLnB1c2goWyB4MSwgeTEgXSlcclxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9ucy5wdXNoKHVuZGVmaW5lZClcclxuXHRcdFx0XHRcdFx0cG9pbnRzLnB1c2goWyB4MiwgeTIgXSlcclxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9ucy5wdXNoKDEpXHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Zm9yKGxldCBkPTA7IGQ8NDsgZCsrKSB7XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0XHRsZXQgRCA9IEQ0W2RdXHJcblx0XHRcdFx0XHRcdFx0bGV0IG5lYXJieUJsb2NrWCA9IGJsb2NrR3JvdXAuYmxvY2tzWzBdW1hdICsgRFtYXVxyXG5cdFx0XHRcdFx0XHRcdGxldCBuZWFyYnlCbG9ja1kgPSBibG9ja0dyb3VwLmJsb2Nrc1swXVtZXSArIERbWV1cclxuXHRcdFx0XHRcdFx0XHRsZXQgYmxvY2sgPSBibG9ja3NbbmVhcmJ5QmxvY2tZXVtuZWFyYnlCbG9ja1hdXHJcblx0XHRcclxuXHRcdFx0XHRcdFx0XHRpZihibG9jay5ncm91cEluZGV4ICE9IG4pIHtcclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHggPSBibG9ja0dyb3VwLmJsb2Nrc1swXVtYXVxyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IHkgPSBibG9ja0dyb3VwLmJsb2Nrc1swXVtZXVxyXG5cdFx0XHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgbGQgPSBtb2QoZCArIDEsIDQpXHJcblx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdGxldCB4MSA9IHggKyBJTFBbZF1bWF1cclxuXHRcdFx0XHRcdFx0XHRcdGxldCB5MSA9IHkgKyBJTFBbZF1bWV1cclxuXHRcdFx0XHRcdFx0XHRcdGxldCB4MiA9IHgxICsgRDRbbGRdW1hdXHJcblx0XHRcdFx0XHRcdFx0XHRsZXQgeTIgPSB5MSArIEQ0W2xkXVtZXVxyXG5cdFx0XHJcblx0XHRcdFx0XHRcdFx0XHRwb2ludHMucHVzaChbIHgxLCB5MSBdKVxyXG5cdFx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9ucy5wdXNoKHVuZGVmaW5lZClcclxuXHRcdFx0XHRcdFx0XHRcdHBvaW50cy5wdXNoKFsgeDIsIHkyIF0pXHJcblx0XHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25zLnB1c2gobGQpXHJcblx0XHRcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRsZXQgbGFzdFBvaW50ID0gcG9pbnRzLmxhc3QoKVxyXG5cdFx0XHRcdGxldCBsYXN0TGluZURpcmVjdGlvbiA9IGRpcmVjdGlvbnMubGFzdCgpXHJcblx0XHRcclxuXHRcdFx0XHRsZXQgVEIzID0gWyBbIDAsIC0xIF0sIFsgMCwgMCBdLCBbIC0xLCAwIF0gXVxyXG5cdFx0XHRcdGxldCBORCA9IFsgWyAwLCAtMSBdLCBbIDEsIDAgXSwgWyAwLCAxIF0gXVxyXG5cdFx0XHRcdGxldCBOREQgPSBbIEQ0X1VQLCBENF9SSUdIVCwgRDRfRE9XTiBdXHJcblx0XHRcclxuXHRcdFx0XHRpZihibG9ja0dyb3VwLmRhdGEgPT0gQkxPQ0tfREFUQV9XSElURSkge1xyXG5cdFx0XHRcdFx0aWYobGFzdExpbmVEaXJlY3Rpb24gPT0gRDRfUklHSFQpIHtcclxuXHRcdFx0XHRcdFx0VEIzID0gWyBbIDAsIDAgXSwgWyAwLCAtMSBdLCBbIC0xLCAtMSBdIF1cclxuXHRcdFx0XHRcdFx0TkQgPSBbIFsgMCwgMSBdLCBbIDEsIDAgXSwgWyAwLCAtMSBdIF1cclxuXHRcdFx0XHRcdFx0TkREID0gWyBENF9ET1dOLCBENF9SSUdIVCwgRDRfVVAgXVxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmKGxhc3RMaW5lRGlyZWN0aW9uID09IEQ0X0RPV04pIHtcclxuXHRcdFx0XHRcdFx0VEIzID0gWyBbIC0xLCAwIF0sIFsgMCwgMCBdLCBbIDAsIC0xIF0gXVxyXG5cdFx0XHRcdFx0XHRORCA9IFsgWyAtMSwgMCBdLCBbIDAsIDEgXSwgWyAxLCAwIF0gXVxyXG5cdFx0XHRcdFx0XHROREQgPSBbIEQ0X0xFRlQsIEQ0X0RPV04sIEQ0X1JJR0hUIF1cclxuXHRcdFx0XHRcdH0gZWxzZSBpZihsYXN0TGluZURpcmVjdGlvbiA9PSBENF9MRUZUKSB7XHJcblx0XHRcdFx0XHRcdFRCMyA9IFsgWyAtMSwgLTEgXSwgWyAtMSwgMCBdLCBbIDAsIDAgXSBdXHJcblx0XHRcdFx0XHRcdE5EID0gWyBbIDAsIC0xIF0sIFsgLTEsIDAgXSwgWyAwLCAxIF0gXVxyXG5cdFx0XHRcdFx0XHROREQgPSBbIEQ0X1VQLCBENF9MRUZULCBENF9ET1dOIF1cclxuXHRcdFx0XHRcdH0gZWxzZSBpZihsYXN0TGluZURpcmVjdGlvbiA9PSBENF9VUCkge1xyXG5cdFx0XHRcdFx0XHRUQjMgPSBbIFsgMCwgLTEgXSwgWyAtMSwgLTEgXSwgWyAtMSwgMCBdIF1cclxuXHRcdFx0XHRcdFx0TkQgPSBbIFsgMSwgMCBdLCBbIDAsIC0xIF0sIFsgLTEsIDAgXSBdXHJcblx0XHRcdFx0XHRcdE5ERCA9IFsgRDRfUklHSFQsIEQ0X1VQLCBENF9MRUZUIF1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0aWYobGFzdExpbmVEaXJlY3Rpb24gPT0gRDRfUklHSFQpIHtcclxuXHRcdFx0XHRcdFx0VEIzID0gWyBbIDAsIC0xIF0sIFsgMCwgMCBdLCBbIC0xLCAwIF0gXVxyXG5cdFx0XHRcdFx0XHRORCA9IFsgWyAwLCAtMSBdLCBbIDEsIDAgXSwgWyAwLCAxIF0gXVxyXG5cdFx0XHRcdFx0XHROREQgPSBbIEQ0X1VQLCBENF9SSUdIVCwgRDRfRE9XTiBdXHJcblx0XHRcdFx0XHR9IGVsc2UgaWYobGFzdExpbmVEaXJlY3Rpb24gPT0gRDRfRE9XTikge1xyXG5cdFx0XHRcdFx0XHRUQjMgPSBbIFsgMCwgMCBdLCBbIC0xLCAwIF0sIFsgLTEsIC0xIF0gXVxyXG5cdFx0XHRcdFx0XHRORCA9IFsgWyAxLCAwIF0sIFsgMCwgMSBdLCBbIC0xLCAwIF0gXVxyXG5cdFx0XHRcdFx0XHROREQgPSBbIEQ0X1JJR0hULCBENF9ET1dOLCBENF9MRUZUIF1cclxuXHRcdFx0XHRcdH0gZWxzZSBpZihsYXN0TGluZURpcmVjdGlvbiA9PSBENF9MRUZUKSB7XHJcblx0XHRcdFx0XHRcdFRCMyA9IFsgWyAtMSwgMCBdLCBbIC0xLCAtMSBdLCBbIDAsIC0xIF0gXVxyXG5cdFx0XHRcdFx0XHRORCA9IFsgWyAwLCAxIF0sIFsgLTEsIDAgXSwgWyAwLCAtMSBdIF1cclxuXHRcdFx0XHRcdFx0TkREID0gWyBENF9ET1dOLCBENF9MRUZULCBENF9VUCBdXHJcblx0XHRcdFx0XHR9IGVsc2UgaWYobGFzdExpbmVEaXJlY3Rpb24gPT0gRDRfVVApIHtcclxuXHRcdFx0XHRcdFx0VEIzID0gWyBbIC0xLCAtMSBdLCBbIDAsIC0xIF0sIFsgMCwgMCBdIF1cclxuXHRcdFx0XHRcdFx0TkQgPSBbIFsgLTEsIDAgXSwgWyAwLCAtMSBdLCBbIDEsIDAgXSBdXHJcblx0XHRcdFx0XHRcdE5ERCA9IFsgRDRfTEVGVCwgRDRfVVAsIEQ0X1JJR0hUIF1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGZvcihsZXQgZD0wOyBkPDM7IGQrKykge1xyXG5cdFx0XHRcdFx0bGV0IGRpZmYgPSBUQjNbZF07XHJcblx0XHRcdFx0XHRsZXQgeCA9IGxhc3RQb2ludFtYXSArIGRpZmZbWF1cclxuXHRcdFx0XHRcdGxldCB5ID0gbGFzdFBvaW50W1ldICsgZGlmZltZXVxyXG5cdFx0XHRcdFx0bGV0IHRlc3RCbG9jayA9IGJsb2Nrc1t5XVt4XVxyXG5cclxuXHRcdFx0XHRcdGxldCBjb25kaXRpb24gPSBmYWxzZTtcclxuXHRcdFx0XHRcdGlmKGJsb2NrR3JvdXAuZGF0YSA9PSBCTE9DS19EQVRBX1dISVRFKSB7XHJcblx0XHRcdFx0XHRcdGNvbmRpdGlvbiA9IHRlc3RCbG9jay5ncm91cEluZGV4ICE9IG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGNvbmRpdGlvbiA9IHRlc3RCbG9jay5ncm91cEluZGV4ID09IG5cclxuXHRcdFx0XHRcdH1cclxuXHRcdFxyXG5cdFx0XHRcdFx0aWYoY29uZGl0aW9uKSB7XHJcblx0XHRcclxuXHRcdFx0XHRcdFx0bGV0IG54ID0gbGFzdFBvaW50W1hdICsgTkRbZF1bWF1cclxuXHRcdFx0XHRcdFx0bGV0IG55ID0gbGFzdFBvaW50W1ldICsgTkRbZF1bWV1cclxuXHJcblx0XHRcdFx0XHRcdC8vIFJlZHVjZSBwb2x5Z29uIG9uIHN0cmFpZ2h0IGxpbmVcclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRpZihsYXN0TGluZURpcmVjdGlvbiA9PSBORERbZF0pXHJcblx0XHRcdFx0XHRcdFx0cG9pbnRzLnBvcCgpXHJcblx0XHRcclxuXHRcdFx0XHRcdFx0aWYobnggPT0gcG9pbnRzWzBdW1hdICYmIG55ID09IHBvaW50c1swXVtZXSkge1xyXG5cdFx0XHRcdFx0XHRcdGlzQ2xvc2VMb29wID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0cG9pbnRzLnB1c2goWyBueCwgbnkgXSlcclxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9ucy5wdXNoKE5ERFtkXSlcclxuXHRcdFxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYocG9pbnRzLmxlbmd0aCA9PSAwKVxyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0bGV0IGlzRXllID0gKCgpID0+IHtcclxuXHJcblx0XHRcdFx0aWYocG9pbnRzLmxlbmd0aCAhPSA0KVxyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0XHRpZihibG9ja0dyb3VwLmRhdGEgIT0gQkxPQ0tfREFUQV9XSElURSlcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0XHRcdFx0bGV0IG1pblggPSBJbmZpbml0eVxyXG5cdFx0XHRcdGxldCBtaW5ZID0gSW5maW5pdHlcclxuXHRcdFx0XHRsZXQgbWF4WCA9IDBcclxuXHRcdFx0XHRsZXQgbWF4WSA9IDBcclxuXHJcblx0XHRcdFx0Zm9yKGxldCBwPTA7IHA8cG9pbnRzLmxlbmd0aDsgcCsrKSB7XHJcblx0XHRcdFx0XHRtaW5YID0gTWF0aC5taW4obWluWCwgcG9pbnRzW3BdW1hdKVxyXG5cdFx0XHRcdFx0bWluWSA9IE1hdGgubWluKG1pblksIHBvaW50c1twXVtZXSlcclxuXHRcdFx0XHRcdG1heFggPSBNYXRoLm1heChtYXhYLCBwb2ludHNbcF1bWF0pXHJcblx0XHRcdFx0XHRtYXhZID0gTWF0aC5tYXgobWF4WSwgcG9pbnRzW3BdW1ldKVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYoZGlmZihtaW5YLCBtYXhYKSA9PSAzICYmIGRpZmYobWluWSwgbWF4WSkgPT0gMylcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHR9KSgpXHJcblxyXG5cdFx0XHRsZXQgcG9pbnRUeXBlcyA9IGJsb2Nrc1tibG9ja0dyb3VwLmJsb2Nrc1swXVtZXV1bYmxvY2tHcm91cC5ibG9ja3NbMF1bWF1dLnR5cGUgfHwgaXNFeWVcclxuXHJcblx0XHRcdHNoYXBlcy5wdXNoKFtcclxuXHRcdFx0XHRwb2ludHMsXHJcblx0XHRcdFx0cG9pbnRUeXBlc1xyXG5cdFx0XHRdKVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRxcmNvZGUuc2l6ZSA9IHNpemVcclxuXHRcdHFyY29kZS5zaGFwZXMgPSBzaGFwZXNcclxuXHJcblx0fSwgMjAwLCBbIHFyY29kZS5jb250ZW50LCBxcmNvZGUubWFyZ2luIF0pO1xyXG5cclxuXHRyZXR1cm4gWyBxcmNvZGUgXVxyXG59KVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFFSQ29kZSIsImltcG9ydCB7IGNyZWF0ZUNvbnRhaW5lciB9IGZyb20gJ3Vuc3RhdGVkLW5leHQnXHJcblxyXG5pbXBvcnQgdXNlV2lzZVN0YXRlIGZyb20gJy4vLi4vbGliL3VzZVdpc2VTdGF0ZSdcclxuXHJcblxyXG5jb25zdCBFeHBvcnQgPSBjcmVhdGVDb250YWluZXIoKCkgPT4ge1xyXG5cclxuXHRjb25zdCBpbnN0YW5jZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRzaXplOiAzMjAsXHJcblx0XHRleGNsdWRlQmFja2dyb3VuZDogZmFsc2VcclxuXHR9KVxyXG5cclxuXHRyZXR1cm4gWyBpbnN0YW5jZSBdXHJcbn0pXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXhwb3J0IiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCdcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdwcmVhY3QvaG9va3MnXHJcbmltcG9ydCB7IGNzcywgY3ggfSBmcm9tICdAZW1vdGlvbi9jc3MnXHJcblxyXG5pbXBvcnQgJy4vc3R5bGUubGVzcydcclxuXHJcblxyXG5jb25zdCBTZWN0aW9uTGluZSA9IHByb3BzID0+IHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdiBjbGFzc05hbWU9XCJzZWN0aW9uLWxpbmVcIj5cclxuXHRcdFx0PGRpdj5cclxuXHRcdFx0XHR7IHByb3BzLmNoaWxkcmVuIH1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdDxociAvPlxyXG5cdFx0PC9kaXY+XHJcblx0KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VjdGlvbkxpbmUiLCJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG52YXIgdXNlRWZmZWN0T25jZSA9IGZ1bmN0aW9uIChlZmZlY3QpIHtcbiAgICB1c2VFZmZlY3QoZWZmZWN0LCBbXSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgdXNlRWZmZWN0T25jZTtcbiIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IHVzZUVmZmVjdE9uY2UgfSBmcm9tICdyZWFjdC11c2UnXHJcblxyXG5pbXBvcnQgQWxlcnRDb250aW5lciBmcm9tICcuLy4uLy4uL2NvbnRhaW5lcnMvQWxlcnQnXHJcbmltcG9ydCB1c2VXaXNlU3RhdGUgZnJvbSAnLi4vLi4vbGliL3VzZVdpc2VTdGF0ZSdcclxuXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5cclxuXHJcbmNvbnN0IEFsZXJ0ID0gcHJvcHMgPT4ge1xyXG5cclxuXHRjb25zdCBhbGVydCA9IEFsZXJ0Q29udGluZXIudXNlQ29udGFpbmVyKClcclxuXHRjb25zdCBzdGF0ZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRpZDogMCxcclxuXHRcdG1lc3NhZ2VzOiBbXVxyXG5cdH0pXHJcblxyXG5cdGNvbnN0IGNiID0gdXNlQ2FsbGJhY2soKG1lc3NhZ2UpID0+IHtcclxuXHRcdGxldCBpZCA9IHN0YXRlLmlkO1xyXG5cdFx0c3RhdGUuaWQrKztcclxuXHRcdHN0YXRlLm1lc3NhZ2VzLnB1c2goe1xyXG5cdFx0XHRpZCxcclxuXHRcdFx0dGV4dDogbWVzc2FnZVxyXG5cdFx0fSlcclxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRzdGF0ZS5tZXNzYWdlcyA9IHN0YXRlLm1lc3NhZ2VzLmZpbHRlcihtZXNzYWdlID0+IG1lc3NhZ2UuaWQgIT0gaWQpXHJcblx0XHR9LCA1MDAwKVxyXG5cdH0sIFtdKVxyXG5cclxuXHR1c2VFZmZlY3RPbmNlKCgpID0+IHtcclxuXHRcdGFsZXJ0LnJlZ2lzdGVyKGNiKVxyXG5cdH0pXHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0XCI+XHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdGF0ZS5tZXNzYWdlcy5tYXAobWVzc2FnZSA9PiAoXHJcblx0XHRcdFx0XHQ8ZGl2XHJcblx0XHRcdFx0XHRcdGtleT17IG1lc3NhZ2UuaWQgfVxyXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJtZXNzYWdlXCJcclxuXHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0eyBtZXNzYWdlLnRleHQgfVxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0KSlcclxuXHRcdFx0fVxyXG5cdFx0PC9kaXY+XHJcblx0KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWxlcnQiLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VFZmZlY3RPbmNlIH0gZnJvbSAncmVhY3QtdXNlJ1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VDYWxsYmFjayB9IGZyb20gJ3ByZWFjdC9ob29rcydcclxuaW1wb3J0IHsgY3gsIGNzcyB9IGZyb20gJ0BlbW90aW9uL2NzcydcclxuXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5cclxuXHJcbmNvbnN0IFByZXZpZXdRUkNvZGVDb250YWluZXIgPSAocHJvcHMpID0+IHtcclxuXHJcblx0Y29uc3QgZWxXcmFwcGVyID0gdXNlUmVmKClcclxuXHRjb25zdCBbIHNpemUsIHNldFNpemUgXSA9IHVzZVN0YXRlKG51bGwpXHJcblxyXG5cdGNvbnN0IHVwZGF0ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuXHJcblx0XHRpZighZWxXcmFwcGVyLmN1cnJlbnQpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHRlbFdyYXBwZXIuY3VycmVudC5jbGFzc0xpc3QuYWRkKCdpcy1tZWFzdXJpbmcnKVxyXG5cdFx0c2V0U2l6ZShNYXRoLm1pbihlbFdyYXBwZXIuY3VycmVudC5jbGllbnRXaWR0aCwgZWxXcmFwcGVyLmN1cnJlbnQuY2xpZW50SGVpZ2h0KSlcclxuXHRcdGVsV3JhcHBlci5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW1lYXN1cmluZycpXHJcblxyXG5cdH0pXHJcblxyXG5cdGNvbnN0IG9uV2luZG93UmVzaXplID0gdXNlQ2FsbGJhY2soKCkgPT4gdXBkYXRlKCkpXHJcblxyXG5cdHVzZUVmZmVjdE9uY2UoKCkgPT4ge1xyXG5cdFx0dXBkYXRlKClcclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSlcclxuXHJcblx0XHRyZXR1cm4gKCkgPT4ge1xyXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpXHJcblx0XHR9XHJcblx0fSwgW10pXHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2XHJcblx0XHRcdHJlZj17IGVsV3JhcHBlciB9XHJcblx0XHRcdGNsYXNzTmFtZT1cInByZXZpZXctcXJjb2RlLXdyYXBwZXJcIlxyXG5cdFx0PlxyXG5cdFx0XHQ8ZGl2XHJcblx0XHRcdFx0Y2xhc3NOYW1lPXtjeChcclxuXHRcdFx0XHRcdCdwcmV2aWV3LXFyY29kZS1jb250YWluZXInLFxyXG5cdFx0XHRcdFx0Y3NzYHdpZHRoOiAke3NpemV9cHg7IGhlaWdodDogJHtzaXplfXB4O2BcclxuXHRcdFx0XHQpfVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0eyBwcm9wcy5jaGlsZHJlbiB9XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0PC9kaXY+XHJcblx0KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJldmlld1FSQ29kZUNvbnRhaW5lciIsImNvbnN0IG1vZCA9IChuLCBtKSA9PiB7XHJcblx0biAlPSBtXHJcblx0aWYobiA8IDApXHJcblx0XHRuICs9IG1cclxuXHRyZXR1cm4gblxyXG59XHJcblxyXG5jb25zdCBkaWZmID0gKGEsIGIpID0+IE1hdGguYWJzKGEgLSBiKVxyXG5jb25zdCBub3JtYWxpemUgPSB2YWx1ZSA9PiB2YWx1ZSA9PSAwID8gMCA6IHZhbHVlIC8gTWF0aC5hYnModmFsdWUpXHJcbmNvbnN0IGFtaW4gPSAoYSwgYikgPT4gYSA+PSAwICYmIGIgPj0gMCA/IE1hdGgubWluKGEsIGIpIDogTWF0aC5tYXgoYSwgYilcclxuY29uc3QgYW1heCA9IChhLCBiKSA9PiBhID49IDAgJiYgYiA+PSAwID8gTWF0aC5tYXgoYSwgYikgOiBNYXRoLm1pbihhLCBiKVxyXG5cclxuXHJcbmNvbnN0IFggPSAwO1xyXG5jb25zdCBZID0gMTtcclxuY29uc3QgRDQgPSBbIFsgMCwgLTEgXSwgWyAxLCAwIF0sIFsgMCwgMSBdLCBbIC0xLCAwIF0gXVxyXG5jb25zdCBEOCA9IFsgWyAtMSwgLTFdLCBbIDAsIC0xIF0sIFsgMSwgLTEgXSwgWyAxLCAwIF0sIFsgMSwgMSBdLCBbIDAsIDEgXSwgWyAtMSwgMSBdLCBbIC0xLCAwIF0gXVxyXG5jb25zdCBJTFAgPSBbIFsgMCwgMCBdLCBbIDEsIDAgXSwgWyAxLCAxIF0sIFsgMCwgMSBdIF0gLy8gSW5pdCBsaW5lIHBvaW50XHJcbmNvbnN0IElMUFcgPSBbIFsgMSwgMCBdLCBbIDEsIDEgXSwgWyAwLCAxIF0sIFsgMCwgMCBdIF0gLy8gSW5pdCBsaW5lIHBvaW50IHdoaXRlXHJcbmNvbnN0IE40ID0gWyBbIDAsIDAgXSwgWyAwLCAtMSBdLCBbIC0xLCAtMSBdLCBbIC0xLCAwIF0gXVxyXG5cclxuY29uc3QgRDRfVVAgPSAwXHJcbmNvbnN0IEQ0X0RPV04gPSAyXHJcbmNvbnN0IEQ0X1JJR0hUID0gMVxyXG5jb25zdCBENF9MRUZUID0gM1xyXG5cclxuY29uc3QgQkxPQ0tfREFUQV9CTEFDSyA9IHRydWU7XHJcbmNvbnN0IEJMT0NLX0RBVEFfV0hJVEUgPSBmYWxzZTtcclxuXHJcbmNvbnN0IEVZRV9TSVpFID0gN1xyXG5cclxuXHJcbmNvbnN0IGdlbmVyYXRlU1ZHUGF0aENvbW1hbmQgPSAoe1xyXG5cdHNpemUsXHJcblx0c2hhcGVzLFxyXG5cdHJvdW5kQ29ybmVyLFxyXG5cdGV5ZVJvdW5kQ29ybmVyLFxyXG5cdGNhbnZhcyA9IHtcclxuXHRcdHNpemU6IHVuZGVmaW5lZFxyXG5cdH1cclxufSkgPT4ge1xyXG5cclxuXHRsZXQgcmF0aW8gPVxyXG5cdFx0Y2FudmFzPy5zaXplICE9IHVuZGVmaW5lZFxyXG5cdFx0XHQ/IGNhbnZhcy5zaXplIC8gc2l6ZVxyXG5cdFx0XHQ6IDFcclxuXHJcblx0bGV0IGQgPSAnJ1xyXG5cclxuXHRmb3IobGV0IGc9MDsgZzxzaGFwZXMubGVuZ3RoOyBnKyspIHtcclxuXHJcblx0XHRsZXQgcG9pbnRzID0gc2hhcGVzW2ddWzBdXHJcblx0XHRsZXQgcG9pbnRUeXBlcyA9IHNoYXBlc1tnXVsxXVxyXG5cclxuXHJcblx0XHQvLyBHZW5lcmF0ZSBTVkcgcGF0aCBjb21tYW5kXHJcblx0XHJcblx0XHRsZXQgciA9IHJvdW5kQ29ybmVyIC8gMTAwIHx8IDAgLy8gMC0wLjVcclxuXHRcdGxldCBlID0gZXllUm91bmRDb3JuZXIgLyAxMDAgfHwgMFxyXG5cclxuXHRcdGlmKCghcG9pbnRUeXBlcyAmJiByID09IDApIHx8IChwb2ludFR5cGVzICYmIHIgPT0gMCAmJiBlID09IDApKSB7XHJcblx0XHRcdGZvcihsZXQgaz0wOyBrPHBvaW50cy5sZW5ndGg7IGsrKykge1xyXG5cdFx0XHRcdGQgKz0gayA9PSAwID8gJ00nIDogJ0wnXHJcblx0XHRcdFx0ZCArPSBgJHtwb2ludHNba11bWF0qcmF0aW99LCR7cG9pbnRzW2tdW1ldKnJhdGlvfWBcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Zm9yKGxldCBrPTA7IGs8cG9pbnRzLmxlbmd0aDsgaysrKSB7XHJcblxyXG5cdFx0XHRcdGQgKz0gayA9PSAwID8gJ00nIDogJ0wnXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0bGV0IHAxID0gcG9pbnRzW21vZChrLTEsIHBvaW50cy5sZW5ndGgpXVxyXG5cdFx0XHRcdGxldCBwMiA9IHBvaW50c1trXVxyXG5cdFx0XHRcdGxldCBwMyA9IHBvaW50c1ttb2QoaysxLCBwb2ludHMubGVuZ3RoKV1cclxuXHJcblx0XHRcdFx0bGV0IG54MSA9IG5vcm1hbGl6ZShwMVtYXSAtIHAyW1hdKVxyXG5cdFx0XHRcdGxldCBueTEgPSBub3JtYWxpemUocDFbWV0gLSBwMltZXSlcclxuXHRcdFx0XHRsZXQgbngyID0gbm9ybWFsaXplKHAzW1hdIC0gcDJbWF0pXHJcblx0XHRcdFx0bGV0IG55MiA9IG5vcm1hbGl6ZShwM1tZXSAtIHAyW1ldKVxyXG5cclxuXHRcdFx0XHRsZXQgeDEgPSBwMltYXVxyXG5cdFx0XHRcdGxldCB5MSA9IHAyW1ldXHJcblx0XHRcdFx0bGV0IHgyID0gcDJbWF1cclxuXHRcdFx0XHRsZXQgeTIgPSBwMltZXVxyXG5cdFx0XHRcdGxldCB4MyA9IHAyW1hdXHJcblx0XHRcdFx0bGV0IHkzID0gcDJbWV1cclxuXHJcblx0XHRcdFx0aWYocG9pbnRUeXBlcykge1xyXG5cclxuXHRcdFx0XHRcdGxldCBteDEgPSBNYXRoLmFicyhwMVtYXSAtIHAyW1hdKSAvIDJcclxuXHRcdFx0XHRcdGxldCBteTEgPSBNYXRoLmFicyhwMVtZXSAtIHAyW1ldKSAvIDJcclxuXHRcdFx0XHRcdGxldCBteDIgPSBNYXRoLmFicyhwM1tYXSAtIHAyW1hdKSAvIDJcclxuXHRcdFx0XHRcdGxldCBteTIgPSBNYXRoLmFicyhwM1tZXSAtIHAyW1ldKSAvIDJcclxuXHJcblx0XHRcdFx0XHR4MSA9IHAyW1hdICsgKG54MSAqIGFtYXgoci8yLCBteDEgKiBlKSlcclxuXHRcdFx0XHRcdHkxID0gcDJbWV0gKyAobnkxICogYW1heChyLzIsIG15MSAqIGUpKVxyXG5cdFx0XHRcdFx0eDMgPSBwMltYXSArIChueDIgKiBhbWF4KHIvMiwgbXgyICogZSkpXHJcblx0XHRcdFx0XHR5MyA9IHAyW1ldICsgKG55MiAqIGFtYXgoci8yLCBteTIgKiBlKSlcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR4MSA9IHAyW1hdICsgKG54MSAqIHIvMilcclxuXHRcdFx0XHRcdHkxID0gcDJbWV0gKyAobnkxICogci8yKVxyXG5cdFx0XHRcdFx0eDMgPSBwMltYXSArIChueDIgKiByLzIpXHJcblx0XHRcdFx0XHR5MyA9IHAyW1ldICsgKG55MiAqIHIvMilcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBkICs9IGAke3gxfSwke3kxfSBDJHt4MX0sJHt5MX0gJHt4Mn0sJHt5Mn0gJHt4M30sJHt5M31gXHJcblx0XHRcdFx0ZCArPSBgJHt4MSpyYXRpb30sJHt5MSpyYXRpb30gTCR7eDEqcmF0aW99LCR7eTEqcmF0aW99IFEke3gyKnJhdGlvfSwke3kyKnJhdGlvfSAke3gzKnJhdGlvfSwke3kzKnJhdGlvfWBcclxuXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdGQgKz0gJ3onXHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGRcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlU1ZHUGF0aENvbW1hbmQiLCJjb25zdCBhcnJUb0hTTEEgPSAoWyBoLCBzLCBsLCBhID0gMTAwIF0pID0+IGBoc2xhKCR7aH0sICR7c30lLCAke2x9JSwgJHthfSUpYFxyXG5leHBvcnQgZGVmYXVsdCBhcnJUb0hTTEEiLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB1c2VUaHJvdHRsZWRFZmZlY3QgIGZyb20gJ3VzZS10aHJvdHRsZWQtZWZmZWN0J1xyXG5pbXBvcnQgeyBjeCB9IGZyb20gJ0BlbW90aW9uL2NzcydcclxuXHJcbmltcG9ydCBRUkNvZGUgZnJvbSAnLi8uLi8uLi9jb250YWluZXJzL1FSQ29kZSdcclxuaW1wb3J0IGdlbmVyYXRlU1ZHUGF0aENvbW1hbmQgZnJvbSAnLi8uLi8uLi9saWIvZ2VuZXJhdGUtc3ZnLXBhdGgtY29tbWFuZCdcclxuaW1wb3J0IGFyclRvSFNMQSBmcm9tICcuLy4uLy4uL2xpYi9hcnJUb0hTTEEnXHJcbmltcG9ydCB1c2VXaXNlU3RhdGUgZnJvbSAnLi8uLi8uLi9saWIvdXNlV2lzZVN0YXRlJ1xyXG5cclxuXHJcbmNvbnN0IFByZXZpZXdRUkNvZGUgPSBwcm9wcyA9PiB7XHJcblxyXG5cdGNvbnN0IFsgcXJjb2RlIF0gPSBRUkNvZGUudXNlQ29udGFpbmVyKClcclxuXHRjb25zdCBjb250ZW50ID0gdXNlV2lzZVN0YXRlKHtcclxuXHRcdHZpZXdCb3g6ICcwIDAgMSAxJyxcclxuXHRcdGQ6ICcnXHJcblx0fSlcclxuXHJcblx0dXNlVGhyb3R0bGVkRWZmZWN0KCgpID0+IHtcclxuXHJcblx0XHRjb250ZW50LmQgPSBnZW5lcmF0ZVNWR1BhdGhDb21tYW5kKHtcclxuXHRcdFx0c2l6ZTogcXJjb2RlLnNpemUsXHJcblx0XHRcdHNoYXBlczogcXJjb2RlLnNoYXBlcyxcclxuXHRcdFx0cm91bmRDb3JuZXI6IHFyY29kZS5yb3VuZENvcm5lcixcclxuXHRcdFx0ZXllUm91bmRDb3JuZXI6IHFyY29kZS5leWVSb3VuZENvcm5lclxyXG5cdFx0fSlcclxuXHJcblx0XHRjb250ZW50LnZpZXdCb3ggPSBgMCAwICR7cXJjb2RlLnNpemV9ICR7cXJjb2RlLnNpemV9YFxyXG5cclxuXHR9LCAyMCwgWyBxcmNvZGUuc2l6ZSwgcXJjb2RlLnNoYXBlcywgcXJjb2RlLnJvdW5kQ29ybmVyLCBxcmNvZGUuZXllUm91bmRDb3JuZXIgXSlcclxuXHJcblx0cmV0dXJuIHVzZU1lbW8oKCkgPT4gKFxyXG5cdFx0cXJjb2RlLmlzVmFsaWQgPyAoXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjeCgncHJldmlldycsIHsgJ2lzLW5vdC12YWxpZCc6ICFxcmNvZGUuaXNWYWxpZCB9KX0+XHJcblx0XHRcdFx0PHN2Z1xyXG5cdFx0XHRcdFx0dmlld0JveD17IGNvbnRlbnQudmlld0JveCB9XHJcblx0XHRcdFx0XHRzdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6IGFyclRvSFNMQShxcmNvZGUuYmFja2dyb3VuZENvbG9yKSB9fVxyXG5cdFx0XHRcdD5cclxuXHRcdFx0XHRcdDxwYXRoIGQ9e2BNMCwwSCR7cXJjb2RlLnNpemV9ViR7cXJjb2RlLnNpemV9SDB6YH0gZmlsbD17IGFyclRvSFNMQShxcmNvZGUuYmFja2dyb3VuZENvbG9yKSB9IC8+XHJcblx0XHRcdFx0XHQ8cGF0aCBkPXtjb250ZW50LmR9IGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBmaWxsPXsgYXJyVG9IU0xBKHFyY29kZS5mb3JlZ3JvdW5kQ29sb3IpIH0gLz5cclxuXHRcdFx0XHQ8L3N2Zz5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQpIDogKFxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInBsYWNlaG9sZGVyXCI+XHJcblx0XHRcdFx0PHN2ZyB2aWV3Qm94PVwiMCAwIDE5IDE5XCI+XHJcblx0XHRcdFx0XHQ8cGF0aCBjbGFzcz1cImNscy0xXCIgZD1cIk0gMiA0LjUgTCAyIDMuNSBMIDIgMi41IEMgMiAyLjM2MiAyLjA1NiAyLjIzNyAyLjE0NyAyLjE0NyBDIDIuMjM3IDIuMDU2IDIuMzYyIDIgMi41IDIgTCAzLjUgMiBMIDQuNSAyIEMgNC42MzggMiA0Ljc2MyAyLjA1NiA0Ljg1NCAyLjE0NyBDIDQuOTQ0IDIuMjM3IDUgMi4zNjIgNSAyLjUgTCA1IDMuNSBMIDUgNC41IEMgNSA0LjYzOCA0Ljk0NCA0Ljc2MyA0Ljg1NCA0Ljg1NCBDIDQuNzYzIDQuOTQ0IDQuNjM4IDUgNC41IDUgTCAzLjUgNSBMIDIuNSA1IEMgMi4zNjIgNSAyLjIzNyA0Ljk0NCAyLjE0NyA0Ljg1NCBDIDIuMDU2IDQuNzYzIDIgNC42MzggMiA0LjUgWiBNIDMgNCBMIDMuNSA0IEwgNCA0IEwgNCAzLjUgTCA0IDMgTCAzLjUgMyBMIDMgMyBMIDMgMy41IFogTSA3IDAuNSBMIDcgMy41IEwgNyA2LjUgQyA3IDYuNjM4IDYuOTQ0IDYuNzYzIDYuODU0IDYuODU0IEMgNi43NjMgNi45NDQgNi42MzggNyA2LjUgNyBMIDMuNSA3IEwgMC41IDcgQyAwLjM2MiA3IDAuMjM3IDYuOTQ0IDAuMTQ3IDYuODU0IEMgMC4wNTYgNi43NjMgMCA2LjYzOCAwIDYuNSBMIDAgMy41IEwgMCAwLjUgQyAwIDAuMzYyIDAuMDU2IDAuMjM3IDAuMTQ3IDAuMTQ3IEMgMC4yMzcgMC4wNTYgMC4zNjIgMCAwLjUgMCBMIDMuNSAwIEwgNi41IDAgQyA2LjYzOCAwIDYuNzYzIDAuMDU2IDYuODU0IDAuMTQ3IEMgNi45NDQgMC4yMzcgNyAwLjM2MiA3IDAuNSBaIE0gNiAxIEwgMy41IDEgTCAxIDEgTCAxIDMuNSBMIDEgNiBMIDMuNSA2IEwgNiA2IEwgNiAzLjUgWiBNIDIgMTYuNSBMIDIgMTUuNSBMIDIgMTQuNSBDIDIgMTQuMzYyIDIuMDU2IDE0LjIzNyAyLjE0NyAxNC4xNDcgQyAyLjIzNyAxNC4wNTYgMi4zNjIgMTQgMi41IDE0IEwgMy41IDE0IEwgNC41IDE0IEMgNC42MzggMTQgNC43NjMgMTQuMDU2IDQuODU0IDE0LjE0NyBDIDQuOTQ0IDE0LjIzNyA1IDE0LjM2MiA1IDE0LjUgTCA1IDE1LjUgTCA1IDE2LjUgQyA1IDE2LjYzOCA0Ljk0NCAxNi43NjMgNC44NTQgMTYuODU0IEMgNC43NjMgMTYuOTQ0IDQuNjM4IDE3IDQuNSAxNyBMIDMuNSAxNyBMIDIuNSAxNyBDIDIuMzYyIDE3IDIuMjM3IDE2Ljk0NCAyLjE0NyAxNi44NTQgQyAyLjA1NiAxNi43NjMgMiAxNi42MzggMiAxNi41IFogTSAzIDE2IEwgMy41IDE2IEwgNCAxNiBMIDQgMTUuNSBMIDQgMTUgTCAzLjUgMTUgTCAzIDE1IEwgMyAxNS41IFogTSA3IDEyLjUgTCA3IDE1LjUgTCA3IDE4LjUgQyA3IDE4LjYzOCA2Ljk0NCAxOC43NjMgNi44NTQgMTguODU0IEMgNi43NjMgMTguOTQ0IDYuNjM4IDE5IDYuNSAxOSBMIDMuNSAxOSBMIDAuNSAxOSBDIDAuMzYyIDE5IDAuMjM3IDE4Ljk0NCAwLjE0NyAxOC44NTQgQyAwLjA1NiAxOC43NjMgMCAxOC42MzggMCAxOC41IEwgMCAxNS41IEwgMCAxMi41IEMgMCAxMi4zNjIgMC4wNTYgMTIuMjM3IDAuMTQ3IDEyLjE0NyBDIDAuMjM3IDEyLjA1NiAwLjM2MiAxMiAwLjUgMTIgTCAzLjUgMTIgTCA2LjUgMTIgQyA2LjYzOCAxMiA2Ljc2MyAxMi4wNTYgNi44NTQgMTIuMTQ3IEMgNi45NDQgMTIuMjM3IDcgMTIuMzYyIDcgMTIuNSBaIE0gNiAxMyBMIDMuNSAxMyBMIDEgMTMgTCAxIDE1LjUgTCAxIDE4IEwgMy41IDE4IEwgNiAxOCBMIDYgMTUuNSBaIE0gMTQgNC41IEwgMTQgMy41IEwgMTQgMi41IEMgMTQgMi4zNjIgMTQuMDU2IDIuMjM3IDE0LjE0NyAyLjE0NyBDIDE0LjIzNyAyLjA1NiAxNC4zNjIgMiAxNC41IDIgTCAxNS41IDIgTCAxNi41IDIgQyAxNi42MzggMiAxNi43NjMgMi4wNTYgMTYuODU0IDIuMTQ3IEMgMTYuOTQ0IDIuMjM3IDE3IDIuMzYyIDE3IDIuNSBMIDE3IDMuNSBMIDE3IDQuNSBDIDE3IDQuNjM4IDE2Ljk0NCA0Ljc2MyAxNi44NTQgNC44NTQgQyAxNi43NjMgNC45NDQgMTYuNjM4IDUgMTYuNSA1IEwgMTUuNSA1IEwgMTQuNSA1IEMgMTQuMzYyIDUgMTQuMjM3IDQuOTQ0IDE0LjE0NyA0Ljg1NCBDIDE0LjA1NiA0Ljc2MyAxNCA0LjYzOCAxNCA0LjUgWiBNIDE1IDQgTCAxNS41IDQgTCAxNiA0IEwgMTYgMy41IEwgMTYgMyBMIDE1LjUgMyBMIDE1IDMgTCAxNSAzLjUgWiBNIDE5IDAuNSBMIDE5IDMuNSBMIDE5IDYuNSBDIDE5IDYuNjM4IDE4Ljk0NCA2Ljc2MyAxOC44NTQgNi44NTQgQyAxOC43NjMgNi45NDQgMTguNjM4IDcgMTguNSA3IEwgMTUuNSA3IEwgMTIuNSA3IEMgMTIuMzYyIDcgMTIuMjM3IDYuOTQ0IDEyLjE0NyA2Ljg1NCBDIDEyLjA1NiA2Ljc2MyAxMiA2LjYzOCAxMiA2LjUgTCAxMiAzLjUgTCAxMiAwLjUgQyAxMiAwLjM2MiAxMi4wNTYgMC4yMzcgMTIuMTQ3IDAuMTQ3IEMgMTIuMjM3IDAuMDU2IDEyLjM2MiAwIDEyLjUgMCBMIDE1LjUgMCBMIDE4LjUgMCBDIDE4LjYzOCAwIDE4Ljc2MyAwLjA1NiAxOC44NTQgMC4xNDcgQyAxOC45NDQgMC4yMzcgMTkgMC4zNjIgMTkgMC41IFogTSAxOCAxIEwgMTUuNSAxIEwgMTMgMSBMIDEzIDMuNSBMIDEzIDYgTCAxNS41IDYgTCAxOCA2IEwgMTggMy41IFogTSA4LjA2NyAwLjc1IEMgNy45NzEgMC41ODQgNy45ODMgMC4zOTYgOC4wNjcgMC4yNSBDIDguMTUxIDAuMTA0IDguMzA4IDAgOC41IDAgTCA5LjUgMCBMIDEwLjUgMCBDIDEwLjU5IDAgMTAuNjc2IDAuMDI0IDEwLjc1IDAuMDY3IEMgMTAuODI1IDAuMTEgMTAuODg4IDAuMTczIDEwLjkzMyAwLjI1IEMgMTEuMDI5IDAuNDE3IDExLjAxNyAwLjYwNCAxMC45MzMgMC43NSBDIDEwLjg0OSAwLjg5NiAxMC42OTIgMSAxMC41IDEgTCA5LjUgMSBMIDguNSAxIEMgOC40MTEgMSA4LjMyNSAwLjk3NiA4LjI1IDAuOTMzIEMgOC4xNzUgMC44OSA4LjExMiAwLjgyOCA4LjA2NyAwLjc1IFogTSA4LjA2NyA0Ljc1IEMgNy45NzEgNC41ODQgNy45ODMgNC4zOTYgOC4wNjcgNC4yNSBDIDguMTUxIDQuMTA0IDguMzA4IDQgOC41IDQgTCA5LjUgNCBMIDEwLjUgNCBDIDEwLjU5IDQgMTAuNjc2IDQuMDI0IDEwLjc1IDQuMDY3IEMgMTAuODI1IDQuMTEgMTAuODg4IDQuMTcyIDEwLjkzMyA0LjI1IEMgMTEuMDI5IDQuNDE3IDExLjAxNyA0LjYwNCAxMC45MzMgNC43NSBDIDEwLjg0OSA0Ljg5NiAxMC42OTIgNSAxMC41IDUgTCA5LjUgNSBMIDguNSA1IEMgOC40MTEgNSA4LjMyNSA0Ljk3NiA4LjI1IDQuOTMzIEMgOC4xNzUgNC44OSA4LjExMiA0LjgyOCA4LjA2NyA0Ljc1IFogTSA2LjkzMyAxMC4yNSBDIDcuMDI5IDEwLjQxNyA3LjAxNyAxMC42MDQgNi45MzMgMTAuNzUgQyA2Ljg0OSAxMC44OTYgNi42OTIgMTEgNi41IDExIEwgNS41IDExIEwgNC41IDExIEMgNC40MSAxMSA0LjMyNCAxMC45NzYgNC4yNSAxMC45MzMgQyA0LjE3NSAxMC44OSA0LjExMSAxMC44MjggNC4wNjcgMTAuNzUgQyAzLjk3MSAxMC41ODQgMy45ODMgMTAuMzk2IDQuMDY3IDEwLjI1IEMgNC4xNTEgMTAuMTA0IDQuMzA3IDEwIDQuNSAxMCBMIDUuNSAxMCBMIDYuNSAxMCBDIDYuNTg5IDEwIDYuNjc1IDEwLjAyNCA2Ljc1IDEwLjA2NyBDIDYuODI1IDEwLjExIDYuODg4IDEwLjE3MiA2LjkzMyAxMC4yNSBaIE0gMi41IDkgQyAyLjQxMSA5IDIuMzI1IDguOTc2IDIuMjUgOC45MzMgQyAyLjE3NSA4Ljg5IDIuMTEyIDguODI4IDIuMDY3IDguNzUgQyAxLjk3MSA4LjU4NCAxLjk4MyA4LjM5NiAyLjA2NyA4LjI1IEMgMi4xNTEgOC4xMDQgMi4zMDggOCAyLjUgOCBMIDMuNSA4IEwgNC41IDggQyA0LjU5IDggNC42NzYgOC4wMjQgNC43NSA4LjA2NyBDIDQuODI1IDguMTEgNC44ODkgOC4xNzIgNC45MzMgOC4yNSBDIDUuMDI5IDguNDE3IDUuMDE3IDguNjA0IDQuOTMzIDguNzUgQyA0Ljg0OSA4Ljg5NiA0LjY5MyA5IDQuNSA5IEwgMy41IDkgWiBNIDEwLjc1IDIuMDY3IEMgMTAuOTE3IDIuMTYzIDExIDIuMzMyIDExIDIuNSBDIDExIDIuNjY5IDEwLjkxNyAyLjgzNyAxMC43NSAyLjkzMyBDIDEwLjU4NCAzLjAyOSAxMC4zOTYgMy4wMTcgMTAuMjUgMi45MzMgQyAxMC4xMDQgMi44NDkgMTAgMi42OTMgMTAgMi41IEMgMTAgMi4zNjIgMTAuMDU2IDIuMjM3IDEwLjE0NyAyLjE0NyBDIDEwLjIzNyAyLjA1NiAxMC4zNjIgMiAxMC41IDIgQyAxMC41NDQgMiAxMC41ODggMi4wMDYgMTAuNjMgMi4wMTcgQyAxMC42NzIgMi4wMjggMTAuNzEyIDIuMDQ1IDEwLjc1IDIuMDY3IFogTSA4IDggQyA4IDcuNzMyIDguMDcyIDcuNDc0IDguMjAxIDcuMjUgQyA4LjMzMSA3LjAyNiA4LjUxOCA2LjgzNSA4Ljc1IDYuNzAxIEMgOS4yNSA2LjQxMyA5LjgxMyA2LjQ0OCAxMC4yNSA2LjcwMSBDIDEwLjY4OCA2Ljk1NCAxMSA3LjQyMiAxMSA4IEMgMTAuOTk3IDguMjYyIDEwLjkzNSA4LjUxNyAxMC44MjQgOC43NDcgQyAxMC43MTMgOC45NzggMTAuNTUyIDkuMTg0IDEwLjM1IDkuMzUgQyAxMC4yMyA5LjQ3NSAxMC4xNDMgOS41NjcgMTAuMDg1IDkuNjY0IEMgMTAuMDI4IDkuNzYgMTAgOS44NiAxMCAxMCBMIDEwIDEwLjI1IEwgMTAgMTAuNSBDIDEwIDEwLjU5IDkuOTc2IDEwLjY3NiA5LjkzMyAxMC43NSBDIDkuODkgMTAuODI1IDkuODI4IDEwLjg4OCA5Ljc1IDEwLjkzMyBDIDkuNTgzIDExLjAyOSA5LjM5NiAxMS4wMTcgOS4yNSAxMC45MzMgQyA5LjEwNCAxMC44NDkgOSAxMC42OTIgOSAxMC41IEwgOSAxMC4yNSBMIDkgMTAgQyA5LjAwMyA5LjczOCA5LjA2NSA5LjQ4NCA5LjE3NiA5LjI1MyBDIDkuMjg3IDkuMDIzIDkuNDQ4IDguODE2IDkuNjUgOC42NSBDIDkuNzcgOC41MjUgOS44NTcgOC40MzMgOS45MTUgOC4zMzYgQyA5Ljk3MiA4LjI0IDEwIDguMTQgMTAgOCBDIDEwIDcuOTExIDkuOTc2IDcuODI1IDkuOTMzIDcuNzUgQyA5Ljg5IDcuNjc1IDkuODI4IDcuNjExIDkuNzUgNy41NjcgQyA5LjU4NCA3LjQ3MSA5LjM5NiA3LjQ4MyA5LjI1IDcuNTY3IEMgOS4xMDQgNy42NTEgOSA3LjgwOCA5IDggQyA5IDguMTM4IDguOTQ0IDguMjYzIDguODU0IDguMzU0IEMgOC43NjMgOC40NDQgOC42MzggOC41IDguNSA4LjUgQyA4LjM2MiA4LjUgOC4yMzcgOC40NDQgOC4xNDcgOC4zNTQgQyA4LjA1NiA4LjI2MyA4IDguMTM4IDggOCBaIE0gMTAgMTIgQyAxMCAxMi4xMzggOS45NDQgMTIuMjYzIDkuODU0IDEyLjM1NCBDIDkuNzYzIDEyLjQ0NCA5LjYzOCAxMi41IDkuNSAxMi41IEMgOS4zNjIgMTIuNSA5LjIzNyAxMi40NDQgOS4xNDcgMTIuMzU0IEMgOS4wNTYgMTIuMjYzIDkgMTIuMTM4IDkgMTIgQyA5IDExLjg2MiA5LjA1NiAxMS43MzcgOS4xNDcgMTEuNjQ3IEMgOS4yMzcgMTEuNTU2IDkuMzYyIDExLjUgOS41IDExLjUgQyA5LjYzOCAxMS41IDkuNzYzIDExLjU1NiA5Ljg1NCAxMS42NDcgQyA5Ljk0NCAxMS43MzcgMTAgMTEuODYyIDEwIDEyIFogTSA3IDguNSBDIDcgOC42MzggNi45NDQgOC43NjMgNi44NTQgOC44NTQgQyA2Ljc2MyA4Ljk0NCA2LjYzOCA5IDYuNSA5IEMgNi4zNjIgOSA2LjIzNyA4Ljk0NCA2LjE0NyA4Ljg1NCBDIDYuMDU2IDguNzYzIDYgOC42MzggNiA4LjUgQyA2IDguMzYyIDYuMDU2IDguMjM3IDYuMTQ3IDguMTQ3IEMgNi4yMzcgOC4wNTYgNi4zNjIgOCA2LjUgOCBDIDYuNjM4IDggNi43NjMgOC4wNTYgNi44NTQgOC4xNDcgQyA2Ljk0NCA4LjIzNyA3IDguMzYyIDcgOC41IFogTSAxIDguNSBDIDEgOC42MzggMC45NDQgOC43NjMgMC44NTQgOC44NTQgQyAwLjc2MyA4Ljk0NCAwLjYzOCA5IDAuNSA5IEMgMC4zNjIgOSAwLjIzNyA4Ljk0NCAwLjE0NyA4Ljg1NCBDIDAuMDU2IDguNzYzIDAgOC42MzggMCA4LjUgQyAwIDguMzYyIDAuMDU2IDguMjM3IDAuMTQ3IDguMTQ3IEMgMC4yMzcgOC4wNTYgMC4zNjIgOCAwLjUgOCBDIDAuNjM4IDggMC43NjMgOC4wNTYgMC44NTQgOC4xNDcgQyAwLjk0NCA4LjIzNyAxIDguMzYyIDEgOC41IFogTSAxNi45MzMgOC4yNSBDIDE3LjAyOSA4LjQxNyAxNy4wMTcgOC42MDQgMTYuOTMzIDguNzUgQyAxNi44NDkgOC44OTYgMTYuNjkzIDkgMTYuNSA5IEwgMTUuNSA5IEwgMTQuNSA5IEMgMTQuNDExIDkgMTQuMzI1IDguOTc2IDE0LjI1IDguOTMzIEMgMTQuMTc1IDguODkgMTQuMTEyIDguODI4IDE0LjA2NyA4Ljc1IEMgMTMuOTcxIDguNTg0IDEzLjk4MyA4LjM5NiAxNC4wNjcgOC4yNSBDIDE0LjE1MSA4LjEwNCAxNC4zMDggOCAxNC41IDggTCAxNS41IDggTCAxNi41IDggQyAxNi41OSA4IDE2LjY3NiA4LjAyNCAxNi43NSA4LjA2NyBDIDE2LjgyNSA4LjExIDE2Ljg4OSA4LjE3MiAxNi45MzMgOC4yNSBaIE0gMTMgOC41IEMgMTMgOC42MzggMTIuOTQ0IDguNzYzIDEyLjg1NCA4Ljg1NCBDIDEyLjc2MyA4Ljk0NCAxMi42MzggOSAxMi41IDkgQyAxMi4zNjIgOSAxMi4yMzcgOC45NDQgMTIuMTQ3IDguODU0IEMgMTIuMDU2IDguNzYzIDEyIDguNjM4IDEyIDguNSBDIDEyIDguMzYyIDEyLjA1NiA4LjIzNyAxMi4xNDcgOC4xNDcgQyAxMi4yMzcgOC4wNTYgMTIuMzYyIDggMTIuNSA4IEMgMTIuNjM4IDggMTIuNzYzIDguMDU2IDEyLjg1NCA4LjE0NyBDIDEyLjk0NCA4LjIzNyAxMyA4LjM2MiAxMyA4LjUgWiBNIDEzIDEwLjUgQyAxMyAxMC42MzggMTIuOTQ0IDEwLjc2MyAxMi44NTQgMTAuODU0IEMgMTIuNzYzIDEwLjk0NCAxMi42MzggMTEgMTIuNSAxMSBDIDEyLjM2MiAxMSAxMi4yMzcgMTAuOTQ0IDEyLjE0NyAxMC44NTQgQyAxMi4wNTYgMTAuNzYzIDEyIDEwLjYzOCAxMiAxMC41IEMgMTIgMTAuMzYyIDEyLjA1NiAxMC4yMzcgMTIuMTQ3IDEwLjE0NyBDIDEyLjIzNyAxMC4wNTYgMTIuMzYyIDEwIDEyLjUgMTAgQyAxMi42MzggMTAgMTIuNzYzIDEwLjA1NiAxMi44NTQgMTAuMTQ3IEMgMTIuOTQ0IDEwLjIzNyAxMyAxMC4zNjIgMTMgMTAuNSBaIE0gMTUgMTAuNSBDIDE1IDEwLjYzOCAxNC45NDQgMTAuNzYzIDE0Ljg1NCAxMC44NTQgQyAxNC43NjMgMTAuOTQ0IDE0LjYzOCAxMSAxNC41IDExIEMgMTQuMzYyIDExIDE0LjIzNyAxMC45NDQgMTQuMTQ3IDEwLjg1NCBDIDE0LjA1NiAxMC43NjMgMTQgMTAuNjM4IDE0IDEwLjUgQyAxNCAxMC4zNjIgMTQuMDU2IDEwLjIzNyAxNC4xNDcgMTAuMTQ3IEMgMTQuMjM3IDEwLjA1NiAxNC4zNjIgMTAgMTQuNSAxMCBDIDE0LjYzOCAxMCAxNC43NjMgMTAuMDU2IDE0Ljg1NCAxMC4xNDcgQyAxNC45NDQgMTAuMjM3IDE1IDEwLjM2MiAxNSAxMC41IFogTSAxNyAxMC41IEMgMTcgMTAuNjM4IDE2Ljk0NCAxMC43NjMgMTYuODU0IDEwLjg1NCBDIDE2Ljc2MyAxMC45NDQgMTYuNjM4IDExIDE2LjUgMTEgQyAxNi4zNjIgMTEgMTYuMjM3IDEwLjk0NCAxNi4xNDcgMTAuODU0IEMgMTYuMDU2IDEwLjc2MyAxNiAxMC42MzggMTYgMTAuNSBDIDE2IDEwLjM2MiAxNi4wNTYgMTAuMjM3IDE2LjE0NyAxMC4xNDcgQyAxNi4yMzcgMTAuMDU2IDE2LjM2MiAxMCAxNi41IDEwIEMgMTYuNjM4IDEwIDE2Ljc2MyAxMC4wNTYgMTYuODU0IDEwLjE0NyBDIDE2Ljk0NCAxMC4yMzcgMTcgMTAuMzYyIDE3IDEwLjUgWiBNIDE5IDEwLjUgQyAxOSAxMC42MzggMTguOTQ0IDEwLjc2MyAxOC44NTQgMTAuODU0IEMgMTguNzYzIDEwLjk0NCAxOC42MzggMTEgMTguNSAxMSBDIDE4LjM2MiAxMSAxOC4yMzcgMTAuOTQ0IDE4LjE0NyAxMC44NTQgQyAxOC4wNTYgMTAuNzYzIDE4IDEwLjYzOCAxOCAxMC41IEMgMTggMTAuMzYyIDE4LjA1NiAxMC4yMzcgMTguMTQ3IDEwLjE0NyBDIDE4LjIzNyAxMC4wNTYgMTguMzYyIDEwIDE4LjUgMTAgQyAxOC42MzggMTAgMTguNzYzIDEwLjA1NiAxOC44NTQgMTAuMTQ3IEMgMTguOTQ0IDEwLjIzNyAxOSAxMC4zNjIgMTkgMTAuNSBaIE0gMTkgMTIuNSBDIDE5IDEyLjYzOCAxOC45NDQgMTIuNzYzIDE4Ljg1NCAxMi44NTQgQyAxOC43NjMgMTIuOTQ0IDE4LjYzOCAxMyAxOC41IDEzIEMgMTguMzYyIDEzIDE4LjIzNyAxMi45NDQgMTguMTQ3IDEyLjg1NCBDIDE4LjA1NiAxMi43NjMgMTggMTIuNjM4IDE4IDEyLjUgQyAxOCAxMi4zNjIgMTguMDU2IDEyLjIzNyAxOC4xNDcgMTIuMTQ3IEMgMTguMjM3IDEyLjA1NiAxOC4zNjIgMTIgMTguNSAxMiBDIDE4LjYzOCAxMiAxOC43NjMgMTIuMDU2IDE4Ljg1NCAxMi4xNDcgQyAxOC45NDQgMTIuMjM3IDE5IDEyLjM2MiAxOSAxMi41IFogTSAxOSA4LjUgQyAxOSA4LjYzOCAxOC45NDQgOC43NjMgMTguODU0IDguODU0IEMgMTguNzYzIDguOTQ0IDE4LjYzOCA5IDE4LjUgOSBDIDE4LjM2MiA5IDE4LjIzNyA4Ljk0NCAxOC4xNDcgOC44NTQgQyAxOC4wNTYgOC43NjMgMTggOC42MzggMTggOC41IEMgMTggOC4zNjIgMTguMDU2IDguMjM3IDE4LjE0NyA4LjE0NyBDIDE4LjIzNyA4LjA1NiAxOC4zNjIgOCAxOC41IDggQyAxOC42MzggOCAxOC43NjMgOC4wNTYgMTguODU0IDguMTQ3IEMgMTguOTQ0IDguMjM3IDE5IDguMzYyIDE5IDguNSBaIE0gOSAxNi41IEMgOSAxNi42MzggOC45NDQgMTYuNzYzIDguODU0IDE2Ljg1NCBDIDguNzYzIDE2Ljk0NCA4LjYzOCAxNyA4LjUgMTcgQyA4LjM2MiAxNyA4LjIzNyAxNi45NDQgOC4xNDcgMTYuODU0IEMgOC4wNTYgMTYuNzYzIDggMTYuNjM4IDggMTYuNSBDIDggMTYuMzYyIDguMDU2IDE2LjIzNyA4LjE0NyAxNi4xNDcgQyA4LjIzNyAxNi4wNTYgOC4zNjIgMTYgOC41IDE2IEMgOC42MzggMTYgOC43NjMgMTYuMDU2IDguODU0IDE2LjE0NyBDIDguOTQ0IDE2LjIzNyA5IDE2LjM2MiA5IDE2LjUgWiBNIDE1IDE2LjUgQyAxNSAxNi42MzggMTQuOTQ0IDE2Ljc2MyAxNC44NTQgMTYuODU0IEMgMTQuNzYzIDE2Ljk0NCAxNC42MzggMTcgMTQuNSAxNyBDIDE0LjM2MiAxNyAxNC4yMzcgMTYuOTQ0IDE0LjE0NyAxNi44NTQgQyAxNC4wNTYgMTYuNzYzIDE0IDE2LjYzOCAxNCAxNi41IEMgMTQgMTYuMzYyIDE0LjA1NiAxNi4yMzcgMTQuMTQ3IDE2LjE0NyBDIDE0LjIzNyAxNi4wNTYgMTQuMzYyIDE2IDE0LjUgMTYgQyAxNC42MzggMTYgMTQuNzYzIDE2LjA1NiAxNC44NTQgMTYuMTQ3IEMgMTQuOTQ0IDE2LjIzNyAxNSAxNi4zNjIgMTUgMTYuNSBaIE0gMSAxMC41IEMgMSAxMC42MzggMC45NDQgMTAuNzYzIDAuODU0IDEwLjg1NCBDIDAuNzYzIDEwLjk0NCAwLjYzOCAxMSAwLjUgMTEgQyAwLjM2MiAxMSAwLjIzNyAxMC45NDQgMC4xNDcgMTAuODU0IEMgMC4wNTYgMTAuNzYzIDAgMTAuNjM4IDAgMTAuNSBDIDAgMTAuMzYyIDAuMDU2IDEwLjIzNyAwLjE0NyAxMC4xNDcgQyAwLjIzNyAxMC4wNTYgMC4zNjIgMTAgMC41IDEwIEMgMC42MzggMTAgMC43NjMgMTAuMDU2IDAuODU0IDEwLjE0NyBDIDAuOTQ0IDEwLjIzNyAxIDEwLjM2MiAxIDEwLjUgWiBNIDMgMTAuNSBDIDMgMTAuNjM4IDIuOTQ0IDEwLjc2MyAyLjg1NCAxMC44NTQgQyAyLjc2MyAxMC45NDQgMi42MzggMTEgMi41IDExIEMgMi4zNjIgMTEgMi4yMzcgMTAuOTQ0IDIuMTQ3IDEwLjg1NCBDIDIuMDU2IDEwLjc2MyAyIDEwLjYzOCAyIDEwLjUgQyAyIDEwLjM2MiAyLjA1NiAxMC4yMzcgMi4xNDcgMTAuMTQ3IEMgMi4yMzcgMTAuMDU2IDIuMzYyIDEwIDIuNSAxMCBDIDIuNjM4IDEwIDIuNzYzIDEwLjA1NiAyLjg1NCAxMC4xNDcgQyAyLjk0NCAxMC4yMzcgMyAxMC4zNjIgMyAxMC41IFogTSAxOC45MzMgMTQuMjUgQyAxOS4wMjkgMTQuNDE3IDE5LjAxNyAxNC42MDQgMTguOTMzIDE0Ljc1IEMgMTguODQ5IDE0Ljg5NiAxOC42OTMgMTUgMTguNSAxNSBMIDE3LjUgMTUgTCAxNi41IDE1IEMgMTYuNDExIDE1IDE2LjMyNSAxNC45NzYgMTYuMjUgMTQuOTMzIEMgMTYuMTc1IDE0Ljg5IDE2LjExMiAxNC44MjggMTYuMDY3IDE0Ljc1IEMgMTUuOTcxIDE0LjU4NCAxNS45ODMgMTQuMzk2IDE2LjA2NyAxNC4yNSBDIDE2LjE1MSAxNC4xMDQgMTYuMzA3IDE0IDE2LjUgMTQgTCAxNy41IDE0IEwgMTguNSAxNCBDIDE4LjU5IDE0IDE4LjY3NiAxNC4wMjQgMTguNzUgMTQuMDY3IEMgMTguODI1IDE0LjExIDE4Ljg4OSAxNC4xNzIgMTguOTMzIDE0LjI1IFogTSA4LjA2NyAxNC43NSBDIDcuOTcxIDE0LjU4NCA3Ljk4MyAxNC4zOTYgOC4wNjcgMTQuMjUgQyA4LjE1MSAxNC4xMDQgOC4zMDggMTQgOC41IDE0IEwgOS41IDE0IEwgMTAuNSAxNCBDIDEwLjU5IDE0IDEwLjY3NiAxNC4wMjQgMTAuNzUgMTQuMDY3IEMgMTAuODI1IDE0LjExIDEwLjg4OCAxNC4xNzIgMTAuOTMzIDE0LjI1IEMgMTEuMDI5IDE0LjQxNyAxMS4wMTcgMTQuNjA0IDEwLjkzMyAxNC43NSBDIDEwLjg0OSAxNC44OTYgMTAuNjkyIDE1IDEwLjUgMTUgTCA5LjUgMTUgTCA4LjUgMTUgQyA4LjQxMSAxNSA4LjMyNSAxNC45NzYgOC4yNSAxNC45MzMgQyA4LjE3NSAxNC44OSA4LjExMiAxNC44MjggOC4wNjcgMTQuNzUgWiBNIDE3IDEyLjUgQyAxNyAxMi42MzggMTYuOTQ0IDEyLjc2MyAxNi44NTQgMTIuODU0IEMgMTYuNzYzIDEyLjk0NCAxNi42MzggMTMgMTYuNSAxMyBDIDE2LjM2MiAxMyAxNi4yMzcgMTIuOTQ0IDE2LjE0NyAxMi44NTQgQyAxNi4wNTYgMTIuNzYzIDE2IDEyLjYzOCAxNiAxMi41IEMgMTYgMTIuMzYyIDE2LjA1NiAxMi4yMzcgMTYuMTQ3IDEyLjE0NyBDIDE2LjIzNyAxMi4wNTYgMTYuMzYyIDEyIDE2LjUgMTIgQyAxNi42MzggMTIgMTYuNzYzIDEyLjA1NiAxNi44NTQgMTIuMTQ3IEMgMTYuOTQ0IDEyLjIzNyAxNyAxMi4zNjIgMTcgMTIuNSBaIE0gMTYuOTMzIDE4LjI1IEMgMTcuMDI5IDE4LjQxNyAxNy4wMTcgMTguNjA0IDE2LjkzMyAxOC43NSBDIDE2Ljg0OSAxOC44OTYgMTYuNjkzIDE5IDE2LjUgMTkgTCAxNS41IDE5IEwgMTQuNSAxOSBDIDE0LjQxMSAxOSAxNC4zMjUgMTguOTc2IDE0LjI1IDE4LjkzMyBDIDE0LjE3NSAxOC44OSAxNC4xMTIgMTguODI4IDE0LjA2NyAxOC43NSBDIDEzLjk3MSAxOC41ODQgMTMuOTgzIDE4LjM5NiAxNC4wNjcgMTguMjUgQyAxNC4xNTEgMTguMTA0IDE0LjMwOCAxOCAxNC41IDE4IEwgMTUuNSAxOCBMIDE2LjUgMTggQyAxNi41OSAxOCAxNi42NzYgMTguMDI0IDE2Ljc1IDE4LjA2NyBDIDE2LjgyNSAxOC4xMSAxNi44ODkgMTguMTcyIDE2LjkzMyAxOC4yNSBaIE0gMTIuOTMzIDE2LjI1IEMgMTMuMDI5IDE2LjQxNyAxMy4wMTcgMTYuNjA0IDEyLjkzMyAxNi43NSBDIDEyLjg0OSAxNi44OTYgMTIuNjkyIDE3IDEyLjUgMTcgTCAxMS41IDE3IEwgMTAuNSAxNyBDIDEwLjQxMSAxNyAxMC4zMjUgMTYuOTc2IDEwLjI1IDE2LjkzMyBDIDEwLjE3NSAxNi44OSAxMC4xMTIgMTYuODI4IDEwLjA2NyAxNi43NSBDIDkuOTcxIDE2LjU4NCA5Ljk4MyAxNi4zOTYgMTAuMDY3IDE2LjI1IEMgMTAuMTUxIDE2LjEwNCAxMC4zMDggMTYgMTAuNSAxNiBMIDExLjUgMTYgTCAxMi41IDE2IEMgMTIuNTkgMTYgMTIuNjc2IDE2LjAyNCAxMi43NSAxNi4wNjcgQyAxMi44MjUgMTYuMTEgMTIuODg4IDE2LjE3MiAxMi45MzMgMTYuMjUgWiBNIDE4LjkzMyAxNi4yNSBDIDE5LjAyOSAxNi40MTcgMTkuMDE3IDE2LjYwNCAxOC45MzMgMTYuNzUgQyAxOC44NDkgMTYuODk2IDE4LjY5MyAxNyAxOC41IDE3IEwgMTcuNSAxNyBMIDE2LjUgMTcgQyAxNi40MTEgMTcgMTYuMzI1IDE2Ljk3NiAxNi4yNSAxNi45MzMgQyAxNi4xNzUgMTYuODkgMTYuMTEyIDE2LjgyOCAxNi4wNjcgMTYuNzUgQyAxNS45NzEgMTYuNTg0IDE1Ljk4MyAxNi4zOTYgMTYuMDY3IDE2LjI1IEMgMTYuMTUxIDE2LjEwNCAxNi4zMDcgMTYgMTYuNSAxNiBMIDE3LjUgMTYgTCAxOC41IDE2IEMgMTguNTkgMTYgMTguNjc2IDE2LjAyNCAxOC43NSAxNi4wNjcgQyAxOC44MjUgMTYuMTEgMTguODg5IDE2LjE3MiAxOC45MzMgMTYuMjUgWiBNIDkgMTguNSBDIDkgMTguNjM4IDguOTQ0IDE4Ljc2MyA4Ljg1NCAxOC44NTQgQyA4Ljc2MyAxOC45NDQgOC42MzggMTkgOC41IDE5IEMgOC4zNjIgMTkgOC4yMzcgMTguOTQ0IDguMTQ3IDE4Ljg1NCBDIDguMDU2IDE4Ljc2MyA4IDE4LjYzOCA4IDE4LjUgQyA4IDE4LjM2MiA4LjA1NiAxOC4yMzcgOC4xNDcgMTguMTQ3IEMgOC4yMzcgMTguMDU2IDguMzYyIDE4IDguNSAxOCBDIDguNjM4IDE4IDguNzYzIDE4LjA1NiA4Ljg1NCAxOC4xNDcgQyA4Ljk0NCAxOC4yMzcgOSAxOC4zNjIgOSAxOC41IFogTSAxMyAxOC41IEMgMTMgMTguNjM4IDEyLjk0NCAxOC43NjMgMTIuODU0IDE4Ljg1NCBDIDEyLjc2MyAxOC45NDQgMTIuNjM4IDE5IDEyLjUgMTkgQyAxMi4zNjIgMTkgMTIuMjM3IDE4Ljk0NCAxMi4xNDcgMTguODU0IEMgMTIuMDU2IDE4Ljc2MyAxMiAxOC42MzggMTIgMTguNSBDIDEyIDE4LjM2MiAxMi4wNTYgMTguMjM3IDEyLjE0NyAxOC4xNDcgQyAxMi4yMzcgMTguMDU2IDEyLjM2MiAxOCAxMi41IDE4IEMgMTIuNjM4IDE4IDEyLjc2MyAxOC4wNTYgMTIuODU0IDE4LjE0NyBDIDEyLjk0NCAxOC4yMzcgMTMgMTguMzYyIDEzIDE4LjUgWiBNIDE5IDE4LjUgQyAxOSAxOC42MzggMTguOTQ0IDE4Ljc2MyAxOC44NTQgMTguODU0IEMgMTguNzYzIDE4Ljk0NCAxOC42MzggMTkgMTguNSAxOSBDIDE4LjM2MiAxOSAxOC4yMzcgMTguOTQ0IDE4LjE0NyAxOC44NTQgQyAxOC4wNTYgMTguNzYzIDE4IDE4LjYzOCAxOCAxOC41IEMgMTggMTguMzYyIDE4LjA1NiAxOC4yMzcgMTguMTQ3IDE4LjE0NyBDIDE4LjIzNyAxOC4wNTYgMTguMzYyIDE4IDE4LjUgMTggQyAxOC42MzggMTggMTguNzYzIDE4LjA1NiAxOC44NTQgMTguMTQ3IEMgMTguOTQ0IDE4LjIzNyAxOSAxOC4zNjIgMTkgMTguNSBaIE0gMTEgMTguNSBDIDExIDE4LjYzOCAxMC45NDQgMTguNzYzIDEwLjg1NCAxOC44NTQgQyAxMC43NjMgMTguOTQ0IDEwLjYzOCAxOSAxMC41IDE5IEMgMTAuMzYyIDE5IDEwLjIzNyAxOC45NDQgMTAuMTQ3IDE4Ljg1NCBDIDEwLjA1NiAxOC43NjMgMTAgMTguNjM4IDEwIDE4LjUgQyAxMCAxOC4zNjIgMTAuMDU2IDE4LjIzNyAxMC4xNDcgMTguMTQ3IEMgMTAuMjM3IDE4LjA1NiAxMC4zNjIgMTggMTAuNSAxOCBDIDEwLjYzOCAxOCAxMC43NjMgMTguMDU2IDEwLjg1NCAxOC4xNDcgQyAxMC45NDQgMTguMjM3IDExIDE4LjM2MiAxMSAxOC41IFogTSA4LjI1IDIuOTMzIEMgOC4wODQgMi44MzcgOCAyLjY2OSA4IDIuNSBDIDggMi4zMzIgOC4wODMgMi4xNjMgOC4yNSAyLjA2NyBDIDguNDE3IDEuOTcxIDguNjA0IDEuOTgzIDguNzUgMi4wNjcgQyA4Ljg5NiAyLjE1MSA5IDIuMzA4IDkgMi41IEMgOSAyLjYzOCA4Ljk0NCAyLjc2MyA4Ljg1NCAyLjg1NCBDIDguNzYzIDIuOTQ0IDguNjM4IDMgOC41IDMgQyA4LjQ1NiAzIDguNDEzIDIuOTk0IDguMzcxIDIuOTgzIEMgOC4zMjkgMi45NzIgOC4yODggMi45NTUgOC4yNSAyLjkzMyBaIE0gMTIgMTQuNSBMIDEyIDEzLjUgTCAxMiAxMi41IEMgMTIgMTIuMzYyIDEyLjA1NiAxMi4yMzcgMTIuMTQ3IDEyLjE0NyBDIDEyLjIzNyAxMi4wNTYgMTIuMzYyIDEyIDEyLjUgMTIgTCAxMy41IDEyIEwgMTQuNSAxMiBDIDE0LjYzOCAxMiAxNC43NjMgMTIuMDU2IDE0Ljg1NCAxMi4xNDcgQyAxNC45NDQgMTIuMjM3IDE1IDEyLjM2MiAxNSAxMi41IEwgMTUgMTMuNSBMIDE1IDE0LjUgQyAxNSAxNC42MzggMTQuOTQ0IDE0Ljc2MyAxNC44NTQgMTQuODU0IEMgMTQuNzYzIDE0Ljk0NCAxNC42MzggMTUgMTQuNSAxNSBMIDEzLjUgMTUgTCAxMi41IDE1IEMgMTIuMzYyIDE1IDEyLjIzNyAxNC45NDQgMTIuMTQ3IDE0Ljg1NCBDIDEyLjA1NiAxNC43NjMgMTIgMTQuNjM4IDEyIDE0LjUgWiBNIDEzIDE0IEwgMTMuNSAxNCBMIDE0IDE0IEwgMTQgMTMuNSBMIDE0IDEzIEwgMTMuNSAxMyBMIDEzIDEzIEwgMTMgMTMuNSBaXCIvPlxyXG5cdFx0XHRcdDwvc3ZnPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdClcclxuXHQpLCBbIGNvbnRlbnQudmlld0JveCwgY29udGVudC5kLCBxcmNvZGUuaXNWYWxpZCwgcXJjb2RlLnNpemUsIHFyY29kZS5mb3JlZ3JvdW5kQ29sb3IsIHFyY29kZS5iYWNrZ3JvdW5kQ29sb3IgXSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByZXZpZXdRUkNvZGUiLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCdcclxuXHJcblxyXG5jb25zdCB1c2VXaXNlUmVmID0gKGluaXRpYWxpemVWYWx1ZSkgPT4ge1xyXG5cdGNvbnN0IGRhdGEgPSB1c2VSZWYoXHJcblx0XHR0eXBlb2YgaW5pdGlhbGl6ZVZhbHVlID09ICdmdW5jdGlvbidcclxuXHRcdFx0PyBpbml0aWFsaXplVmFsdWUoKVxyXG5cdFx0XHQ6IHsgLi4uaW5pdGlhbGl6ZVZhbHVlIH1cclxuXHQpO1xyXG5cdGNvbnN0IGhhbmRsZXIgPSB1c2VSZWYoe1xyXG5cdFx0Z2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xyXG5cdFx0XHRpZigvKF9fc2V0KSQvZy50ZXN0KGtleSkpIHtcclxuXHRcdFx0XHRyZXR1cm4gKG4pID0+IHRhcmdldFtrZXkucmVwbGFjZSgvKF9fc2V0KSQvZywgJycpXSA9IG5cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gUmVmbGVjdC5nZXQoLi4uYXJndW1lbnRzKTtcclxuXHRcdH0sXHJcblx0XHRzZXQob2JqLCBrZXksIHZhbHVlKSB7XHJcblx0XHRcdFJlZmxlY3Quc2V0KC4uLmFyZ3VtZW50cyk7XHJcblx0XHRcdHJldHVybiBSZWZsZWN0LnNldCguLi5hcmd1bWVudHMpO1xyXG5cdFx0fVxyXG5cdH0pXHJcblx0Y29uc3QgciA9IHVzZVJlZihuZXcgUHJveHkoZGF0YS5jdXJyZW50LCBoYW5kbGVyLmN1cnJlbnQpKTtcclxuXHRyZXR1cm4gci5jdXJyZW50O1xyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZVdpc2VSZWYiLCJpbXBvcnQgeyBoLCBGcmFnbWVudCB9IGZyb20gJ3ByZWFjdCdcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyB1c2VFZmZlY3RPbmNlIH0gZnJvbSAncmVhY3QtdXNlJ1xyXG5cclxuaW1wb3J0IFFSQ29kZSBmcm9tICcuLy4uLy4uLy4uL2NvbnRhaW5lcnMvUVJDb2RlJ1xyXG5pbXBvcnQgdXNlV2lzZVJlZiBmcm9tICcuLy4uLy4uLy4uL2xpYi91c2VXaXNlUmVmJ1xyXG5pbXBvcnQgdXNlV2lzZVN0YXRlIGZyb20gJy4vLi4vLi4vLi4vbGliL3VzZVdpc2VTdGF0ZSdcclxuXHJcblxyXG5jb25zdCBUZXh0ID0gcHJvcHMgPT4ge1xyXG5cclxuXHRjb25zdCBbIHFyY29kZSBdID0gUVJDb2RlLnVzZUNvbnRhaW5lcigpXHJcblx0Y29uc3Qgbm9kZSA9IHVzZVdpc2VSZWYoKVxyXG5cdGNvbnN0IHZhbHVlID0gdXNlV2lzZVN0YXRlKHtcclxuXHRcdHRleHQ6IHByb3BzLmRlZmF1bHRGb3JtRGF0YT8udGV4dCB8fCAnJ1xyXG5cdH0pXHJcblxyXG5cdGNvbnN0IG9uSW5wdXRDaGFuZ2VIYW5kbGVyID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xyXG5cdFx0dmFsdWUudGV4dCA9IGV2ZW50LnRhcmdldD8udmFsdWUgfHwgJydcclxuXHR9LCBbXSlcclxuXHJcblx0Y29uc3QgaXNWYWxpZCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuXHRcdHJldHVybiB2YWx1ZS50ZXh0ICE9ICcnXHJcblx0fSwgW10pXHJcblxyXG5cdHVzZUVmZmVjdCgoKSA9PiB7XHJcblx0XHRwcm9wcy5zYXZlRm9ybURhdGEoeyAuLi52YWx1ZSB9KVxyXG5cdFx0cXJjb2RlLmlzVmFsaWQgPSBpc1ZhbGlkKClcclxuXHRcdHFyY29kZS5jb250ZW50ID0gdmFsdWUudGV4dFxyXG5cdH0sIFsgdmFsdWUudGV4dCBdKVxyXG5cclxuXHR1c2VFZmZlY3RPbmNlKCgpID0+IHtcclxuXHRcdG5vZGUudGV4dC5mb2N1cygpXHJcblx0fSlcclxuXHJcblx0cmV0dXJuIHVzZU1lbW8oKCkgPT4gKFxyXG5cdFx0PEZyYWdtZW50PlxyXG5cclxuXHRcdFx0PGxhYmVsPlxyXG5cdFx0XHRcdFRleHRcclxuXHRcdFx0XHQ8YiBhbHQ9XCJGaWVsZCBpcyByZXF1aXJlZFwiPio8L2I+XHJcblx0XHRcdDwvbGFiZWw+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtOFwiIC8+XHJcblxyXG5cdFx0XHQ8aW5wdXRcclxuXHRcdFx0XHRyZWY9eyBub2RlLnRleHRfX3NldCB9XHJcblx0XHRcdFx0dHlwZT1cInRleHRcIlxyXG5cdFx0XHRcdGRlZmF1bHRWYWx1ZT17IHZhbHVlLnRleHQgfVxyXG5cdFx0XHRcdHBsYWNlaG9sZGVyPVwiV3JpdGUgc29tZXRoaW5nLi5cIlxyXG5cdFx0XHRcdG9uQ2hhbmdlPXsgb25JbnB1dENoYW5nZUhhbmRsZXIgfVxyXG5cdFx0XHQvPlxyXG5cclxuXHRcdDwvRnJhZ21lbnQ+XHJcblx0KSwgW10pXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0IiwiaW1wb3J0IHsgaCwgRnJhZ21lbnQgfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgdXNlRWZmZWN0T25jZSB9IGZyb20gJ3JlYWN0LXVzZSdcclxuXHJcbmltcG9ydCBRUkNvZGUgZnJvbSAnLi8uLi8uLi8uLi9jb250YWluZXJzL1FSQ29kZSdcclxuaW1wb3J0IHVzZVdpc2VSZWYgZnJvbSAnLi8uLi8uLi8uLi9saWIvdXNlV2lzZVJlZidcclxuaW1wb3J0IHVzZVdpc2VTdGF0ZSBmcm9tICcuLy4uLy4uLy4uL2xpYi91c2VXaXNlU3RhdGUnXHJcblxyXG5cclxuY29uc3QgTGluayA9IHByb3BzID0+IHtcclxuXHJcblx0Y29uc3QgWyBxcmNvZGUgXSA9IFFSQ29kZS51c2VDb250YWluZXIoKVxyXG5cdGNvbnN0IG5vZGUgPSB1c2VXaXNlUmVmKClcclxuXHRjb25zdCB2YWx1ZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRsaW5rOiBwcm9wcy5kZWZhdWx0Rm9ybURhdGE/LmxpbmsgfHwgJydcclxuXHR9KVxyXG5cclxuXHRjb25zdCBvbklucHV0Q2hhbmdlSGFuZGxlciA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcclxuXHRcdHZhbHVlLmxpbmsgPSBldmVudC50YXJnZXQ/LnZhbHVlIHx8ICcnXHJcblx0fSwgW10pXHJcblxyXG5cdGNvbnN0IGlzVmFsaWQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcblx0XHRyZXR1cm4gdmFsdWUubGluayAhPSAnJ1xyXG5cdH0sIFtdKVxyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cdFx0cHJvcHMuc2F2ZUZvcm1EYXRhKHsgLi4udmFsdWUgfSlcclxuXHRcdHFyY29kZS5pc1ZhbGlkID0gaXNWYWxpZCgpXHJcblx0XHRsZXQgY29udGVudCA9IHZhbHVlLmxpbmtcclxuXHRcdGlmKCEvXihodHRwcz86XFwvXFwvKS8udGVzdChjb250ZW50KSlcclxuXHRcdFx0Y29udGVudCA9IGBodHRwczovLyR7Y29udGVudH1gXHJcblx0XHQvLyBzZXREYXRhKGRhdGEpXHJcblx0XHRxcmNvZGUuY29udGVudCA9IGNvbnRlbnRcclxuXHR9LCBbIHZhbHVlLmxpbmsgXSlcclxuXHJcblx0dXNlRWZmZWN0T25jZSgoKSA9PiB7XHJcblx0XHRub2RlLmxpbmsuZm9jdXMoKVxyXG5cdH0pXHJcblxyXG5cdHJldHVybiB1c2VNZW1vKCgpID0+IChcclxuXHRcdDxGcmFnbWVudD5cclxuXHJcblx0XHRcdDxsYWJlbD5cclxuXHRcdFx0XHRMaW5rIChVUkwpXHJcblx0XHRcdFx0PGI+KjwvYj5cclxuXHRcdFx0PC9sYWJlbD5cclxuXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC04XCIgLz5cclxuXHJcblx0XHRcdDxpbnB1dFxyXG5cdFx0XHRcdHJlZj17IG5vZGUubGlua19fc2V0IH1cclxuXHRcdFx0XHR0eXBlPVwidGV4dFwiXHJcblx0XHRcdFx0ZGVmYXVsdFZhbHVlPXsgdmFsdWUubGluayB9XHJcblx0XHRcdFx0cGxhY2Vob2xkZXI9eyBsb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyhcXC8rKSQvZywgJycpLnJlcGxhY2UoL14oaHR0cHM/OlxcL1xcLykvZywgJycpIH1cclxuXHRcdFx0XHRvbkNoYW5nZT17IG9uSW5wdXRDaGFuZ2VIYW5kbGVyIH1cclxuXHRcdFx0Lz5cclxuXHJcblx0XHQ8L0ZyYWdtZW50PlxyXG5cdCksIFtdKVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTGluayIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5cclxuXHJcbmNvbnN0IElucHV0Q2hlY2tib3ggPSBwcm9wcyA9PiB7XHJcblx0cmV0dXJuIChcclxuXHRcdDxsYWJlbCBjbGFzc05hbWU9XCJjaGVja2JveFwiPlxyXG5cdFx0XHQ8aW5wdXRcclxuXHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxyXG5cdFx0XHRcdG9uQ2hhbmdlPXsgZXZlbnQgPT4ge1xyXG5cclxuXHRcdFx0XHRcdGlmKCFwcm9wcy5vbkNoYW5nZSlcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdHByb3BzLm9uQ2hhbmdlKFxyXG5cdFx0XHRcdFx0XHRldmVudC50YXJnZXQuY2hlY2tlZFxyXG5cdFx0XHRcdFx0XHRcdD8gcHJvcHMudHJ1ZVZhbHVlICE9IHVuZGVmaW5lZFxyXG5cdFx0XHRcdFx0XHRcdFx0PyBwcm9wcy50cnVlVmFsdWVcclxuXHRcdFx0XHRcdFx0XHRcdDogdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdDogcHJvcHMuZmFsc2VWYWx1ZSAhPSB1bmRlZmluZWRcclxuXHRcdFx0XHRcdFx0XHRcdD8gcHJvcHMuZmFsc2VWYWx1ZVxyXG5cdFx0XHRcdFx0XHRcdFx0OiBmYWxzZVxyXG5cdFx0XHRcdFx0KVxyXG5cclxuXHRcdFx0XHR9fVxyXG5cdFx0XHRcdGRlZmF1bHRDaGVja2VkPXsgcHJvcHMuZGVmYXVsdFZhbHVlID09IHByb3BzLnRydWVWYWx1ZSB9XHJcblx0XHRcdC8+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiY2hlY2tib3gtY2hlY2ttYXJrXCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJjaGVja2JveC1jaGVja21hcmstY29udGFpbmVyXCI+XHJcblx0XHRcdFx0XHQ8c3ZnIHZpZXdCb3g9XCIwIDAgNjAuMzEgNDkuOTdcIj5cclxuXHRcdFx0XHRcdFx0PHBvbHlnb24gcG9pbnRzPVwiMjEuNjYgNDkuOTcgMCAyOC4zMSAxMS4zMSAxNyAyMS42NiAyNy4zNCA0OSAwIDYwLjMxIDExLjMxIDIxLjY2IDQ5Ljk3XCIvPlxyXG5cdFx0XHRcdFx0PC9zdmc+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XHR7IHByb3BzLmNoaWxkcmVuIH1cclxuXHRcdDwvbGFiZWw+XHJcblx0KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSW5wdXRDaGVja2JveCIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuXHJcblxyXG5jb25zdCB1c2VDbGlja0lPID0gKG5vZGUsIG9uQ2xpY2tJbnNpZGUsIG9uQ2xpY2tPdXRzaWRlLCBkZXBzKSA9PiB7XHJcblxyXG5cdGNvbnN0IG9uR2xvYmFsQ2xpY2sgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XHJcblxyXG5cdFx0aWYoIW5vZGUpXHJcblx0XHRcdHJldHVybiBvbkNsaWNrT3V0c2lkZShldmVudClcclxuXHJcblx0XHRpZighQXJyYXkuaXNBcnJheShub2RlKSlcclxuXHRcdFx0bm9kZSA9IFsgbm9kZSBdXHJcblxyXG5cdFx0Zm9yKGxldCBuIG9mIG5vZGUpIHtcclxuXHRcdFx0aWYobiAmJiBuLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpXHJcblx0XHRcdFx0cmV0dXJuIG9uQ2xpY2tJbnNpZGUoZXZlbnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvbkNsaWNrT3V0c2lkZShldmVudCk7XHJcblxyXG5cdH0sIFsgbm9kZSBdKVxyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25HbG9iYWxDbGljaylcclxuXHRcdHJldHVybiAoKSA9PiB7XHJcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uR2xvYmFsQ2xpY2spXHJcblx0XHR9XHJcblx0fSwgWyBub2RlLCAuLi5kZXBzIF0pXHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXNlQ2xpY2tJTyIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IHVzZVVwZGF0ZSB9IGZyb20gJ3JlYWN0LXVzZSdcclxuaW1wb3J0IHsgY3gsIGNzcyB9IGZyb20gJ0BlbW90aW9uL2NzcydcclxuXHJcbmltcG9ydCB1c2VXaXNlUmVmIGZyb20gJy4vLi4vLi4vbGliL3VzZVdpc2VSZWYnXHJcbmltcG9ydCB1c2VDbGlja0lPIGZyb20gJy4vLi4vLi4vbGliL3VzZUNsaWNrSU8nXHJcblxyXG5pbXBvcnQgJy4vc3R5bGUubGVzcydcclxuXHJcblxyXG5jb25zdCBJbnB1dFJhbmdlID0gcHJvcHMgPT4ge1xyXG5cclxuXHRjb25zdCBub2RlID0gdXNlV2lzZVJlZih7XHJcblx0XHRjb250YWluZXI6IG51bGwsXHJcblx0XHRzZWxlY3RlZDogbnVsbCxcclxuXHRcdHRvZ2dsZTogcHJvcHMudG9nZ2xlTm9kZSxcclxuXHRcdHNlYXJjaElucHV0OiBudWxsXHJcblx0fSlcclxuXHRjb25zdCBbIHZhbHVlLCBzZXRWYWx1ZSBdID0gdXNlU3RhdGUocHJvcHMuZGVmYXVsdFZhbHVlKVxyXG5cdGNvbnN0IFsgb3B0aW9ucywgc2V0T3B0aW9ucyBdID0gdXNlU3RhdGUocHJvcHMub3B0aW9ucyB8fCBbXSlcclxuXHRjb25zdCBbIGlzRm9jdXMsIHNldElzRm9jdXMgXSA9IHVzZVN0YXRlKGZhbHNlKVxyXG5cdGNvbnN0IHVwZGF0ZSA9IHVzZVVwZGF0ZSgpXHJcblxyXG5cdGNvbnN0IG9uSW5wdXRDaGFuZ2UgPSB1c2VDYWxsYmFjayhldmVudCA9PiB7XHJcblxyXG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG5cdFx0bGV0IF9fdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWVcclxuXHJcblx0XHRpZihfX3ZhbHVlID09IHZhbHVlKVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0c2V0SXNGb2N1cyhmYWxzZSlcclxuXHRcdHNldFZhbHVlKF9fdmFsdWUpXHJcblxyXG5cdFx0aWYocHJvcHMub25DaGFuZ2UpXHJcblx0XHRcdHByb3BzLm9uQ2hhbmdlKF9fdmFsdWUpXHJcblxyXG5cdH0sIFsgdmFsdWUgXSlcclxuXHJcblx0Y29uc3QgdXBkYXRlT3B0aW9ucyA9IHVzZUNhbGxiYWNrKChzZWFyY2hWYWx1ZSkgPT4ge1xyXG5cdFx0c2V0T3B0aW9ucyhcclxuXHRcdFx0c2VhcmNoVmFsdWUubGVuZ3RoID4gMFxyXG5cdFx0XHRcdD8gcHJvcHMub3B0aW9ucy5maWx0ZXIob3B0aW9uID0+IHtcclxuXHRcdFx0XHRcdGZvcihsZXQga2V5d29yZCBvZiBvcHRpb24ua2V5d29yZHMpIHtcclxuXHRcdFx0XHRcdFx0aWYoKG5ldyBSZWdFeHAoc2VhcmNoVmFsdWUsICdpZycpKS50ZXN0KGtleXdvcmQpKVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0OiBwcm9wcy5vcHRpb25zXHJcblx0XHQpXHJcblx0fSwgWyBwcm9wcy5vcHRpb25zIF0pXHJcblxyXG5cdHVzZUVmZmVjdCgoKSA9PiB7XHJcblx0XHRub2RlLnRvZ2dsZSA9IHByb3BzLnRvZ2dsZU5vZGVcclxuXHRcdHVwZGF0ZSgpXHJcblx0fSwgWyBwcm9wcy50b2dnbGVOb2RlIF0pXHJcblxyXG5cdHVzZUVmZmVjdCgoKSA9PiB7XHJcblx0XHRpZihwcm9wcy52YWx1ZSlcclxuXHRcdFx0c2V0VmFsdWUocHJvcHMudmFsdWUpXHJcblx0fSwgWyBwcm9wcy52YWx1ZSBdKVxyXG5cclxuXHR1c2VDbGlja0lPKFxyXG5cdFx0WyBub2RlLmNvbnRhaW5lciwgbm9kZS50b2dnbGUgXSxcclxuXHRcdChldmVudCkgPT4gc2V0SXNGb2N1cyhub2RlLnNlbGVjdGVkLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgfHwgKG5vZGU/LnRvZ2dsZSAmJiBub2RlLnRvZ2dsZS5jb250YWlucyhldmVudC50YXJnZXQpKSA/ICFpc0ZvY3VzIDogdHJ1ZSksXHJcblx0XHQoZXZlbnQpID0+IHNldElzRm9jdXMoZmFsc2UpLFxyXG5cdFx0WyBpc0ZvY3VzIF1cclxuXHQpXHJcblxyXG5cdHVzZUVmZmVjdCgoKSA9PiB7XHJcblx0XHRpZighcHJvcHMuc2VhcmNoKSByZXR1cm47XHJcblx0XHRpZighbm9kZS5zZWFyY2hJbnB1dCkgcmV0dXJuO1xyXG5cdFx0bm9kZS5zZWFyY2hJbnB1dC52YWx1ZSA9ICcnXHJcblx0XHRub2RlLnNlYXJjaElucHV0LmZvY3VzKClcclxuXHRcdHVwZGF0ZU9wdGlvbnMoJycpXHJcblx0fSwgWyBpc0ZvY3VzIF0pXHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2XHJcblx0XHRcdHJlZj17IG4gPT4geyBub2RlLmNvbnRhaW5lciA9IG4gfX1cclxuXHRcdFx0Y2xhc3NOYW1lPXtjeCgnaW5wdXQtZHJvcGRvd24nLCB7ICdpcy1mb2N1cyc6IGlzRm9jdXMgfSl9XHJcblx0XHQ+XHJcblx0XHRcdDxkaXZcclxuXHRcdFx0XHRyZWY9eyBuID0+IHsgbm9kZS5zZWxlY3RlZCA9IG4gfX1cclxuXHRcdFx0XHRjbGFzc05hbWU9XCJpbnB1dC1kcm9wZG93bi1zZWxlY3RlZFwiXHJcblx0XHRcdD5cclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHQocHJvcHMub3B0aW9ucyB8fCBbXSkuZmluZChvcHRpb24gPT4gb3B0aW9uLnZhbHVlID09IHZhbHVlKT8ubGFiZWxcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJpbnB1dC1kcm9wZG93bi1hcnJvd1wiPlxyXG5cdFx0XHRcdFx0PHN2ZyB2aWV3Qm94PVwiMCAwIDMyMCA1MTJcIj5cclxuXHRcdFx0XHRcdFx0PHBhdGggZD1cIk0zMS4zIDE5MmgyNTcuM2MxNy44IDAgMjYuNyAyMS41IDE0LjEgMzQuMUwxNzQuMSAzNTQuOGMtNy44IDcuOC0yMC41IDcuOC0yOC4zIDBMMTcuMiAyMjYuMUM0LjYgMjEzLjUgMTMuNSAxOTIgMzEuMyAxOTJ6XCIvPlxyXG5cdFx0XHRcdFx0PC9zdmc+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWRyb3Bkb3duLW9wdGlvbnNcIj5cclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRwcm9wcy5zZWFyY2ggJiYgKFxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWRyb3Bkb3duLXNlYXJjaFwiPlxyXG5cdFx0XHRcdFx0XHRcdDxpbnB1dFxyXG5cdFx0XHRcdFx0XHRcdFx0cmVmPXsgbiA9PiB7IG5vZGUuc2VhcmNoSW5wdXQgPSBuIH19XHJcblx0XHRcdFx0XHRcdFx0XHR0eXBlPVwidGV4dFwiXHJcblx0XHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj17IHByb3BzLnNlYXJjaC5wbGFjZWhvbGRlciB9XHJcblx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17IGV2ZW50ID0+IHVwZGF0ZU9wdGlvbnMoZXZlbnQudGFyZ2V0LnZhbHVlKX1cclxuXHRcdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZHJvcGRvd24tc2VhcmNoLXNoYWRvd1wiIC8+XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWRyb3Bkb3duLWxpc3RcIj5cclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0b3B0aW9uc1xyXG5cdFx0XHRcdFx0XHQubWFwKG9wdGlvbiA9PiAoXHJcblx0XHRcdFx0XHRcdFx0PGxhYmVsIGNsYXNzTmFtZT17Y3goeyAnaXMtc2VsZWN0ZWQnOiBvcHRpb24udmFsdWUgPT0gdmFsdWUgfSl9PlxyXG5cdFx0XHRcdFx0XHRcdFx0PGlucHV0XHJcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU9XCJyYWRpb1wiXHJcblx0XHRcdFx0XHRcdFx0XHRcdG5hbWU9eyBwcm9wcy5uYW1lIHx8ICd1bmRlZmluZWQnIH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU9eyBvcHRpb24udmFsdWUgfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0Q2hlY2tlZD17IG9wdGlvbi52YWx1ZSA9PSBwcm9wcy5kZWZhdWx0VmFsdWUgfVxyXG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17IG9uSW5wdXRDaGFuZ2UgfVxyXG5cdFx0XHRcdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdFx0XHRcdHsgb3B0aW9uLmxhYmVsIH1cclxuXHRcdFx0XHRcdFx0XHQ8L2xhYmVsPlxyXG5cdFx0XHRcdFx0XHQpKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvZGl2PlxyXG5cdClcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IElucHV0UmFuZ2UiLCJpbXBvcnQgeyBoLCBGcmFnbWVudCB9IGZyb20gJ3ByZWFjdCdcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyB1c2VFZmZlY3RPbmNlIH0gZnJvbSAncmVhY3QtdXNlJ1xyXG5cclxuaW1wb3J0IFFSQ29kZSBmcm9tICcuLy4uLy4uLy4uL2NvbnRhaW5lcnMvUVJDb2RlJ1xyXG5pbXBvcnQgSW5wdXRDaGVja2JveCBmcm9tICcuLy4uLy4uLy4uL2NvbXBvbmVudHMvSW5wdXRDaGVja2JveCdcclxuaW1wb3J0IElucHV0RHJvcGRvd24gZnJvbSAnLi8uLi8uLi8uLi9jb21wb25lbnRzL0lucHV0RHJvcGRvd24nXHJcbmltcG9ydCB1c2VXaXNlUmVmIGZyb20gJy4vLi4vLi4vLi4vbGliL3VzZVdpc2VSZWYnXHJcbmltcG9ydCB1c2VXaXNlU3RhdGUgZnJvbSAnLi8uLi8uLi8uLi9saWIvdXNlV2lzZVN0YXRlJ1xyXG5cclxuXHJcbmNvbnN0IFdpZmkgPSBwcm9wcyA9PiB7XHJcblxyXG5cdGNvbnN0IFsgcXJjb2RlIF0gPSBRUkNvZGUudXNlQ29udGFpbmVyKClcclxuXHRjb25zdCBub2RlID0gdXNlV2lzZVJlZigpXHJcblx0Y29uc3QgdmFsdWUgPSB1c2VXaXNlU3RhdGUoe1xyXG5cdFx0c3NpZDogICAgICAgcHJvcHMuZGVmYXVsdEZvcm1EYXRhPy5zc2lkIHx8ICcnLFxyXG5cdFx0cGFzc3dvcmQ6ICAgcHJvcHMuZGVmYXVsdEZvcm1EYXRhPy5wYXNzd29yZCB8fCAnJyxcclxuXHRcdGVuY3J5cHRpb246IHByb3BzLmRlZmF1bHRGb3JtRGF0YT8uZW5jcnlwdGlvbiB8fCAnV1BBJyxcclxuXHRcdGhpZGU6ICAgICAgIHByb3BzLmRlZmF1bHRGb3JtRGF0YT8uaGlkZSB8fCAnJyxcclxuXHR9KVxyXG5cclxuXHRjb25zdCBpc1ZhbGlkID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG5cdFx0cmV0dXJuIHZhbHVlLnNzaWQgIT0gJydcclxuXHR9LCBbXSlcclxuXHJcblx0dXNlRWZmZWN0KCgpID0+IHtcclxuXHRcdHByb3BzLnNhdmVGb3JtRGF0YSh7IC4uLnZhbHVlIH0pXHJcblx0XHRxcmNvZGUuaXNWYWxpZCA9IGlzVmFsaWQoKVxyXG5cdFx0cXJjb2RlLmNvbnRlbnQgPSBgV0lGSTpTOiR7dmFsdWUuc3NpZH07UDoke3ZhbHVlLnBhc3N3b3JkfTtUOiR7dmFsdWUuZW5jcnlwdGlvbn07SDoke3ZhbHVlLmhpZGV9O2BcclxuXHR9LCBbIHZhbHVlLnNzaWQsIHZhbHVlLnBhc3N3b3JkLCB2YWx1ZS5lbmNyeXB0aW9uLCB2YWx1ZS5oaWRlIF0pXHJcblxyXG5cdHVzZUVmZmVjdE9uY2UoKCkgPT4ge1xyXG5cdFx0bm9kZS5zc2lkLmZvY3VzKClcclxuXHR9KVxyXG5cclxuXHRyZXR1cm4gdXNlTWVtbygoKSA9PiAoXHJcblx0XHQ8RnJhZ21lbnQ+XHJcblxyXG5cdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0V2lmaSBOYW1lIChTU0lEKVxyXG5cdFx0XHRcdDxiPio8L2I+XHJcblx0XHRcdDwvbGFiZWw+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC04XCIgLz5cclxuXHRcdFx0PGlucHV0XHJcblx0XHRcdFx0cmVmPXsgbm9kZS5zc2lkX19zZXQgfVxyXG5cdFx0XHRcdHR5cGU9XCJ0ZXh0XCJcclxuXHRcdFx0XHRwbGFjZWhvbGRlcj1cIlNTSURcIlxyXG5cdFx0XHRcdGRlZmF1bHRWYWx1ZT17IHZhbHVlLnNzaWQgfVxyXG5cdFx0XHRcdG9uQ2hhbmdlPXsgZXZlbnQgPT4geyB2YWx1ZS5zc2lkID0gZXZlbnQudGFyZ2V0Py52YWx1ZSB8fCAnJyB9fVxyXG5cdFx0XHQvPlxyXG5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJoLTE2XCIgLz5cclxuXHJcblx0XHRcdDxsYWJlbD5QYXNzd29yZDwvbGFiZWw+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC04XCIgLz5cclxuXHRcdFx0PGlucHV0XHJcblx0XHRcdFx0dHlwZT1cInRleHRcIlxyXG5cdFx0XHRcdHBsYWNlaG9sZGVyPVwiUGFzc3dvcmRcIlxyXG5cdFx0XHRcdGRlZmF1bHRWYWx1ZT17IHZhbHVlLnBhc3N3b3JkIH1cclxuXHRcdFx0XHRvbkNoYW5nZT17IGV2ZW50ID0+IHsgdmFsdWUucGFzc3dvcmQgPSBldmVudC50YXJnZXQ/LnZhbHVlIHx8ICcnIH19XHJcblx0XHRcdC8+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtMTZcIiAvPlxyXG5cclxuXHRcdFx0PGxhYmVsPkVuY3J5cHRpb248L2xhYmVsPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtOFwiIC8+XHJcblx0XHRcdDxJbnB1dERyb3Bkb3duXHJcblx0XHRcdFx0bmFtZT1cImVuY3J5cHRpb25cIlxyXG5cdFx0XHRcdG9wdGlvbnM9e1tcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0bGFiZWw6ICdObyBlbmNyeXB0aW9uJyxcclxuXHRcdFx0XHRcdFx0dmFsdWU6ICdub3Bhc3MnXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRsYWJlbDogJ1dQQS9XUEEyJyxcclxuXHRcdFx0XHRcdFx0dmFsdWU6ICdXUEEnXHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRsYWJlbDogJ1dFUCcsXHJcblx0XHRcdFx0XHRcdHZhbHVlOiAnV0VQJ1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdF19XHJcblx0XHRcdFx0ZGVmYXVsdFZhbHVlPXsgdmFsdWUuZW5jcnlwdGlvbiB9XHJcblx0XHRcdFx0b25DaGFuZ2U9eyB2YWx1ZS5lbmNyeXB0aW9uX19zZXQgfVxyXG5cdFx0XHQvPlxyXG5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJoLTE2XCIgLz5cclxuXHJcblx0XHRcdDxJbnB1dENoZWNrYm94XHJcblx0XHRcdFx0dHJ1ZVZhbHVlPVwidHJ1ZVwiXHJcblx0XHRcdFx0ZmFsc2VWYWx1ZT1cIlwiXHJcblx0XHRcdFx0ZGVmYXVsdFZhbHVlPXsgdmFsdWUuaGlkZSB9XHJcblx0XHRcdFx0b25DaGFuZ2U9eyB2YWx1ZS5oaWRlX19zZXQgfVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0SXMgaGlkZGVuIG5ldHdvcmtcclxuXHRcdFx0PC9JbnB1dENoZWNrYm94PlxyXG5cclxuXHRcdDwvRnJhZ21lbnQ+XHJcblx0KSwgW10pXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBXaWZpIiwiLyohIGpzLWNvb2tpZSB2My4wLjEgfCBNSVQgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciAqL1xuZnVuY3Rpb24gYXNzaWduICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXRcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tdmFyICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciAqL1xudmFyIGRlZmF1bHRDb252ZXJ0ZXIgPSB7XG4gIHJlYWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVswXSA9PT0gJ1wiJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxLCAtMSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8oJVtcXGRBLUZdezJ9KSsvZ2ksIGRlY29kZVVSSUNvbXBvbmVudClcbiAgfSxcbiAgd3JpdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLnJlcGxhY2UoXG4gICAgICAvJSgyWzM0NkJGXXwzW0FDLUZdfDQwfDVbQkRFXXw2MHw3W0JDRF0pL2csXG4gICAgICBkZWNvZGVVUklDb21wb25lbnRcbiAgICApXG4gIH1cbn07XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXZhciAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIgKi9cblxuZnVuY3Rpb24gaW5pdCAoY29udmVydGVyLCBkZWZhdWx0QXR0cmlidXRlcykge1xuICBmdW5jdGlvbiBzZXQgKGtleSwgdmFsdWUsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgYXR0cmlidXRlcyA9IGFzc2lnbih7fSwgZGVmYXVsdEF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMpO1xuXG4gICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLmV4cGlyZXMgPT09ICdudW1iZXInKSB7XG4gICAgICBhdHRyaWJ1dGVzLmV4cGlyZXMgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgYXR0cmlidXRlcy5leHBpcmVzICogODY0ZTUpO1xuICAgIH1cbiAgICBpZiAoYXR0cmlidXRlcy5leHBpcmVzKSB7XG4gICAgICBhdHRyaWJ1dGVzLmV4cGlyZXMgPSBhdHRyaWJ1dGVzLmV4cGlyZXMudG9VVENTdHJpbmcoKTtcbiAgICB9XG5cbiAgICBrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KVxuICAgICAgLnJlcGxhY2UoLyUoMlszNDZCXXw1RXw2MHw3QykvZywgZGVjb2RlVVJJQ29tcG9uZW50KVxuICAgICAgLnJlcGxhY2UoL1soKV0vZywgZXNjYXBlKTtcblxuICAgIHZhciBzdHJpbmdpZmllZEF0dHJpYnV0ZXMgPSAnJztcbiAgICBmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzdHJpbmdpZmllZEF0dHJpYnV0ZXMgKz0gJzsgJyArIGF0dHJpYnV0ZU5hbWU7XG5cbiAgICAgIGlmIChhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIENvbnNpZGVycyBSRkMgNjI2NSBzZWN0aW9uIDUuMjpcbiAgICAgIC8vIC4uLlxuICAgICAgLy8gMy4gIElmIHRoZSByZW1haW5pbmcgdW5wYXJzZWQtYXR0cmlidXRlcyBjb250YWlucyBhICV4M0IgKFwiO1wiKVxuICAgICAgLy8gICAgIGNoYXJhY3RlcjpcbiAgICAgIC8vIENvbnN1bWUgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIHVucGFyc2VkLWF0dHJpYnV0ZXMgdXAgdG8sXG4gICAgICAvLyBub3QgaW5jbHVkaW5nLCB0aGUgZmlyc3QgJXgzQiAoXCI7XCIpIGNoYXJhY3Rlci5cbiAgICAgIC8vIC4uLlxuICAgICAgc3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc9JyArIGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0uc3BsaXQoJzsnKVswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGRvY3VtZW50LmNvb2tpZSA9XG4gICAgICBrZXkgKyAnPScgKyBjb252ZXJ0ZXIud3JpdGUodmFsdWUsIGtleSkgKyBzdHJpbmdpZmllZEF0dHJpYnV0ZXMpXG4gIH1cblxuICBmdW5jdGlvbiBnZXQgKGtleSkge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8IChhcmd1bWVudHMubGVuZ3RoICYmICFrZXkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBUbyBwcmV2ZW50IHRoZSBmb3IgbG9vcCBpbiB0aGUgZmlyc3QgcGxhY2UgYXNzaWduIGFuIGVtcHR5IGFycmF5XG4gICAgLy8gaW4gY2FzZSB0aGVyZSBhcmUgbm8gY29va2llcyBhdCBhbGwuXG4gICAgdmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUgPyBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykgOiBbXTtcbiAgICB2YXIgamFyID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFydHMgPSBjb29raWVzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5zbGljZSgxKS5qb2luKCc9Jyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmb3VuZEtleSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0c1swXSk7XG4gICAgICAgIGphcltmb3VuZEtleV0gPSBjb252ZXJ0ZXIucmVhZCh2YWx1ZSwgZm91bmRLZXkpO1xuXG4gICAgICAgIGlmIChrZXkgPT09IGZvdW5kS2V5KSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICByZXR1cm4ga2V5ID8gamFyW2tleV0gOiBqYXJcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuY3JlYXRlKFxuICAgIHtcbiAgICAgIHNldDogc2V0LFxuICAgICAgZ2V0OiBnZXQsXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIChrZXksIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgc2V0KFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICAnJyxcbiAgICAgICAgICBhc3NpZ24oe30sIGF0dHJpYnV0ZXMsIHtcbiAgICAgICAgICAgIGV4cGlyZXM6IC0xXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICB3aXRoQXR0cmlidXRlczogZnVuY3Rpb24gKGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmV0dXJuIGluaXQodGhpcy5jb252ZXJ0ZXIsIGFzc2lnbih7fSwgdGhpcy5hdHRyaWJ1dGVzLCBhdHRyaWJ1dGVzKSlcbiAgICAgIH0sXG4gICAgICB3aXRoQ29udmVydGVyOiBmdW5jdGlvbiAoY29udmVydGVyKSB7XG4gICAgICAgIHJldHVybiBpbml0KGFzc2lnbih7fSwgdGhpcy5jb252ZXJ0ZXIsIGNvbnZlcnRlciksIHRoaXMuYXR0cmlidXRlcylcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUoZGVmYXVsdEF0dHJpYnV0ZXMpIH0sXG4gICAgICBjb252ZXJ0ZXI6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUoY29udmVydGVyKSB9XG4gICAgfVxuICApXG59XG5cbnZhciBhcGkgPSBpbml0KGRlZmF1bHRDb252ZXJ0ZXIsIHsgcGF0aDogJy8nIH0pO1xuLyogZXNsaW50LWVuYWJsZSBuby12YXIgKi9cblxuZXhwb3J0IGRlZmF1bHQgYXBpO1xuIiwiaW1wb3J0IHsgaCwgRnJhZ21lbnQgfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgdXNlRWZmZWN0T25jZSB9IGZyb20gJ3JlYWN0LXVzZSdcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5cclxuaW1wb3J0IFFSQ29kZSBmcm9tICcuLy4uLy4uLy4uL2NvbnRhaW5lcnMvUVJDb2RlJ1xyXG5cclxuaW1wb3J0IElucHV0RHJvcGRvd24gZnJvbSAnLi8uLi8uLi8uLi9jb21wb25lbnRzL0lucHV0RHJvcGRvd24nXHJcbmltcG9ydCB1c2VXaXNlUmVmIGZyb20gJy4vLi4vLi4vLi4vbGliL3VzZVdpc2VSZWYnXHJcbmltcG9ydCB1c2VXaXNlU3RhdGUgZnJvbSAnLi8uLi8uLi8uLi9saWIvdXNlV2lzZVN0YXRlJ1xyXG5cclxuaW1wb3J0IGRpYWxDb3VudHJ5Q29kZSBmcm9tICcuLy4uLy4uLy4uL2RhdGEvZGlhbC1jb3VudHJ5LWNvZGUuanNvbidcclxuaW1wb3J0IENvb2tpZSBmcm9tICdqcy1jb29raWUnXHJcblxyXG5pbXBvcnQgJy4vc3R5bGUubGVzcydcclxuXHJcblxyXG5jb25zdCBQaG9uZSA9IHByb3BzID0+IHtcclxuXHJcblx0Y29uc3QgWyBxcmNvZGUgXSA9IFFSQ29kZS51c2VDb250YWluZXIoKVxyXG5cdGNvbnN0IG5vZGUgPSB1c2VXaXNlUmVmKClcclxuXHRjb25zdCB2YWx1ZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRkaWFsQ29kZTogcHJvcHMuZGVmYXVsdEZvcm1EYXRhPy5kaWFsQ29kZSB8fCAnMCcsXHJcblx0XHRudW1iZXI6ICAgcHJvcHMuZGVmYXVsdEZvcm1EYXRhPy5udW1iZXIgfHwgJydcclxuXHR9KVxyXG5cclxuXHRjb25zdCBpc1ZhbGlkID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG5cdFx0cmV0dXJuIHZhbHVlLm51bWJlciAhPSAnJ1xyXG5cdH0sIFtdKVxyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cdFx0cHJvcHMuc2F2ZUZvcm1EYXRhKHsgLi4udmFsdWUgfSlcclxuXHRcdHFyY29kZS5pc1ZhbGlkID0gaXNWYWxpZCgpXHJcblx0XHRxcmNvZGUuY29udGVudCA9IGB0ZWw6JHt2YWx1ZS5kaWFsQ29kZX0ke3ZhbHVlLm51bWJlci5yZXBsYWNlKC9eMC9nLCAnJyl9YFxyXG5cdH0sIFsgdmFsdWUuZGlhbENvZGUsIHZhbHVlLm51bWJlciBdKVxyXG5cclxuXHR1c2VFZmZlY3RPbmNlKCgpID0+IHtcclxuXHJcblx0XHRpZih2YWx1ZS5kaWFsQ29kZSAhPSAnMCcpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHRsZXQgX19kaWFsQ29kZSA9IENvb2tpZS5nZXQoJ2RpYWxfY29kZScpXHJcblx0XHRpZihfX2RpYWxDb2RlKSB7XHJcblx0XHRcdHZhbHVlLmRpYWxDb2RlID0gX19kaWFsQ29kZTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBfX2NvdW50cnlDb2RlID0gQ29va2llLmdldCgnY291bnRyeV9jb2RlJylcclxuXHRcdGlmKF9fY291bnRyeUNvZGUpIHtcclxuXHRcdFx0bGV0IGNvdW50cnkgPSBkaWFsQ291bnRyeUNvZGUuZmluZChjID0+IGMuY29kZS50b1VwcGVyQ2FzZSgpID09IGRhdGEuY291bnRyeUNvZGUudG9VcHBlckNhc2UoKSlcclxuXHJcblx0XHRcdGlmKCFjb3VudHJ5Py5kaWFsX2NvZGUpXHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0Q29va2llLnNldCgnZGlhbF9jb2RlJywgY291bnRyeS5kaWFsX2NvZGUpXHJcblx0XHRcdHZhbHVlLmRpYWxDb2RlID0gY291bnRyeS5kaWFsX2NvZGVcclxuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRmZXRjaCgnaHR0cDovL2lwLWFwaS5jb20vanNvbicpXHJcblx0XHQudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcblx0XHQudGhlbihkYXRhID0+IHtcclxuXHJcblx0XHRcdGlmKCFkYXRhPy5jb3VudHJ5Q29kZSlcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRsZXQgY291bnRyeSA9IGRpYWxDb3VudHJ5Q29kZS5maW5kKGMgPT4gYy5jb2RlLnRvVXBwZXJDYXNlKCkgPT0gZGF0YS5jb3VudHJ5Q29kZS50b1VwcGVyQ2FzZSgpKVxyXG5cclxuXHRcdFx0aWYoIWNvdW50cnk/LmRpYWxfY29kZSlcclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRpZihjb3VudHJ5Py5jb2RlKVxyXG5cdFx0XHRcdENvb2tpZS5zZXQoJ2NvdW50cnlfY29kZScsIGNvdW50cnkuY29kZSlcclxuXHJcblx0XHRcdENvb2tpZS5zZXQoJ2RpYWxfY29kZScsIGNvdW50cnkuZGlhbF9jb2RlKVxyXG5cdFx0XHR2YWx1ZS5kaWFsQ29kZSA9IGNvdW50cnkuZGlhbF9jb2RlXHJcblxyXG5cdFx0fSlcclxuXHJcblx0fSlcclxuXHJcblx0dXNlRWZmZWN0T25jZSgoKSA9PiB7XHJcblx0XHRub2RlLm51bWJlci5mb2N1cygpXHJcblx0fSlcclxuXHJcblx0cmV0dXJuIHVzZU1lbW8oKCkgPT4gKFxyXG5cdFx0PGRpdiBjbGFzc05hbWU9XCJmb3JtLXBob25lbnVtYmVyXCI+XHJcblxyXG5cdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0UGhvbmUgTnVtYmVyXHJcblx0XHRcdFx0PGI+KjwvYj5cclxuXHRcdFx0PC9sYWJlbD5cclxuXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC04XCIgLz5cclxuXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3NgZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBjZW50ZXI7YH0+XHJcblx0XHRcdFx0PGlucHV0XHJcblx0XHRcdFx0XHR0eXBlPVwidGV4dFwiXHJcblx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIiswMFwiXHJcblx0XHRcdFx0XHRjbGFzc05hbWU9XCJkaWFsLWNvZGVcIlxyXG5cdFx0XHRcdFx0dmFsdWU9eyB2YWx1ZS5kaWFsQ29kZSB9XHJcblx0XHRcdFx0XHRyZWY9eyBuID0+IHsgbm9kZS5kaWFsQ29kZSA9IG4gfX1cclxuXHRcdFx0XHRcdHJlYWRPbmx5XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0XHQ8aW5wdXRcclxuXHRcdFx0XHRcdHJlZj17IG5vZGUubnVtYmVyX19zZXQgfVxyXG5cdFx0XHRcdFx0dHlwZT1cInRleHRcIlxyXG5cdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJQaG9uZSBOdW1iZXJcIlxyXG5cdFx0XHRcdFx0Y2xhc3NOYW1lPVwicGhvbmVudW1iZXJcIlxyXG5cdFx0XHRcdFx0ZGVmYXVsdFZhbHVlPXsgdmFsdWUubnVtYmVyIH1cclxuXHRcdFx0XHRcdG9uQ2hhbmdlPXsgZXZlbnQgPT4geyB2YWx1ZS5udW1iZXIgPSBldmVudC50YXJnZXQudmFsdWUgfX1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkaWFsLWNvZGUtZHJvcGRvd25cIj5cclxuXHRcdFx0XHQ8SW5wdXREcm9wZG93blxyXG5cdFx0XHRcdFx0bmFtZT1cImRpYWxfY29kZVwiXHJcblx0XHRcdFx0XHR2YWx1ZT17IHZhbHVlLmRpYWxDb2RlIH1cclxuXHRcdFx0XHRcdG9wdGlvbnM9e1xyXG5cdFx0XHRcdFx0XHRkaWFsQ291bnRyeUNvZGUubWFwKGMgPT4gKHtcclxuXHRcdFx0XHRcdFx0XHRsYWJlbDogKFxyXG5cdFx0XHRcdFx0XHRcdFx0PEZyYWdtZW50PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImZsYWdcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ8aW1nIHNyYz17YGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9saXBpcy9mbGFnLWljb25zL21haW4vZmxhZ3MvNHgzLyR7Yy5jb2RlLnRvTG93ZXJDYXNlKCl9LnN2Z2B9IC8+XHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8c3Bhbj57IGMubmFtZSB9PC9zcGFuPlxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8aT4oeyBjLmRpYWxfY29kZSB9KTwvaT5cclxuXHRcdFx0XHRcdFx0XHRcdDwvRnJhZ21lbnQ+XHJcblx0XHRcdFx0XHRcdFx0KSxcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZTogYy5kaWFsX2NvZGUsXHJcblx0XHRcdFx0XHRcdFx0a2V5d29yZHM6IFsgYy5uYW1lLCBjLmNvZGUsIGMuZGlhbF9jb2RlIF1cclxuXHRcdFx0XHRcdFx0fSkpIFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0b25DaGFuZ2U9eyB2YWx1ZS5kaWFsQ29kZV9fc2V0IH1cclxuXHRcdFx0XHRcdHRvZ2dsZU5vZGU9eyBub2RlLmRpYWxDb2RlIH1cclxuXHRcdFx0XHRcdHNlYXJjaD17e1xyXG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlcjogJ1NlYXJjaCBjb3VudHJ5Li4nXHJcblx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdC8+XHJcblx0XHRcdDwvZGl2PlxyXG5cclxuXHRcdDwvZGl2PlxyXG5cdCksIFsgdmFsdWUuZGlhbENvZGUgXSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBob25lIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZVRpbWVvdXRGbiBmcm9tICcuL3VzZVRpbWVvdXRGbic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VEZWJvdW5jZShmbiwgbXMsIGRlcHMpIHtcbiAgICBpZiAobXMgPT09IHZvaWQgMCkgeyBtcyA9IDA7IH1cbiAgICBpZiAoZGVwcyA9PT0gdm9pZCAwKSB7IGRlcHMgPSBbXTsgfVxuICAgIHZhciBfYSA9IHVzZVRpbWVvdXRGbihmbiwgbXMpLCBpc1JlYWR5ID0gX2FbMF0sIGNhbmNlbCA9IF9hWzFdLCByZXNldCA9IF9hWzJdO1xuICAgIHVzZUVmZmVjdChyZXNldCwgZGVwcyk7XG4gICAgcmV0dXJuIFtpc1JlYWR5LCBjYW5jZWxdO1xufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGltZW91dEZuKGZuLCBtcykge1xuICAgIGlmIChtcyA9PT0gdm9pZCAwKSB7IG1zID0gMDsgfVxuICAgIHZhciByZWFkeSA9IHVzZVJlZihmYWxzZSk7XG4gICAgdmFyIHRpbWVvdXQgPSB1c2VSZWYoKTtcbiAgICB2YXIgY2FsbGJhY2sgPSB1c2VSZWYoZm4pO1xuICAgIHZhciBpc1JlYWR5ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVhZHkuY3VycmVudDsgfSwgW10pO1xuICAgIHZhciBzZXQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlYWR5LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgdGltZW91dC5jdXJyZW50ICYmIGNsZWFyVGltZW91dCh0aW1lb3V0LmN1cnJlbnQpO1xuICAgICAgICB0aW1lb3V0LmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlYWR5LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgY2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgICB9LCBtcyk7XG4gICAgfSwgW21zXSk7XG4gICAgdmFyIGNsZWFyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICByZWFkeS5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgdGltZW91dC5jdXJyZW50ICYmIGNsZWFyVGltZW91dCh0aW1lb3V0LmN1cnJlbnQpO1xuICAgIH0sIFtdKTtcbiAgICAvLyB1cGRhdGUgcmVmIHdoZW4gZnVuY3Rpb24gY2hhbmdlc1xuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrLmN1cnJlbnQgPSBmbjtcbiAgICB9LCBbZm5dKTtcbiAgICAvLyBzZXQgb24gbW91bnQsIGNsZWFyIG9uIHVubW91bnRcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXQoKTtcbiAgICAgICAgcmV0dXJuIGNsZWFyO1xuICAgIH0sIFttc10pO1xuICAgIHJldHVybiBbaXNSZWFkeSwgY2xlYXIsIHNldF07XG59XG4iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5cclxuaW1wb3J0IHsgY3NzLCBjeCB9IGZyb20gJ0BlbW90aW9uL2NzcydcclxuXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByb3BzID0+IHtcclxuXHJcblx0bGV0IHJhdGlvID0gcHJvcHMucmF0aW87XHJcblxyXG5cdGlmKHJhdGlvID09PSAnc3F1YXJlJylcclxuXHRcdHJhdGlvID0gJzE6MSc7XHJcblx0ZWxzZSBpZihyYXRpbyA9PT0gJ3dpZGUnIHx8IHJhdGlvID09PSB1bmRlZmluZWQpXHJcblx0XHRyYXRpbyA9ICcxNjo5JztcclxuXHRlbHNlIGlmKHJhdGlvID09PSAnaGFsZicpXHJcblx0XHRyYXRpbyA9ICcyOjEnO1xyXG5cclxuXHRjb25zdCByYXRpb3MgPSByYXRpby5zcGxpdCgnOicpXHJcblx0Y29uc3QgcmF0aW9QZXJjZW50YWdlID0gcmF0aW9zWzFdIC8gcmF0aW9zWzBdICogMTAwO1xyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGRpdlxyXG5cdFx0XHRrZXk9XCJhc3BlY3QtcmF0aW9cIlxyXG5cdFx0XHRjbGFzc05hbWU9e2N4KCdhc3BlY3QtcmF0aW8nLCBwcm9wcy5yYXRpbyA/IGNzc2BwYWRkaW5nLXRvcDogJHtyYXRpb1BlcmNlbnRhZ2V9JTtgIDogJycpfVxyXG5cdFx0PlxyXG5cdFx0XHQ8ZGl2XHJcblx0XHRcdFx0a2V5PVwiYXNwZWN0LXJhdGlvLXdyYXBwZXJcIlxyXG5cdFx0XHRcdGNsYXNzTmFtZT1cImFzcGVjdC1yYXRpby13cmFwcGVyXCJcclxuXHRcdFx0PlxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHByb3BzLmNoaWxkcmVuXHJcblx0XHRcdFx0XHRcdD8gcHJvcHMuY2hpbGRyZW5cclxuXHRcdFx0XHRcdFx0OiBudWxsXHJcblx0XHRcdFx0fVxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvZGl2PlxyXG5cdClcclxufSIsImltcG9ydCB7IGggfSBmcm9tICdwcmVhY3QnXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgdXNlRWZmZWN0T25jZSwgdXNlRGVib3VuY2UgfSBmcm9tICdyZWFjdC11c2UnXHJcblxyXG5pbXBvcnQgUVJDb2RlIGZyb20gJy4vLi4vLi4vLi4vY29udGFpbmVycy9RUkNvZGUnXHJcblxyXG5pbXBvcnQgQXNwZWN0UmF0aW8gZnJvbSAnLi8uLi8uLi8uLi9jb21wb25lbnRzL0FzcGVjdFJhdGlvJ1xyXG5pbXBvcnQgdXNlV2lzZVJlZiBmcm9tICcuLy4uLy4uLy4uL2xpYi91c2VXaXNlUmVmJ1xyXG5pbXBvcnQgdXNlV2lzZVN0YXRlIGZyb20gJy4vLi4vLi4vLi4vbGliL3VzZVdpc2VTdGF0ZSdcclxuXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5cclxuXHJcbmNvbnN0IExvY2F0aW9uID0gcHJvcHMgPT4ge1xyXG5cclxuXHRjb25zdCBbIHFyY29kZSBdID0gUVJDb2RlLnVzZUNvbnRhaW5lcigpXHJcblx0Y29uc3Qgbm9kZSA9IHVzZVdpc2VSZWYoKVxyXG5cdGNvbnN0IHZhbHVlID0gdXNlV2lzZVN0YXRlKHtcclxuXHRcdHF1ZXJ5OiBwcm9wcy5kZWZhdWx0Rm9ybURhdGE/LnF1ZXJ5IHx8ICcnXHJcblx0fSlcclxuXHRjb25zdCBzdGF0ZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRwcmV2aWV3X3VybDogJ2Fib3V0OmJsYW5rJ1xyXG5cdH0pXHJcblxyXG5cdGNvbnN0IGlzVmFsaWQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcblx0XHRyZXR1cm4gdmFsdWUubnVtYmVyICE9ICcnXHJcblx0fSwgW10pXHJcblxyXG5cdHVzZUVmZmVjdCgoKSA9PiB7XHJcblx0XHRwcm9wcy5zYXZlRm9ybURhdGEoeyAuLi52YWx1ZSB9KVxyXG5cdFx0cXJjb2RlLmlzVmFsaWQgPSBpc1ZhbGlkKClcclxuXHRcdHFyY29kZS5jb250ZW50ID0gYGh0dHBzOi8vbWFwcy5nb29nbGUuY29tLz9xPSR7IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZS5xdWVyeSkucmVwbGFjZSgvJTIwL2csICcrJykgfHwgJycgfWBcclxuXHR9LCBbIHZhbHVlLnF1ZXJ5IF0pXHJcblxyXG5cdGNvbnN0IFssIGNhbmNlbCBdID0gdXNlRGVib3VuY2UoXHJcblx0XHQoKSA9PiB7XHJcblx0XHRcdHN0YXRlLnByZXZpZXdfdXJsID0gYCR7IHFyY29kZS5jb250ZW50IH0mb3V0cHV0PWVtYmVkYFxyXG5cdFx0fSxcclxuXHRcdDEwMDAsXHJcblx0XHRbIHFyY29kZS5jb250ZW50IF1cclxuXHQpXHJcblx0XHJcblx0dXNlRWZmZWN0T25jZSgoKSA9PiB7XHJcblx0XHRub2RlLnBsYWNlLmZvY3VzKClcclxuXHR9KVxyXG5cclxuXHRyZXR1cm4gdXNlTWVtbygoKSA9PiAoXHJcblx0XHQ8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWxvY2F0aW9uXCI+XHJcblxyXG5cdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0UGxhY2UgTmFtZSZuYnNwOyZuYnNwO29yJm5ic3A7Jm5ic3A7Q29vcmRpbmF0ZVxyXG5cdFx0XHRcdDxiPio8L2I+XHJcblx0XHRcdDwvbGFiZWw+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtOFwiIC8+XHJcblxyXG5cdFx0XHQ8aW5wdXRcclxuXHRcdFx0XHRyZWY9eyBub2RlLnBsYWNlX19zZXQgfVxyXG5cdFx0XHRcdHR5cGU9XCJ0ZXh0XCJcclxuXHRcdFx0XHRwbGFjZWhvbGRlcj1cIlNoaWJ1eWEgU2NyYW1ibGUgQ3Jvc3NpbmdcIlxyXG5cdFx0XHRcdHZhbHVlPXsgdmFsdWUucXVlcnkgfVxyXG5cdFx0XHRcdG9uQ2hhbmdlPXsgZXZlbnQgPT4geyB2YWx1ZS5xdWVyeSA9IGV2ZW50LnRhcmdldC52YWx1ZSB9fVxyXG5cdFx0XHQvPlxyXG5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJoLTE2XCIgLz5cclxuXHJcblx0XHRcdDxsYWJlbD5QcmV2aWV3PC9sYWJlbD5cclxuXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC04XCIgLz5cclxuXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZ29vZ2xlLW1hcFwiPlxyXG5cdFx0XHRcdDxBc3BlY3RSYXRpbyByYXRpbz1cIjQ6M1wiPlxyXG5cdFx0XHRcdFx0PGlmcmFtZVxyXG5cdFx0XHRcdFx0XHRzcmM9e2AkeyBzdGF0ZS5wcmV2aWV3X3VybCB9Jm91dHB1dD1lbWJlZGB9XHJcblx0XHRcdFx0XHRcdGZyYW1lQm9yZGVyPVwiMFwiXHJcblx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdDwvQXNwZWN0UmF0aW8+XHJcblx0XHRcdDwvZGl2PlxyXG5cclxuXHRcdDwvZGl2PlxyXG5cdCksIFsgc3RhdGUucHJldmlld191cmwgXSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvY2F0aW9uXHJcblxyXG5cclxuXHJcbi8vIGh0dHBzOi8vbWFwcy5nb29nbGUuY29tLz9xPVNoaWJ1eWErU2NyYW1ibGUrQ3Jvc3NpbmcmbGw9MzUuNjU5Njk5MzMyNjAyNjQsMTM5LjcwMDYyOTY1NzI1NTcyXHJcbi8vIGh0dHBzOi8vbWFwcy5nb29nbGUuY29tLz9xPXRha2VhYm93bCIsImltcG9ydCB7IGgsIEZyYWdtZW50IH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IHVzZUVmZmVjdE9uY2UgfSBmcm9tICdyZWFjdC11c2UnXHJcblxyXG5pbXBvcnQgUVJDb2RlIGZyb20gJy4vLi4vLi4vLi4vY29udGFpbmVycy9RUkNvZGUnXHJcbmltcG9ydCBJbnB1dERyb3Bkb3duIGZyb20gJy4vLi4vLi4vLi4vY29tcG9uZW50cy9JbnB1dERyb3Bkb3duJ1xyXG5pbXBvcnQgdXNlV2lzZVJlZiBmcm9tICcuLy4uLy4uLy4uL2xpYi91c2VXaXNlUmVmJ1xyXG5pbXBvcnQgdXNlV2lzZVN0YXRlIGZyb20gJy4vLi4vLi4vLi4vbGliL3VzZVdpc2VTdGF0ZSdcclxuXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5cclxuXHJcbmNvbnN0IHRlbXBsYXRlID0ge1xyXG5cdGRlZmF1bHQ6ICh7IGN1cnJlbmN5LCBhZGRyZXNzLCBhbW91bnQgfSkgPT4ge1xyXG5cdFx0aWYoYW1vdW50KVxyXG5cdFx0XHRyZXR1cm4gYCR7Y3VycmVuY3l9OiR7YWRkcmVzc30/YW1vdW50PSR7YW1vdW50fWBcclxuXHRcdHJldHVybiBgJHtjdXJyZW5jeX06JHthZGRyZXNzfWBcclxuXHR9LFxyXG5cdFhSUDogKHsgYWRkcmVzcywgYW1vdW50IH0pID0+IHtcclxuXHRcdGlmKGFtb3VudClcclxuXHRcdFx0cmV0dXJuIGB4cnBsOi8vdG89JHthZGRyZXNzfSZhbW91bnQ9JHthbW91bnR9YFxyXG5cdFx0cmV0dXJuIGB4cnBsOi8vdG89JHthZGRyZXNzfWBcclxuXHR9XHJcbn1cclxuXHJcblxyXG52YXIgY3VycmVuY2llcyA9IFtcclxuXHR7XHJcblx0XHRuYW1lOiAnQml0Y29pbicsXHJcblx0XHR2YWx1ZTogJ2JpdGNvaW4nLFxyXG5cdFx0c3ltYm9sOiAnQlRDJ1xyXG5cdH0sXHJcblx0e1xyXG5cdFx0bmFtZTogJ0JpdGNvaW4gQ2FzaCcsXHJcblx0XHR2YWx1ZTogJ2JpdGNvaW5jYXNoJyxcclxuXHRcdHN5bWJvbDogJ0JUQydcclxuXHR9LFxyXG5cdHtcclxuXHRcdG5hbWU6ICdFdGhlcmV1bScsXHJcblx0XHR2YWx1ZTogJ2V0aGVyZXVtJyxcclxuXHRcdHN5bWJvbDogJ0VUSCdcclxuXHR9LFxyXG5cdHtcclxuXHRcdG5hbWU6ICdMaXRlY29pbicsXHJcblx0XHR2YWx1ZTogJ2xpdGVjb2luJyxcclxuXHRcdHN5bWJvbDogJ0xUQydcclxuXHR9LFxyXG5cdHtcclxuXHRcdG5hbWU6ICdEYXNoJyxcclxuXHRcdHZhbHVlOiAnZGFzaCcsXHJcblx0XHRzeW1ib2w6ICdEQVNIJ1xyXG5cdH0sXHJcblx0e1xyXG5cdFx0bmFtZTogJ01vbmVybycsXHJcblx0XHR2YWx1ZTogJ21vbmVybycsXHJcblx0XHRzeW1ib2w6ICdYTVInXHJcblx0fSxcclxuXHR7XHJcblx0XHRuYW1lOiAnWFJQJyxcclxuXHRcdHZhbHVlOiAneHJwbCcsXHJcblx0XHR0ZW1wbGF0ZTogdGVtcGxhdGUuWFJQLFxyXG5cdFx0c3ltYm9sOiAnWFJQJ1xyXG5cdH0sXHJcblx0LypcclxuXHR7XHJcblx0XHRuYW1lOiAnRG9nZWNvaW4nLFxyXG5cdFx0dmFsdWU6ICdkb2dlY29pbicsXHJcblx0XHRzeW1ib2w6ICdET0dFJ1xyXG5cdH0sXHJcblx0e1xyXG5cdFx0bmFtZTogJ0NhcmRhbm8nLFxyXG5cdFx0dmFsdWU6ICdjYXJkYW5vJyxcclxuXHRcdHN5bWJvbDogJ0FEQSdcclxuXHR9LFxyXG5cdHtcclxuXHRcdG5hbWU6ICdTb2xhbmEnLFxyXG5cdFx0dmFsdWU6ICdzb2xhbmEnLFxyXG5cdFx0c3ltYm9sOiAnU09MJ1xyXG5cdH0sXHJcblx0e1xyXG5cdFx0bmFtZTogJ1VTRCBDb2luJyxcclxuXHRcdHZhbHVlOiAndXNkY29pbicsXHJcblx0XHRzeW1ib2w6ICdVU0RDJ1xyXG5cdH0sXHJcblx0e1xyXG5cdFx0bmFtZTogJ0JpbmFuY2UgQ29pbicsXHJcblx0XHR2YWx1ZTogJ0JOQicsXHJcblx0XHRzeW1ib2w6ICdCTkInXHJcblx0fVxyXG5cdCovXHJcbl0uc29ydCgoYSwgYikgPT4gYS52YWx1ZSA8IGIudmFsdWUgPyAtMSA6IGEudmFsdWUgPiBiLnZhbHVlID8gMSA6IDApXHJcblxyXG5jb25zdCBjdXJyZW5jeV9vcHRpb25zID0gY3VycmVuY2llcy5tYXAoKGMpID0+ICh7XHJcblx0bGFiZWw6IChcclxuXHRcdDxGcmFnbWVudD5cclxuXHRcdFx0PGltZyBzcmM9e2BodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vY2hhaW5iaXRkZXYvbG9nb3MvbWFpbi9sb2dvcy8ke2Muc3ltYm9sLnRvVXBwZXJDYXNlKCl9L2xvZ28uc3ZnYH0gLz5cclxuXHRcdFx0eyBjLm5hbWUgfVxyXG5cdFx0PC9GcmFnbWVudD5cclxuXHQpLFxyXG5cdC4uLmNcclxufSkpXHJcblxyXG5cclxuY29uc3QgV2lmaSA9IHByb3BzID0+IHtcclxuXHJcblx0Y29uc3QgWyBxcmNvZGUgXSA9IFFSQ29kZS51c2VDb250YWluZXIoKVxyXG5cdGNvbnN0IG5vZGUgPSB1c2VXaXNlUmVmKClcclxuXHRjb25zdCB2YWx1ZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRjdXJyZW5jeTogcHJvcHMuZGVmYXVsdEZvcm1EYXRhPy5idGMgfHwgJ2JpdGNvaW4nLFxyXG5cdFx0YWRkcmVzczogIHByb3BzLmRlZmF1bHRGb3JtRGF0YT8uYWRkcmVzcyB8fCAnJyxcclxuXHRcdGFtb3VudDogICBwcm9wcy5kZWZhdWx0Rm9ybURhdGE/LmFtb3VudCB8fCAwXHJcblx0fSlcclxuXHJcblx0Y29uc3QgaXNWYWxpZCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuXHRcdHJldHVybiAhIXZhbHVlLmN1cnJlbmN5ICYmIHZhbHVlLmFkZHJlc3MubGVuZ3RoID4gMFxyXG5cdH0sIFtdKVxyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cdFx0cHJvcHMuc2F2ZUZvcm1EYXRhKHsgLi4udmFsdWUgfSlcclxuXHRcdHFyY29kZS5pc1ZhbGlkID0gaXNWYWxpZCgpXHJcblxyXG5cdFx0bGV0IGN1cnJlbmN5ID0gY3VycmVuY2llcy5maW5kKGMgPT4gYy52YWx1ZSA9PSB2YWx1ZS5jdXJyZW5jeSlcclxuXHRcdGlmKGN1cnJlbmN5LnRlbXBsYXRlKSB7XHJcblx0XHRcdHFyY29kZS5jb250ZW50ID0gY3VycmVuY3kudGVtcGxhdGUoeyAuLi52YWx1ZSB9KVxyXG5cdFx0XHRyZXR1cm5cclxuXHRcdH1cclxuXHJcblx0XHQvKlxyXG5cdFx0aWYoY3VycmVuY3kpIHtcclxuXHRcdFx0bGV0IHN5bWJvbCA9IGN1cnJlbmN5LnN5bWJvbFxyXG5cdFx0XHRpZih0ZW1wbGF0ZVtzeW1ib2xdKSB7XHJcblx0XHRcdFx0cXJjb2RlLmNvbnRlbnQgPSB0ZW1wbGF0ZVtzeW1ib2xdKHsgLi4udmFsdWUgfSlcclxuXHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ki9cclxuXHJcblx0XHRxcmNvZGUuY29udGVudCA9IHRlbXBsYXRlWydkZWZhdWx0J10oeyAuLi52YWx1ZSB9KVxyXG5cclxuXHR9LCBbIHZhbHVlLmN1cnJlbmN5LCB2YWx1ZS5hZGRyZXNzLCB2YWx1ZS5hbW91bnQgXSlcclxuXHJcblx0dXNlRWZmZWN0T25jZSgoKSA9PiB7XHJcblx0XHRub2RlLmFkZHJlc3MuZm9jdXMoKVxyXG5cdH0pXHJcblxyXG5cdHJldHVybiB1c2VNZW1vKCgpID0+IChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY3J5cHRvLWN1cnJlbmN5XCI+XHJcblxyXG5cdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0Q3VycmVuY3lcclxuXHRcdFx0XHQ8Yj4qPC9iPlxyXG5cdFx0XHQ8L2xhYmVsPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtOFwiIC8+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiY3VycmVuY3lcIj5cclxuXHRcdFx0XHQ8SW5wdXREcm9wZG93blxyXG5cdFx0XHRcdFx0bmFtZT1cImN1cnJlbmN5XCJcclxuXHRcdFx0XHRcdG9wdGlvbnM9eyBjdXJyZW5jeV9vcHRpb25zIH1cclxuXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZT17IHZhbHVlLmN1cnJlbmN5IH1cclxuXHRcdFx0XHRcdG9uQ2hhbmdlPXsgdmFsdWUuY3VycmVuY3lfX3NldCB9XHJcblx0XHRcdFx0Lz5cclxuXHRcdFx0PC9kaXY+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtMTZcIiAvPlxyXG5cclxuXHRcdFx0PGxhYmVsPlxyXG5cdFx0XHRcdEFkZHJlc3NcclxuXHRcdFx0XHQ8Yj4qPC9iPlxyXG5cdFx0XHQ8L2xhYmVsPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtOFwiIC8+XHJcblx0XHRcdDxpbnB1dFxyXG5cdFx0XHRcdHJlZj17IG5vZGUuYWRkcmVzc19fc2V0IH1cclxuXHRcdFx0XHR0eXBlPVwidGV4dFwiXHJcblx0XHRcdFx0cGxhY2Vob2xkZXI9XCJZb3VyIGFkZHJlc3MuLlwiXHJcblx0XHRcdFx0ZGVmYXVsdFZhbHVlPXsgdmFsdWUuYWRkcmVzcyB9XHJcblx0XHRcdFx0b25DaGFuZ2U9eyBldmVudCA9PiB7IHZhbHVlLmFkZHJlc3MgPSBldmVudC50YXJnZXQ/LnZhbHVlIHx8ICcnIH19XHJcblx0XHRcdC8+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtMTZcIiAvPlxyXG5cclxuXHRcdFx0PGxhYmVsPlxyXG5cdFx0XHRcdEFtb3VudFxyXG5cdFx0XHRcdDxpPiZuYnNwOyhPcHRpb25hbCk8L2k+XHJcblx0XHRcdDwvbGFiZWw+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC04XCIgLz5cclxuXHRcdFx0PGlucHV0XHJcblx0XHRcdFx0dHlwZT1cInRleHRcIlxyXG5cdFx0XHRcdHBsYWNlaG9sZGVyPVwiMTAwLjAwXCJcclxuXHRcdFx0XHRkZWZhdWx0VmFsdWU9eyB2YWx1ZS5hbW91bnQgfVxyXG5cdFx0XHRcdG9uQ2hhbmdlPXsgZXZlbnQgPT4geyB2YWx1ZS5hbW91bnQgPSBOdW1iZXIoZXZlbnQudGFyZ2V0Py52YWx1ZSB8fCAnJykgfHwgMCB9fVxyXG5cdFx0XHQvPlxyXG5cclxuXHRcdDwvZGl2PlxyXG5cdCksIFtdKVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgV2lmaSIsImltcG9ydCB7IGgsIEZyYWdtZW50IH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdwcmVhY3QvaG9va3MnXHJcbmltcG9ydCB7IGN4IH0gZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5cclxuaW1wb3J0IHVzZVdpc2VSZWYgZnJvbSAnLi8uLi8uLi9saWIvdXNlV2lzZVJlZidcclxuXHJcbmltcG9ydCBUZXh0IGZyb20gJy4vVGV4dCdcclxuaW1wb3J0IExpbmsgZnJvbSAnLi9MaW5rJ1xyXG5pbXBvcnQgV2lmaSBmcm9tICcuL1dpZmknXHJcbmltcG9ydCBQaG9uZSBmcm9tICcuL1Bob25lJ1xyXG5pbXBvcnQgTG9jYXRpb24gZnJvbSAnLi9Mb2NhdGlvbidcclxuaW1wb3J0IENyeXB0byBmcm9tICcuL0NyeXB0bydcclxuXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5cclxuXHJcbmNvbnN0IFRZUEVfVEVYVCA9IDFcclxuY29uc3QgVFlQRV9MSU5LID0gMlxyXG5jb25zdCBUWVBFX1dJRkkgPSAzXHJcbmNvbnN0IFRZUEVfUEhPTkUgPSA0XHJcbmNvbnN0IFRZUEVfTE9DQVRJT04gPSA1XHJcbmNvbnN0IFRZUEVfQ1JZUFRPID0gNlxyXG5cclxuXHJcbmNvbnN0IGRhdGFUeXBlcyA9IFtcclxuXHR7XHJcblx0XHRsYWJlbDogJ1JhdyBUZXh0JyxcclxuXHRcdHR5cGU6IFRZUEVfVEVYVCxcclxuXHRcdGZvcm06IFRleHRcclxuXHR9LFxyXG5cdHtcclxuXHRcdGxhYmVsOiAnTGluaycsXHJcblx0XHR0eXBlOiBUWVBFX0xJTkssXHJcblx0XHRmb3JtOiBMaW5rXHJcblx0fSxcclxuXHR7XHJcblx0XHRsYWJlbDogJ1dpZmknLFxyXG5cdFx0dHlwZTogVFlQRV9XSUZJLFxyXG5cdFx0Zm9ybTogV2lmaVxyXG5cdH0sXHJcblx0e1xyXG5cdFx0bGFiZWw6ICdQaG9uZScsXHJcblx0XHR0eXBlOiBUWVBFX1BIT05FLFxyXG5cdFx0Zm9ybTogUGhvbmVcclxuXHR9LFxyXG5cdHtcclxuXHRcdGxhYmVsOiAnTG9jYXRpb24nLFxyXG5cdFx0dHlwZTogVFlQRV9MT0NBVElPTixcclxuXHRcdGZvcm06IExvY2F0aW9uXHJcblx0fSxcclxuXHR7XHJcblx0XHRsYWJlbDogJ0NyeXB0byAvIEJpdGNvaW4nLFxyXG5cdFx0dHlwZTogVFlQRV9DUllQVE8sXHJcblx0XHRmb3JtOiBDcnlwdG9cclxuXHR9XHJcbl1cclxuXHJcblxyXG5jb25zdCBJbnB1dERhdGEgPSAoKSA9PiB7XHJcblxyXG5cdGNvbnN0IGZvcm1EYXRhID0gdXNlV2lzZVJlZih7fSlcclxuXHRjb25zdCBbIHR5cGUsIHNldFR5cGUgXSA9IHVzZVN0YXRlKFRZUEVfTElOSylcclxuXHRjb25zdCBGb3JtID0gZGF0YVR5cGVzLmZpbmQodCA9PiB0LnR5cGUgPT0gdHlwZSk/LmZvcm1cclxuXHJcblx0Y29uc3Qgb25TYXZlRm9ybURhdGEgPSB1c2VDYWxsYmFjaygoX19mb3JtRGF0YSkgPT4ge1xyXG5cdFx0Zm9ybURhdGFbdHlwZV0gPSBfX2Zvcm1EYXRhXHJcblx0fSwgWyBmb3JtRGF0YSwgdHlwZSBdKVxyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PEZyYWdtZW50PlxyXG5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJ0eXBlLWxpc3RcIj5cclxuXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0ZGF0YVR5cGVzLm1hcCh0ID0+IChcclxuXHRcdFx0XHRcdFx0PGFcclxuXHRcdFx0XHRcdFx0XHRjbGFzc05hbWU9e2N4KHsgJ2lzLXNlbGVjdGVkJzogdC50eXBlID09IHR5cGUgfSl9XHJcblx0XHRcdFx0XHRcdFx0b25DbGljaz17IGV2ZW50ID0+IHsgc2V0VHlwZSh0LnR5cGUpIH19XHJcblx0XHRcdFx0XHRcdD5cclxuXHRcdFx0XHRcdFx0XHR7IHQubGFiZWwgfVxyXG5cdFx0XHRcdFx0XHQ8L2E+XHJcblx0XHRcdFx0XHQpKVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdDwvZGl2PlxyXG5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJoLTE2XCIgLz5cclxuXHJcblx0XHRcdDxGb3JtXHJcblx0XHRcdFx0ZGVmYXVsdEZvcm1EYXRhPXsgZm9ybURhdGFbdHlwZV0gfVxyXG5cdFx0XHRcdHNhdmVGb3JtRGF0YT17IG9uU2F2ZUZvcm1EYXRhIH1cclxuXHRcdFx0Lz5cclxuXHJcblx0XHQ8L0ZyYWdtZW50PlxyXG5cdClcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IElucHV0RGF0YSIsImNvbnN0IGxpbWl0ID0gKHZhbHVlLCBtaW4sIG1heCkgPT4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIG1pbiksIG1heClcclxuY29uc3Qgcm91bmQgPSAodmFsdWUsIHJvdW5kID0gMSkgPT4gTWF0aC5yb3VuZCh2YWx1ZSAvIHJvdW5kKSAqIHJvdW5kXHJcbmNvbnN0IHJlbWFwID0gKHZhbHVlLCBpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4KSA9PiBvdXRNaW4gKyAodmFsdWUgLSBpbk1pbikgKiAob3V0TWF4IC0gb3V0TWluKSAvIChpbk1heCAtIGluTWluKVxyXG5cclxuXHJcbmV4cG9ydCB7XHJcblx0bGltaXQsXHJcblx0cm91bmQsXHJcblx0cmVtYXBcclxufSIsImNvbnN0IGdldEFic09mZnNldCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuXHRsZXQgdG9wID0gMCwgbGVmdCA9IDA7XHJcblx0ZG8ge1xyXG5cdFx0dG9wICs9IGVsZW1lbnQub2Zmc2V0VG9wICB8fCAwO1xyXG5cdFx0bGVmdCArPSBlbGVtZW50Lm9mZnNldExlZnQgfHwgMDtcclxuXHRcdGVsZW1lbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcclxuXHR9IHdoaWxlKGVsZW1lbnQpO1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0dG9wOiB0b3AsXHJcblx0XHRsZWZ0OiBsZWZ0XHJcblx0fTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCB7XHJcblx0Z2V0QWJzT2Zmc2V0XHJcbn0iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgdXNlRWZmZWN0T25jZSB9IGZyb20gJ3JlYWN0LXVzZSdcclxuaW1wb3J0IHsgY3gsIGNzcyB9IGZyb20gJ0BlbW90aW9uL2NzcydcclxuXHJcbmltcG9ydCB7IGxpbWl0LCByb3VuZCwgcmVtYXAgfSBmcm9tICcuLy4uLy4uL2xpYi9tYXRoJ1xyXG5pbXBvcnQgeyBnZXRBYnNPZmZzZXQgfSBmcm9tICcuLy4uLy4uL2xpYi9ub2RlJ1xyXG5pbXBvcnQgdXNlV2lzZVJlZiBmcm9tICcuLy4uLy4uL2xpYi91c2VXaXNlUmVmJ1xyXG5pbXBvcnQgdXNlV2lzZVN0YXRlIGZyb20gJy4vLi4vLi4vbGliL3VzZVdpc2VTdGF0ZSdcclxuXHJcblxyXG5pbXBvcnQgJy4vc3R5bGUubGVzcydcclxuXHJcblxyXG5cclxuY29uc3QgSW5wdXRSYW5nZSA9IHByb3BzID0+IHtcclxuXHJcblx0Y29uc3Qgbm9kZSA9IHVzZVdpc2VSZWYoe1xyXG5cdFx0c2xpZGVyOiBudWxsXHJcblx0fSlcclxuXHJcblx0Y29uc3Qgc3RhdGUgPSB1c2VXaXNlU3RhdGUoKCkgPT4ge1xyXG5cdFx0bGV0IG1pbiA9IHByb3BzLm1pbiB8fCAwXHJcblx0XHRsZXQgbWF4ID0gcHJvcHMubWF4IHx8IDEwMFxyXG5cdFx0bGV0IHN0ZXAgPSBwcm9wcy5zdGVwIHx8IDFcclxuXHRcdGxldCByYW5nZSA9IG1heCAtIG1pblxyXG5cdFx0bGV0IHZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlIHx8IHByb3BzLnZhbHVlIHx8IG1pblxyXG5cdFx0bGV0IHB2YWx1ZSA9IHJlbWFwKHZhbHVlLCBtaW4sIG1heCwgMCwgMTAwKVxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0bWluLCBtYXgsIHN0ZXAsIHJhbmdlLFxyXG5cdFx0XHRpc0ZvY3VzOiBmYWxzZSxcclxuXHRcdFx0dmFsdWUsIHB2YWx1ZVxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5cdGNvbnN0IG9uTW91c2VEb3duID0gZXZlbnQgPT4ge1xyXG5cdFx0ZXZlbnQubmF0aXZlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdGlmKCFub2RlLnNsaWRlcilcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdGxldCBzbGlkZXJYID0gZ2V0QWJzT2Zmc2V0KG5vZGUuc2xpZGVyKS5sZWZ0XHJcblx0XHRsZXQgc2xpZGVyVyA9IG5vZGUuc2xpZGVyLmNsaWVudFdpZHRoXHJcblxyXG5cdFx0bGV0IG1vdXNlWCA9IGV2ZW50LnggfHwgZXZlbnQudG91Y2hlc1swXT8ucGFnZVhcclxuXHRcdHN0YXRlLnB2YWx1ZSA9IHJlbWFwKG1vdXNlWCwgc2xpZGVyWCwgc2xpZGVyWCArIHNsaWRlclcsIDAsIDEwMClcclxuXHRcdHN0YXRlLnB2YWx1ZSA9IHJvdW5kKHN0YXRlLnB2YWx1ZSwgc3RhdGUuc3RlcCAvIHN0YXRlLnJhbmdlICogMTAwKVxyXG5cdFx0c3RhdGUucHZhbHVlID0gbGltaXQoc3RhdGUucHZhbHVlLCAwLCAxMDApXHJcblxyXG5cdFx0c3RhdGUudmFsdWUgPSByZW1hcChzdGF0ZS5wdmFsdWUsIDAsIDEwMCwgc3RhdGUubWluLCBzdGF0ZS5tYXgpXHJcblx0XHRzdGF0ZS52YWx1ZSA9IHJvdW5kKHN0YXRlLnZhbHVlLCBzdGF0ZS5zdGVwKVxyXG5cclxuXHRcdHN0YXRlLmlzRm9jdXMgPSB0cnVlO1xyXG5cclxuXHRcdGlmKHByb3BzLm9uQ2hhbmdlKVxyXG5cdFx0XHRwcm9wcy5vbkNoYW5nZShzdGF0ZS52YWx1ZSlcclxuXHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpXHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Nb3VzZU1vdmUpXHJcblx0fVxyXG5cclxuXHRjb25zdCBvbk1vdXNlVXAgPSBldmVudCA9PiB7XHJcblx0XHRzdGF0ZS5pc0ZvY3VzID0gZmFsc2U7XHJcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpXHJcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Nb3VzZU1vdmUpXHJcblx0fVxyXG5cclxuXHRjb25zdCBvbk1vdXNlTW92ZSA9IGV2ZW50ID0+IHtcclxuXHJcblx0XHRpZighbm9kZS5zbGlkZXIpXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHRpZighc3RhdGUuaXNGb2N1cylcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdGxldCBzbGlkZXJYID0gZ2V0QWJzT2Zmc2V0KG5vZGUuc2xpZGVyKS5sZWZ0XHJcblx0XHRsZXQgc2xpZGVyVyA9IG5vZGUuc2xpZGVyLmNsaWVudFdpZHRoXHJcblxyXG5cdFx0bGV0IG1vdXNlWCA9IGV2ZW50LnggfHwgZXZlbnQudG91Y2hlc1swXT8ucGFnZVhcclxuXHRcdHN0YXRlLnB2YWx1ZSA9IHJlbWFwKG1vdXNlWCwgc2xpZGVyWCwgc2xpZGVyWCArIHNsaWRlclcsIDAsIDEwMClcclxuXHRcdHN0YXRlLnB2YWx1ZSA9IHJvdW5kKHN0YXRlLnB2YWx1ZSwgc3RhdGUuc3RlcCAvIHN0YXRlLnJhbmdlICogMTAwKVxyXG5cdFx0c3RhdGUucHZhbHVlID0gbGltaXQoc3RhdGUucHZhbHVlLCAwLCAxMDApXHJcblxyXG5cdFx0c3RhdGUudmFsdWUgPSByZW1hcChzdGF0ZS5wdmFsdWUsIDAsIDEwMCwgc3RhdGUubWluLCBzdGF0ZS5tYXgpXHJcblx0XHRzdGF0ZS52YWx1ZSA9IHJvdW5kKHN0YXRlLnZhbHVlLCBzdGF0ZS5zdGVwKVxyXG5cclxuXHRcdGlmKHByb3BzLm9uQ2hhbmdlKVxyXG5cdFx0XHRwcm9wcy5vbkNoYW5nZShzdGF0ZS52YWx1ZSlcclxuXHJcblx0fVxyXG5cclxuXHR1c2VFZmZlY3RPbmNlKCgpID0+IHtcclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Nb3VzZVVwKVxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Nb3VzZVVwKVxyXG5cdFx0cmV0dXJuICgpID0+IHtcclxuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXApXHJcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uTW91c2VVcClcclxuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKVxyXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Nb3VzZU1vdmUpXHJcblx0XHR9XHJcblx0fSlcclxuXHJcblx0dXNlRWZmZWN0KCgpID0+IHtcclxuXHRcdHN0YXRlLnZhbHVlID0gcHJvcHMudmFsdWVcclxuXHRcdHN0YXRlLnB2YWx1ZSA9IHJlbWFwKHN0YXRlLnZhbHVlLCBzdGF0ZS5taW4sIHN0YXRlLm1heCwgMCwgMTAwKVxyXG5cdH0sIFsgcHJvcHMudmFsdWUgXSlcclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXZcclxuXHRcdFx0Y2xhc3NOYW1lPXtjeCgnaW5wdXQtcmFuZ2UnLCBzdGF0ZS5pc0ZvY3VzID8gJ2lzLWZvY3VzJyA6ICcnKX1cclxuXHRcdFx0b25Nb3VzZURvd249eyBvbk1vdXNlRG93biB9XHJcblx0XHRcdG9uVG91Y2hTdGFydD17IG9uTW91c2VEb3duIH1cclxuXHRcdD5cclxuXHRcdFx0PGRpdlxyXG5cdFx0XHRcdGNsYXNzTmFtZT1cImlucHV0LXJhbmdlLXNsaWRlclwiXHJcblx0XHRcdFx0c3R5bGU9e1xyXG5cdFx0XHRcdFx0cHJvcHMuc2xpZGVyQmFja2dyb3VuZCA/IHtcclxuXHRcdFx0XHRcdFx0YmFja2dyb3VuZDogcHJvcHMuc2xpZGVyQmFja2dyb3VuZFxyXG5cdFx0XHRcdFx0fSA6IHt9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0PGRpdlxyXG5cdFx0XHRcdFx0cmVmPXsgbm9kZS5zbGlkZXJfX3NldCB9XHJcblx0XHRcdFx0XHRjbGFzc05hbWU9XCJpbnB1dC1yYW5nZS1zbGlkZXItY29udGFpbmVyXCJcclxuXHRcdFx0XHQ+XHJcblx0XHRcdFx0XHQ8ZGl2XHJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cImlucHV0LXJhbmdlLWJ1dHRvblwiXHJcblx0XHRcdFx0XHRcdHN0eWxlPXt7IGxlZnQ6IGAke3N0YXRlLnB2YWx1ZX0lYCB9fVxyXG5cdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0KHByb3BzLmF4aXMgfHwgW10pLm1hcChwID0+IChcclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3goJ2lucHV0LXJhbmdlLWF4aXMnLCBjc3NgbGVmdDogJHtwKjEwMH0lO2ApfSAvPlxyXG5cdFx0XHRcdFx0XHQpKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvZGl2PlxyXG5cdClcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IElucHV0UmFuZ2UiLCJpbXBvcnQgeyBoLCBGcmFnbWVudCB9IGZyb20gJ3ByZWFjdCdcclxuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jc3MnXHJcblxyXG5pbXBvcnQgUVJDb2RlIGZyb20gJy4vLi4vLi4vY29udGFpbmVycy9RUkNvZGUnXHJcbmltcG9ydCBJbnB1dFJhbmdlIGZyb20gJy4vLi4vLi4vY29tcG9uZW50cy9JbnB1dFJhbmdlJ1xyXG5cclxuXHJcbmNvbnN0IE9wdGlvbk1hcmdpbiA9IHByb3BzID0+IHtcclxuXHJcblx0Y29uc3QgWyBxcmNvZGUgXSA9IFFSQ29kZS51c2VDb250YWluZXIoKVxyXG5cclxuXHRyZXR1cm4gdXNlTWVtbygoKSA9PiAoXHJcblx0XHQ8RnJhZ21lbnQ+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzYGRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtgfT5cclxuXHRcdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0XHRNYXJnaW5cclxuXHRcdFx0XHQ8L2xhYmVsPlxyXG5cdFx0XHRcdDxzbWFsbD5cclxuXHRcdFx0XHRcdDxvdXRwdXQ+XHJcblx0XHRcdFx0XHRcdHh7IHFyY29kZS5tYXJnaW4gfVxyXG5cdFx0XHRcdFx0PC9vdXRwdXQ+XHJcblx0XHRcdFx0PC9zbWFsbD5cclxuXHRcdFx0PC9kaXY+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtMlwiIC8+XHJcblxyXG5cdFx0XHQ8SW5wdXRSYW5nZVxyXG5cdFx0XHRcdG1pbj17IDEgfVxyXG5cdFx0XHRcdG1heD17IDQgfVxyXG5cdFx0XHRcdGRlZmF1bHRWYWx1ZT17IHFyY29kZS5tYXJnaW4gfVxyXG5cdFx0XHRcdG9uQ2hhbmdlPXsgcXJjb2RlLm1hcmdpbl9fc2V0IH1cclxuXHRcdFx0XHRheGlzPXtbIDAuMzMzMywgMC42NjY3IF19XHJcblx0XHRcdC8+XHJcblxyXG5cdFx0PC9GcmFnbWVudD5cclxuXHQpLCBbIHFyY29kZS5tYXJnaW4gXSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE9wdGlvbk1hcmdpbiIsImltcG9ydCB7IGgsIEZyYWdtZW50IH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5cclxuaW1wb3J0IFFSQ29kZSBmcm9tICcuLy4uLy4uL2NvbnRhaW5lcnMvUVJDb2RlJ1xyXG5pbXBvcnQgSW5wdXRSYW5nZSBmcm9tICcuLy4uLy4uL2NvbXBvbmVudHMvSW5wdXRSYW5nZSdcclxuaW1wb3J0IHVzZVdpc2VTdGF0ZSBmcm9tICcuLi8uLi9saWIvdXNlV2lzZVN0YXRlJ1xyXG5cclxuXHJcbmNvbnN0IE9wdGlvblNtb290aG5lc3MgPSBwcm9wcyA9PiB7XHJcblxyXG5cdGNvbnN0IFsgcXJjb2RlIF0gPSBRUkNvZGUudXNlQ29udGFpbmVyKClcclxuXHRjb25zdCBzdGF0ZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHR2YWx1ZTogMFxyXG5cdH0pXHJcblxyXG5cdHVzZUVmZmVjdCgoKSA9PiB7XHJcblx0XHRxcmNvZGUucm91bmRDb3JuZXIgPSBNYXRoLm1pbihzdGF0ZS52YWx1ZSwgMTAwKVxyXG5cdFx0cXJjb2RlLmV5ZVJvdW5kQ29ybmVyID0gTWF0aC5tYXgoMCwgc3RhdGUudmFsdWUgLSAxMDApXHJcblx0fSwgWyBzdGF0ZS52YWx1ZSBdKVxyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PEZyYWdtZW50PlxyXG5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2Nzc2BkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47YH0+XHJcblx0XHRcdFx0PGxhYmVsPlxyXG5cdFx0XHRcdFx0U21vb3RobmVzc1xyXG5cdFx0XHRcdDwvbGFiZWw+XHJcblx0XHRcdFx0PHNtYWxsPlxyXG5cdFx0XHRcdFx0PG91dHB1dD5cclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnZhbHVlID09IDAgPyAoXHJcblx0XHRcdFx0XHRcdFx0XHQnU2hhcnAnXHJcblx0XHRcdFx0XHRcdFx0KSA6IChcclxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnZhbHVlIDw9IDEwMCA/IChcclxuXHRcdFx0XHRcdFx0XHRcdFx0PEZyYWdtZW50PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgcXJjb2RlLnJvdW5kQ29ybmVyIH0lXHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvRnJhZ21lbnQ+XHJcblx0XHRcdFx0XHRcdFx0XHQpIDogKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8RnJhZ21lbnQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0UGl4ZWwgeyBxcmNvZGUucm91bmRDb3JuZXIgfSUsJm5ic3A7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0RXllcyB7IHFyY29kZS5leWVSb3VuZENvcm5lciB9JVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L0ZyYWdtZW50PlxyXG5cdFx0XHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0PC9vdXRwdXQ+XHJcblx0XHRcdFx0PC9zbWFsbD5cclxuXHRcdFx0PC9kaXY+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtMlwiIC8+XHJcblxyXG5cdFx0XHQ8SW5wdXRSYW5nZVxyXG5cdFx0XHRcdHR5cGU9XCJyYW5nZVwiXHJcblx0XHRcdFx0bWluPXsgMCB9XHJcblx0XHRcdFx0bWF4PXsgMjAwIH1cclxuXHRcdFx0XHRzdGVwPXsgNSB9XHJcblx0XHRcdFx0ZGVmYXVsdFZhbHVlPXsgMCB9XHJcblx0XHRcdFx0b25DaGFuZ2U9eyBzdGF0ZS52YWx1ZV9fc2V0IH1cclxuXHRcdFx0XHRheGlzPXtbIDAuNSBdfVxyXG5cdFx0XHQvPlxyXG5cclxuXHRcdDwvRnJhZ21lbnQ+XHJcblx0KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgT3B0aW9uU21vb3RobmVzc1xyXG5cclxuXHJcbi8qXHJcbmNsYXNzIE9wdGlvblNtb290aG5lc3MgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cdHN0YXRlID0ge1xyXG5cdFx0dmFsdWU6IDBcclxuXHR9XHJcblxyXG5cdGlucHV0SGFuZGVyID0gdmFsdWUgPT4ge1xyXG5cdFx0dGhpcy5zZXRTdGF0ZSh7IHZhbHVlIH0pXHJcblx0XHR0aGlzLnByb3BzLmZvcm0uc2V0KHtcclxuXHRcdFx0cm91bmRDb3JuZXI6IE1hdGgubWluKHZhbHVlLCAxMDApLFxyXG5cdFx0XHRleWVSb3VuZENvcm5lcjogTWF0aC5tYXgoMCwgdmFsdWUgLSAxMDApXHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0cmVuZGVyID0gKCkgPT4gKFxyXG5cdFx0PEZyYWdtZW50PlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzYGRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtgfT5cclxuXHRcdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0XHRTbW9vdGhuZXNzXHJcblx0XHRcdFx0PC9sYWJlbD5cclxuXHRcdFx0XHQ8c21hbGw+XHJcblx0XHRcdFx0XHQ8b3V0cHV0PlxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5zdGF0ZS52YWx1ZSA9PSAwID8gKFxyXG5cdFx0XHRcdFx0XHRcdFx0J1NoYXJwJ1xyXG5cdFx0XHRcdFx0XHRcdCkgOiAoXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLnN0YXRlLnZhbHVlIDw9IDEwMCA/IChcclxuXHRcdFx0XHRcdFx0XHRcdFx0PEZyYWdtZW50PlxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGhpcy5wcm9wcy5mb3JtLnN0YXRlLnJvdW5kQ29ybmVyIH0lXHJcblx0XHRcdFx0XHRcdFx0XHRcdDwvRnJhZ21lbnQ+XHJcblx0XHRcdFx0XHRcdFx0XHQpIDogKFxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8RnJhZ21lbnQ+XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0UGl4ZWwgeyB0aGlzLnByb3BzLmZvcm0uc3RhdGUucm91bmRDb3JuZXIgfSUsJm5ic3A7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0RXllcyB7IHRoaXMucHJvcHMuZm9ybS5zdGF0ZS5leWVSb3VuZENvcm5lciB9JVxyXG5cdFx0XHRcdFx0XHRcdFx0XHQ8L0ZyYWdtZW50PlxyXG5cdFx0XHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0XHRcdClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0PC9vdXRwdXQ+XHJcblx0XHRcdFx0PC9zbWFsbD5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3NgaGVpZ2h0OiA2cHg7YH0gLz5cclxuXHRcdFx0PElucHV0UmFuZ2VcclxuXHRcdFx0XHR0eXBlPVwicmFuZ2VcIlxyXG5cdFx0XHRcdG1pbj17IDAgfVxyXG5cdFx0XHRcdG1heD17IDIwMCB9XHJcblx0XHRcdFx0c3RlcD17IDUgfVxyXG5cdFx0XHRcdGRlZmF1bHRWYWx1ZT17IDAgfVxyXG5cdFx0XHRcdG9uQ2hhbmdlPXsgdGhpcy5pbnB1dEhhbmRlciB9XHJcblx0XHRcdFx0YXhpcz17WyAwLjUgXX1cclxuXHRcdFx0Lz5cclxuXHRcdDwvRnJhZ21lbnQ+XHJcblx0KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChbIEZvcm0gXSlcclxuKChbIGZvcm0gXSkgPT4gKHtcclxuXHRmb3JtXHJcbn0pKVxyXG4oT3B0aW9uU21vb3RobmVzcylcclxuKi8iLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyB1c2VFZmZlY3RPbmNlIH0gZnJvbSAncmVhY3QtdXNlJ1xyXG5pbXBvcnQgeyBjeCB9IGZyb20gJ0BlbW90aW9uL2NzcydcclxuXHJcbmltcG9ydCBJbnB1dFJhbmdlIGZyb20gJy4vLi4vLi4vY29tcG9uZW50cy9JbnB1dFJhbmdlJ1xyXG5pbXBvcnQgdXNlV2lzZVJlZiBmcm9tICcuLy4uLy4uL2xpYi91c2VXaXNlUmVmJ1xyXG5pbXBvcnQgdXNlV2lzZVN0YXRlIGZyb20gJy4vLi4vLi4vbGliL3VzZVdpc2VTdGF0ZSdcclxuaW1wb3J0IHVzZUNsaWNrSU8gZnJvbSAnLi8uLi8uLi9saWIvdXNlQ2xpY2tJTydcclxuXHJcbmltcG9ydCB7IGxpbWl0LCByb3VuZCwgcmVtYXAgfSBmcm9tICcuLy4uLy4uL2xpYi9tYXRoJ1xyXG5pbXBvcnQgeyBnZXRBYnNPZmZzZXQgfSBmcm9tICcuLy4uLy4uL2xpYi9ub2RlJ1xyXG5cclxuaW1wb3J0ICcuL3N0eWxlLmxlc3MnXHJcblxyXG5cclxubGV0IGhzbDJoc3YgPSAoaCwgcywgbCwgdj1zKk1hdGgubWluKGwsMS1sKStsKSA9PiBbaCwgdj8yLTIqbC92OjAsIHZdO1xyXG5sZXQgaHN2MmhzbCA9IChoLCBzLCB2LCBsPXYtdipzLzIsIG09TWF0aC5taW4obCwxLWwpKSA9PiBbaCxtPyh2LWwpL206MCxsXTtcclxuXHJcblxyXG5jb25zdCBJbnB1dE51bWJlciA9IHByb3BzID0+IHtcclxuXHJcblx0Y29uc3QgWyB2YWx1ZSwgc2V0VmFsdWUgXSA9IHVzZVN0YXRlKHByb3BzLnZhbHVlKVxyXG5cclxuXHRjb25zdCBvbkNoYW5nZSA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcclxuXHRcdGxldCBfX3ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlXHJcblx0XHRpZihwcm9wcy5wb3N0Zml4KVxyXG5cdFx0XHRfX3ZhbHVlID0gX192YWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoYChcXFxcJHtwcm9wcy5wb3N0Zml4fSkkYCwgJ2cnKSwgJycpXHJcblx0XHRzZXRWYWx1ZShfX3ZhbHVlKVxyXG5cdFx0aWYocHJvcHMub25DaGFuZ2UpXHJcblx0XHRcdHByb3BzLm9uQ2hhbmdlKF9fdmFsdWUpXHJcblx0fSwgWyB2YWx1ZSBdKVxyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cdFx0c2V0VmFsdWUocHJvcHMudmFsdWUpXHJcblx0fSwgWyBwcm9wcy52YWx1ZSBdKVxyXG5cclxuXHRyZXR1cm4gKFxyXG5cdFx0PGlucHV0XHJcblx0XHRcdHR5cGU9XCJ0ZXh0XCJcclxuXHRcdFx0dmFsdWU9eyBgJHt2YWx1ZX0ke3Byb3BzLnBvc3RmaXggfHwgJyd9YCB9XHJcblx0XHRcdG9uQ2hhbmdlPXsgb25DaGFuZ2UgfVxyXG5cdFx0Lz5cclxuXHQpXHJcbn1cclxuXHJcblxyXG5jb25zdCBJbnB1dENvbG9yUGlja2VyID0gcHJvcHMgPT4ge1xyXG5cclxuXHRjb25zdCBub2RlID0gdXNlV2lzZVJlZih7XHJcblx0XHRjb250YWluZXI6IG51bGwsXHJcblx0XHRwcmV2aWV3OiBudWxsLFxyXG5cdFx0c3dhdGNoZXM6IG51bGxcclxuXHR9KVxyXG5cclxuXHRjb25zdCBzdGF0ZSA9IHVzZVdpc2VTdGF0ZSh7XHJcblx0XHRpc0ZvY3VzOiBmYWxzZSxcclxuXHRcdGlzRm9jdXNTd2F0Y2hlczogZmFsc2UsXHJcblx0XHRoOiBwcm9wcy52YWx1ZVswXSxcclxuXHRcdHM6IHByb3BzLnZhbHVlWzFdLFxyXG5cdFx0bDogcHJvcHMudmFsdWVbMl0sXHJcblx0XHRhOiBwcm9wcy52YWx1ZVszXSB8fCAxMDAsXHJcblx0XHRzd2F0Y2hlc1NlbGVjdGlvblg6ICgoKSA9PiB7XHJcblx0XHRcdGxldCBoc3YgPSBoc2wyaHN2KHByb3BzLnZhbHVlWzBdLCBwcm9wcy52YWx1ZVsxXS8xMDAsIHByb3BzLnZhbHVlWzJdLzEwMClcclxuXHRcdFx0cmV0dXJuIGhzdlsxXSAqIDEwMFxyXG5cdFx0fSkoKSxcclxuXHRcdHN3YXRjaGVzU2VsZWN0aW9uWTogKCgpID0+IHtcclxuXHRcdFx0bGV0IGhzdiA9IGhzbDJoc3YocHJvcHMudmFsdWVbMF0sIHByb3BzLnZhbHVlWzFdLzEwMCwgcHJvcHMudmFsdWVbMl0vMTAwKVxyXG5cdFx0XHRyZXR1cm4gKGhzdlsyXSAqIC0xMDApICsgMTAwXHJcblx0XHR9KSgpXHJcblx0fSlcclxuXHJcblx0dXNlQ2xpY2tJTyhcclxuXHRcdG5vZGUuY29udGFpbmVyLFxyXG5cdFx0KGV2ZW50KSA9PiB7IHN0YXRlLmlzRm9jdXMgPSBub2RlLnByZXZpZXcuY29udGFpbnMoZXZlbnQudGFyZ2V0KSA/ICFzdGF0ZS5pc0ZvY3VzIDogdHJ1ZTsgfSxcclxuXHRcdChldmVudCkgPT4geyBzdGF0ZS5pc0ZvY3VzID0gZmFsc2UgfSxcclxuXHRcdFsgbm9kZSwgc3RhdGUuaXNGb2N1cyBdXHJcblx0KVxyXG5cclxuXHRjb25zdCBvbk1vdXNlRG93biA9IHVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRzdGF0ZS5pc0ZvY3VzU3dhdGNoZXMgPSB0cnVlO1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbk1vdXNlTW92ZSk7XHJcblx0fSwgW10pXHJcblxyXG5cdGNvbnN0IG9uTW91c2VNb3ZlID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xyXG5cclxuXHRcdGxldCBtb3VzZVggPSBldmVudC54IHx8IGV2ZW50LnRvdWNoZXNbMF0/LnBhZ2VYLFxyXG5cdFx0XHRtb3VzZVkgPSBldmVudC55IHx8IGV2ZW50LnRvdWNoZXNbMF0/LnBhZ2VZXHJcblxyXG5cdFx0bGV0IHN3YXRjaGVzT2Zmc2V0ID0gZ2V0QWJzT2Zmc2V0KG5vZGUuc3dhdGNoZXMpXHJcblx0XHRsZXQgc3dhdGNoZXNYID0gc3dhdGNoZXNPZmZzZXQubGVmdFxyXG5cdFx0bGV0IHN3YXRjaGVzWSA9IHN3YXRjaGVzT2Zmc2V0LnRvcFxyXG5cdFx0bGV0IHN3YXRjaGVzVyA9IG5vZGUuc3dhdGNoZXMuY2xpZW50V2lkdGhcclxuXHRcdGxldCBzd2F0Y2hlc0ggPSBub2RlLnN3YXRjaGVzLmNsaWVudEhlaWdodFxyXG5cclxuXHRcdHN0YXRlLnN3YXRjaGVzU2VsZWN0aW9uWCA9IGxpbWl0KHJlbWFwKG1vdXNlWCwgc3dhdGNoZXNYLCBzd2F0Y2hlc1ggKyBzd2F0Y2hlc1csIDAsIDEwMCksIDAsIDEwMClcclxuXHRcdHN0YXRlLnN3YXRjaGVzU2VsZWN0aW9uWSA9IGxpbWl0KHJlbWFwKG1vdXNlWSwgc3dhdGNoZXNZLCBzd2F0Y2hlc1kgKyBzd2F0Y2hlc0gsIDAsIDEwMCksIDAsIDEwMClcclxuXHJcblx0XHRsZXQgaCA9IHN0YXRlLmhcclxuXHRcdGxldCB2ID0gMSAtIChzdGF0ZS5zd2F0Y2hlc1NlbGVjdGlvblkgLyAxMDApO1xyXG5cdFx0bGV0IHMgPSBzdGF0ZS5zd2F0Y2hlc1NlbGVjdGlvblggLyAxMDA7XHJcblxyXG5cdFx0bGV0IGhzbCA9IGhzdjJoc2woaCwgcywgdilcclxuXHJcblx0XHRzdGF0ZS5zID0gcm91bmQoKGhzbFsxXSB8fCAwKSAqIDEwMClcclxuXHRcdHN0YXRlLmwgPSByb3VuZCgoaHNsWzJdIHx8IDApICogMTAwKVxyXG5cclxuXHR9LCBbXSlcclxuXHJcblx0Y29uc3Qgb25Nb3VzZVVwID0gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xyXG5cdFx0c3RhdGUuaXNGb2N1c1N3YXRjaGVzID0gZmFsc2U7XHJcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xyXG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uTW91c2VNb3ZlKTtcclxuXHR9LCBbXSlcclxuXHJcblx0dXNlRWZmZWN0T25jZSgoKSA9PiB7XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2VVcCk7XHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbk1vdXNlVXApO1xyXG5cdFx0cmV0dXJuICgpID0+IHtcclxuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXApO1xyXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbk1vdXNlVXApO1xyXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xyXG5cdFx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Nb3VzZU1vdmUpO1xyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5cdHVzZUVmZmVjdCgoKSA9PiB7XHJcblx0XHRzdGF0ZS5oID0gcHJvcHMudmFsdWVbMF1cclxuXHRcdHN0YXRlLnMgPSBwcm9wcy52YWx1ZVsxXVxyXG5cdFx0c3RhdGUubCA9IHByb3BzLnZhbHVlWzJdXHJcblx0XHRzdGF0ZS5hID0gcHJvcHMudmFsdWVbM10gfHwgMTAwXHJcblx0fSwgWyBwcm9wcy52YWx1ZSBdKVxyXG5cclxuXHR1c2VFZmZlY3QoKCkgPT4ge1xyXG5cclxuXHRcdGlmKCFwcm9wcy5vbkNoYW5nZSlcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdHByb3BzLm9uQ2hhbmdlKFsgc3RhdGUuaCwgc3RhdGUucywgc3RhdGUubCwgc3RhdGUuYSBdKVxyXG5cdFx0XHJcblx0XHRpZighc3RhdGUuaXNGb2N1c1N3YXRjaGVzKSB7XHJcblx0XHRcdGxldCBoc3YgPSBoc2wyaHN2KHN0YXRlLmgsIHN0YXRlLnMvMTAwLCBzdGF0ZS5sLzEwMClcclxuXHRcdFx0bGV0IHggPSBoc3ZbMV0gKiAxMDBcclxuXHRcdFx0bGV0IHkgPSAoaHN2WzJdICogLTEwMCkgKyAxMDBcclxuXHJcblx0XHRcdHN0YXRlLnN3YXRjaGVzU2VsZWN0aW9uWCA9IHg7XHJcblx0XHRcdHN0YXRlLnN3YXRjaGVzU2VsZWN0aW9uWSA9IHk7XHJcblx0XHR9XHJcblx0fSwgWyBzdGF0ZS5oLCBzdGF0ZS5zLCBzdGF0ZS5sLCBzdGF0ZS5hIF0pXHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2XHJcblx0XHRcdHJlZj17IGVsID0+IHsgbm9kZS5jb250YWluZXIgPSBlbCB9fVxyXG5cdFx0XHRjbGFzc05hbWU9e2N4KCdpbnB1dC1jb2xvci1waWNrZXInLCB7ICdpcy1mb2N1cyc6IHN0YXRlLmlzRm9jdXMsICdpbi1yaWdodCc6IHByb3BzLmluUmlnaHQgfSl9XHJcblx0XHQ+XHJcblx0XHRcdDxkaXZcclxuXHRcdFx0XHRyZWY9eyBlbCA9PiB7IG5vZGUucHJldmlldyA9IGVsIH19XHJcblx0XHRcdFx0Y2xhc3NOYW1lPVwiaW5wdXQtY29sb3ItcGlja2VyLXByZXZpZXctY29udGFpbmVyXCJcclxuXHRcdFx0PlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29sb3ItcGlja2VyLXByZXZpZXctY2hlY2tlclwiIC8+XHJcblx0XHRcdFx0PGRpdlxyXG5cdFx0XHRcdFx0Y2xhc3NOYW1lPVwiaW5wdXQtY29sb3ItcGlja2VyLXByZXZpZXdcIlxyXG5cdFx0XHRcdFx0c3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBgaHNsYSgke3N0YXRlLmh9LCAke3N0YXRlLnN9JSwgJHtzdGF0ZS5sfSUsICR7c3RhdGUuYX0lKWAgfX1cclxuXHRcdFx0XHQvPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJpbnB1dC1jb2xvci1waWNrZXItb3B0aW9uc1wiPlxyXG5cclxuXHRcdFx0XHQ8ZGl2XHJcblx0XHRcdFx0XHRyZWY9eyBub2RlLnN3YXRjaGVzX19zZXQgfVxyXG5cdFx0XHRcdFx0Y2xhc3NOYW1lPVwic3dhdGNoZXNcIlxyXG5cdFx0XHRcdFx0c3R5bGU9e3sgYmFja2dyb3VuZDogYGxpbmVhci1ncmFkaWVudCgxODBkZWcsIGhzbGEoMCwgMCUsIDAlLCAwJSkgMCUsIGhzbGEoMCwgMCUsIDAlLCAxMDAlKSAxMDAlKSwgbGluZWFyLWdyYWRpZW50KDkwZGVnLCBoc2xhKCR7c3RhdGUuaH0sIDAlLCAxMDAlLCAxMDAlKSAwJSwgaHNsYSgke3N0YXRlLmh9LCAxMDAlLCA1MCUsIDEwMCUpIDEwMCUpYCB9fVxyXG5cdFx0XHRcdFx0b25Nb3VzZURvd249eyBvbk1vdXNlRG93biB9XHJcblx0XHRcdFx0XHRvblRvdWNoU3RhcnQ9eyBvbk1vdXNlRG93biB9XHJcblx0XHRcdFx0PlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJzd2F0Y2hlcy1wb2ludGVyLWFyZWFcIj5cclxuXHRcdFx0XHRcdFx0PGRpdlxyXG5cdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cInN3YXRjaGVzLXBvaW50ZXJcIlxyXG5cdFx0XHRcdFx0XHRcdHN0eWxlPXt7XHJcblx0XHRcdFx0XHRcdFx0XHRsZWZ0OiBgJHtzdGF0ZS5zd2F0Y2hlc1NlbGVjdGlvblh9JWAsXHJcblx0XHRcdFx0XHRcdFx0XHR0b3A6IGAke3N0YXRlLnN3YXRjaGVzU2VsZWN0aW9uWX0lYCxcclxuXHRcdFx0XHRcdFx0XHR9fVxyXG5cdFx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PC9kaXY+XHJcblxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC0xMlwiIC8+XHJcblxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwic2xpZGVyIGh1ZVwiPlxyXG5cdFx0XHRcdFx0PHNwYW4+XHJcblx0XHRcdFx0XHRcdEhcclxuXHRcdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0XHRcdDxJbnB1dFJhbmdlXHJcblx0XHRcdFx0XHRcdG1pbj17IDAgfSBtYXg9eyAzNjAgfVxyXG5cdFx0XHRcdFx0XHR2YWx1ZT17IHN0YXRlLmggfVxyXG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17IHN0YXRlLmhfX3NldCB9XHJcblx0XHRcdFx0XHQvPlxyXG5cdFx0XHRcdFx0PElucHV0TnVtYmVyXHJcblx0XHRcdFx0XHRcdHZhbHVlPXsgc3RhdGUuaCB9XHJcblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXsgc3RhdGUuaF9fc2V0IH1cclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0PC9kaXY+XHJcblxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwic2xpZGVyIHNhdHVyYXRpb25cIj5cclxuXHRcdFx0XHRcdDxzcGFuPlxyXG5cdFx0XHRcdFx0XHRTXHJcblx0XHRcdFx0XHQ8L3NwYW4+XHJcblx0XHRcdFx0XHQ8SW5wdXRSYW5nZVxyXG5cdFx0XHRcdFx0XHRtaW49eyAwIH0gbWF4PXsgMTAwIH1cclxuXHRcdFx0XHRcdFx0dmFsdWU9eyBzdGF0ZS5zIH1cclxuXHRcdFx0XHRcdFx0b25DaGFuZ2U9eyBzdGF0ZS5zX19zZXQgfVxyXG5cdFx0XHRcdFx0XHRzbGlkZXJCYWNrZ3JvdW5kPXsgYGxpbmVhci1ncmFkaWVudCg5MGRlZywgaHNsKCR7c3RhdGUuaH0sIDAlLCA1MCUpIDAlLCBoc2woJHtzdGF0ZS5ofSwgMTAwJSwgNTAlKSAxMDAlKWAgfVxyXG5cdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdDxJbnB1dE51bWJlclxyXG5cdFx0XHRcdFx0XHR2YWx1ZT17IHN0YXRlLnMgfVxyXG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17IHN0YXRlLnNfX3NldCB9XHJcblx0XHRcdFx0XHRcdHBvc3RmaXg9XCIlXCJcclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0PC9kaXY+XHJcblxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwic2xpZGVyIGxpZ2h0bmVzc1wiPlxyXG5cdFx0XHRcdFx0PHNwYW4+XHJcblx0XHRcdFx0XHRcdExcclxuXHRcdFx0XHRcdDwvc3Bhbj5cclxuXHRcdFx0XHRcdDxJbnB1dFJhbmdlXHJcblx0XHRcdFx0XHRcdG1pbj17IDAgfSBtYXg9eyAxMDAgfVxyXG5cdFx0XHRcdFx0XHR2YWx1ZT17IHN0YXRlLmwgfVxyXG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17IHN0YXRlLmxfX3NldCB9XHJcblx0XHRcdFx0XHRcdHNsaWRlckJhY2tncm91bmQ9eyBgbGluZWFyLWdyYWRpZW50KDkwZGVnLCBoc2woJHtzdGF0ZS5ofSwgJHtzdGF0ZS5zfSUsIDAlKSAwJSwgaHNsKCR7c3RhdGUuaH0sICR7c3RhdGUuc30lLCA1MCUpIDUwJSwgaHNsKCR7c3RhdGUuaH0sICR7c3RhdGUuc30lLCAxMDAlKSAxMDAlKWAgfVxyXG5cdFx0XHRcdFx0Lz5cclxuXHRcdFx0XHRcdDxJbnB1dE51bWJlclxyXG5cdFx0XHRcdFx0XHR2YWx1ZT17IHN0YXRlLmwgfVxyXG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17IHN0YXRlLmxfX3NldCB9XHJcblx0XHRcdFx0XHRcdHBvc3RmaXg9XCIlXCJcclxuXHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0PC9kaXY+XHJcblxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvZGl2PlxyXG5cdClcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IElucHV0Q29sb3JQaWNrZXIiLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VNZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBjeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJ1xyXG5cclxuaW1wb3J0IFFSQ29kZSBmcm9tICcuLy4uLy4uL2NvbnRhaW5lcnMvUVJDb2RlJztcclxuaW1wb3J0IElucHV0Q29sb3JQaWNrZXIgZnJvbSAnLi8uLi8uLi9jb21wb25lbnRzL0lucHV0Q29sb3JQaWNrZXInO1xyXG5cclxuaW1wb3J0ICcuL3N0eWxlLmxlc3MnXHJcblxyXG5cclxud2luZG93LlNWR19DUkVESVRTID0gJzwhLS0gQ3JlYXRlIGF0IGV4YW1wbGUuY29tIC0tPidcclxuXHJcblxyXG5jb25zdCBGb3JlZ3JvdW5kQ29sb3IgPSBwcm9wcyA9PiB7XHJcblx0Y29uc3QgWyBxcmNvZGUgXSA9IFFSQ29kZS51c2VDb250YWluZXIoKVxyXG5cdHJldHVybiAoXHJcblx0XHQ8SW5wdXRDb2xvclBpY2tlclxyXG5cdFx0XHR2YWx1ZT17IHFyY29kZS5mb3JlZ3JvdW5kQ29sb3IgfVxyXG5cdFx0XHRvbkNoYW5nZT17IHFyY29kZS5mb3JlZ3JvdW5kQ29sb3JfX3NldCB9XHJcblx0XHQvPlxyXG5cdClcclxufVxyXG5cclxuXHJcbmNvbnN0IEJhY2tncm91bmRDb2xvciA9IHByb3BzID0+IHtcclxuXHRjb25zdCBbIHFyY29kZSBdID0gUVJDb2RlLnVzZUNvbnRhaW5lcigpXHJcblx0cmV0dXJuIHVzZU1lbW8oKCkgPT4gKFxyXG5cdFx0PElucHV0Q29sb3JQaWNrZXJcclxuXHRcdFx0dmFsdWU9eyBxcmNvZGUuYmFja2dyb3VuZENvbG9yIH1cclxuXHRcdFx0b25DaGFuZ2U9eyBxcmNvZGUuYmFja2dyb3VuZENvbG9yX19zZXQgfVxyXG5cdFx0XHRpblJpZ2h0XHJcblx0XHQvPlxyXG5cdCksIFsgcXJjb2RlLmJhY2tncm91bmRDb2xvciBdKVxyXG59XHJcblxyXG5cclxuY29uc3QgQ29sb3JQaWNrZXIgPSBwcm9wcyA9PiB7XHJcblx0Y29uc3QgWyBxcmNvZGUgXSA9IFFSQ29kZS51c2VDb250YWluZXIoKVxyXG5cdGNvbnN0IHN3YXAgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcblx0XHRbIHFyY29kZS5mb3JlZ3JvdW5kQ29sb3IsIHFyY29kZS5iYWNrZ3JvdW5kQ29sb3IgXSA9IFsgcXJjb2RlLmJhY2tncm91bmRDb2xvciwgcXJjb2RlLmZvcmVncm91bmRDb2xvciBdXHJcblx0fSwgW10pXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjeCgnY29sb3JwaWNrZXInLCBjc3NgZGlzcGxheTogZmxleDtgKX0+XHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3NgZmxleDogMTtgfT5cclxuXHRcdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0XHRGb3JlZ3JvdW5kIENvbG9yXHJcblx0XHRcdFx0PC9sYWJlbD5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtMTJcIiAvPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC0zMlwiPlxyXG5cdFx0XHRcdFx0PEZvcmVncm91bmRDb2xvciAvPlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJzd2FwXCI+XHJcblx0XHRcdFx0PGJ1dHRvbiBvbkNsaWNrPXsgc3dhcCB9PlxyXG5cdFx0XHRcdFx0PHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIj5cclxuXHRcdFx0XHRcdFx0PHBhdGggZD1cIk0wIDE2OHYtMTZjMC0xMy4yNTUgMTAuNzQ1LTI0IDI0LTI0aDM2MFY4MGMwLTIxLjM2NyAyNS44OTktMzIuMDQyIDQwLjk3MS0xNi45NzFsODAgODBjOS4zNzIgOS4zNzMgOS4zNzIgMjQuNTY5IDAgMzMuOTQxbC04MCA4MEM0MDkuOTU2IDI3MS45ODIgMzg0IDI2MS40NTYgMzg0IDI0MHYtNDhIMjRjLTEzLjI1NSAwLTI0LTEwLjc0NS0yNC0yNHptNDg4IDE1MkgxMjh2LTQ4YzAtMjEuMzE0LTI1Ljg2Mi0zMi4wOC00MC45NzEtMTYuOTcxbC04MCA4MGMtOS4zNzIgOS4zNzMtOS4zNzIgMjQuNTY5IDAgMzMuOTQxbDgwIDgwQzEwMi4wNTcgNDYzLjk5NyAxMjggNDUzLjQzNyAxMjggNDMydi00OGgzNjBjMTMuMjU1IDAgMjQtMTAuNzQ1IDI0LTI0di0xNmMwLTEzLjI1NS0xMC43NDUtMjQtMjQtMjR6XCIvPlxyXG5cdFx0XHRcdFx0PC9zdmc+XHJcblx0XHRcdFx0PC9idXR0b24+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzYGZsZXg6IDE7YH0+XHJcblx0XHRcdFx0PGxhYmVsPlxyXG5cdFx0XHRcdFx0QmFja2dyb3VuZCBDb2xvclxyXG5cdFx0XHRcdDwvbGFiZWw+XHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJoLTEyXCIgLz5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtMzJcIj5cclxuXHRcdFx0XHRcdDxCYWNrZ3JvdW5kQ29sb3IgLz5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQ8L2Rpdj5cclxuXHQpXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2xvclBpY2tlciIsImltcG9ydCB7IGgsIEZyYWdtZW50IH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jc3MnXHJcblxyXG5pbXBvcnQgRXhwb3J0IGZyb20gJy4vLi4vLi4vY29udGFpbmVycy9FeHBvcnQnXHJcbmltcG9ydCBJbnB1dFJhbmdlIGZyb20gJy4vLi4vLi4vY29tcG9uZW50cy9JbnB1dFJhbmdlJ1xyXG5cclxuXHJcbmNvbnN0IEV4cG9ydFNpemUgPSBwcm9wcyA9PiB7XHJcblxyXG5cdGNvbnN0IFsgX19leHBvcnQgXSA9IEV4cG9ydC51c2VDb250YWluZXIoKVxyXG5cclxuXHRyZXR1cm4gdXNlTWVtbygoKSA9PiAoXHJcblx0XHQ8RnJhZ21lbnQ+XHJcblxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzYGRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtgfT5cclxuXHRcdFx0XHQ8bGFiZWw+XHJcblx0XHRcdFx0XHRTaXplXHJcblx0XHRcdFx0PC9sYWJlbD5cclxuXHRcdFx0XHQ8c21hbGw+XHJcblx0XHRcdFx0XHQ8b3V0cHV0PlxyXG5cdFx0XHRcdFx0XHR7IF9fZXhwb3J0LnNpemUgfXB4XHJcblx0XHRcdFx0XHQ8L291dHB1dD5cclxuXHRcdFx0XHQ8L3NtYWxsPlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHJcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC0yXCIgLz5cclxuXHJcblx0XHRcdDxJbnB1dFJhbmdlXHJcblx0XHRcdFx0bWluPXsgMzIwIH1cclxuXHRcdFx0XHRtYXg9eyA4MDAwIH1cclxuXHRcdFx0XHRzdGVwPXsgMzIwIH1cclxuXHRcdFx0XHRkZWZhdWx0VmFsdWU9eyBfX2V4cG9ydC5zaXplIH1cclxuXHRcdFx0XHRvbkNoYW5nZT17IF9fdmFsdWUgPT4geyBfX2V4cG9ydC5zaXplID0gX192YWx1ZSB9fVxyXG5cdFx0XHQvPlxyXG5cclxuXHRcdDwvRnJhZ21lbnQ+XHJcblx0KSwgWyBfX2V4cG9ydC5zaXplIF0pXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBFeHBvcnRTaXplIiwiaW1wb3J0IHsgaCwgcmVuZGVyIH0gZnJvbSAncHJlYWN0J1xyXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnXHJcblxyXG5pbXBvcnQgSW5wdXRDaGVja2JveCBmcm9tICcuLy4uLy4uL2NvbXBvbmVudHMvSW5wdXRDaGVja2JveCdcclxuaW1wb3J0IEV4cG9ydCBmcm9tICcuLy4uLy4uL2NvbnRhaW5lcnMvRXhwb3J0J1xyXG5cclxuXHJcbmNvbnN0IEV4Y2x1ZGViYWNrZ3JvdW5kID0gKCkgPT4ge1xyXG5cclxuXHRjb25zdCBbIF9fZXhwb3J0IF0gPSBFeHBvcnQudXNlQ29udGFpbmVyKClcclxuXHJcblx0cmV0dXJuIHVzZU1lbW8oKCkgPT4gKFxyXG5cdFx0PElucHV0Q2hlY2tib3hcclxuXHRcdFx0ZGVmYXVsdFZhbHVlPXsgZmFsc2UgfVxyXG5cdFx0XHRvbkNoYW5nZT17IF9fZXhwb3J0LmV4Y2x1ZGVCYWNrZ3JvdW5kX19zZXQgfVxyXG5cdFx0PlxyXG5cdFx0XHRFeGNsdWRlIGJhY2tncm91bmRcclxuXHRcdDwvSW5wdXRDaGVja2JveD5cclxuXHQpLCBbXSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV4Y2x1ZGViYWNrZ3JvdW5kIiwiaW1wb3J0IHsgaCB9IGZyb20gJ3ByZWFjdCdcclxuXHJcbmltcG9ydCBFeHBvcnQgZnJvbSAnLi8uLi8uLi9jb250YWluZXJzL0V4cG9ydCdcclxuaW1wb3J0IFFSQ29kZSBmcm9tICcuLy4uLy4uL2NvbnRhaW5lcnMvUVJDb2RlJ1xyXG5pbXBvcnQgZ2VuZXJhdGVTVkdQYXRoQ29tbWFuZCBmcm9tICcuLy4uLy4uL2xpYi9nZW5lcmF0ZS1zdmctcGF0aC1jb21tYW5kJ1xyXG5pbXBvcnQgYXJyVG9IU0xBIGZyb20gJy4vLi4vLi4vbGliL2FyclRvSFNMQSdcclxuaW1wb3J0IHVzZVdpc2VSZWYgZnJvbSAnLi8uLi8uLi9saWIvdXNlV2lzZVJlZidcclxuXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5cclxuXHJcbmNvbnN0IEJ1dHRvbkRvd25sb2FkUE5HID0gcHJvcHMgPT4ge1xyXG5cclxuXHRjb25zdCBub2RlID0gdXNlV2lzZVJlZih7XHJcblx0XHRjYW52YXM6IG51bGwsXHJcblx0XHRkdW1teUFuY2hvcjogbnVsbFxyXG5cdH0pXHJcblx0Y29uc3QgWyBxcmNvZGUgXSA9IFFSQ29kZS51c2VDb250YWluZXIoKVxyXG5cdGNvbnN0IFsgX19leHBvcnQgXSA9IEV4cG9ydC51c2VDb250YWluZXIoKVxyXG5cclxuXHRjb25zdCBvbkNsaWNrSGFuZGxlciA9IGV2ZW50ID0+IHtcclxuXHJcblx0XHRjb25zdCBjYW52YXNTaXplID0gX19leHBvcnQuc2l6ZVxyXG5cclxuXHRcdGlmKCFub2RlLmNhbnZhcylcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0aWYoIW5vZGUuZHVtbXlBbmNob3IpXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdGxldCBkID0gZ2VuZXJhdGVTVkdQYXRoQ29tbWFuZCh7XHJcblx0XHRcdHNpemU6ICAgICAgICAgICBxcmNvZGUuc2l6ZSxcclxuXHRcdFx0c2hhcGVzOiAgICAgICAgIHFyY29kZS5zaGFwZXMsXHJcblx0XHRcdHJvdW5kQ29ybmVyOiAgICBxcmNvZGUucm91bmRDb3JuZXIsXHJcblx0XHRcdGV5ZVJvdW5kQ29ybmVyOiBxcmNvZGUuZXllUm91bmRDb3JuZXIsXHJcblx0XHRcdGNhbnZhczoge1xyXG5cdFx0XHRcdHNpemU6IGNhbnZhc1NpemVcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHRsZXQgY2FudmFzID0gbm9kZS5jYW52YXNcclxuXHRcdGxldCBsaW5rID0gbm9kZS5kdW1teUFuY2hvclxyXG5cclxuXHRcdGNhbnZhcy53aWR0aCA9IGNhbnZhc1NpemVcclxuXHRcdGNhbnZhcy5oZWlnaHQgPSBjYW52YXNTaXplXHJcblxyXG5cdFx0Y29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcclxuXHRcdGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzU2l6ZSwgY2FudmFzU2l6ZSlcclxuXHJcblx0XHRpZighX19leHBvcnQuZXhjbHVkZUJhY2tncm91bmQpIHtcclxuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGFyclRvSFNMQShxcmNvZGUuYmFja2dyb3VuZENvbG9yKVxyXG5cdFx0XHRjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzU2l6ZSwgY2FudmFzU2l6ZSlcclxuXHRcdH1cclxuXHJcblx0XHRjdHguZmlsbFN0eWxlID0gYXJyVG9IU0xBKHFyY29kZS5mb3JlZ3JvdW5kQ29sb3IpXHJcblx0XHRjdHguZmlsbChuZXcgUGF0aDJEKGQpLCAnZXZlbm9kZCcpXHJcblxyXG5cdFx0bGluay5kb3dubG9hZCA9ICdRUkNvZGUucG5nJ1xyXG5cdFx0bGluay5ocmVmID0gY2FudmFzLnRvRGF0YVVSTCgnaW1hZ2UvcG5nJylcclxuXHRcdGxpbmsuY2xpY2soKVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiAoXHJcblx0XHQ8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbi1kb3dubG9hZC1wbmdcIj5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkdW1teVwiPlxyXG5cdFx0XHRcdDxjYW52YXMgcmVmPXsgbm9kZS5jYW52YXNfX3NldCB9IC8+XHJcblx0XHRcdFx0PGEgcmVmPXsgbm9kZS5kdW1teUFuY2hvcl9fc2V0IH0gLz5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdDxidXR0b25cclxuXHRcdFx0XHRjbGFzc05hbWU9XCJsYXJnZSBvcmFuZ2VcIlxyXG5cdFx0XHRcdG9uQ2xpY2s9eyBvbkNsaWNrSGFuZGxlciB9XHJcblx0XHRcdFx0ZGlzYWJsZWQ9eyAhcXJjb2RlLmlzVmFsaWQgfVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0UE5HXHJcblx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0PC9kaXY+XHJcblx0KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uRG93bmxvYWRQTkciLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5cclxuaW1wb3J0IFFSQ29kZSBmcm9tICcuLy4uLy4uL2NvbnRhaW5lcnMvUVJDb2RlJ1xyXG5pbXBvcnQgRXhwb3J0IGZyb20gJy4vLi4vLi4vY29udGFpbmVycy9FeHBvcnQnXHJcbmltcG9ydCBnZW5lcmF0ZVNWR1BhdGhDb21tYW5kIGZyb20gJy4vLi4vLi4vbGliL2dlbmVyYXRlLXN2Zy1wYXRoLWNvbW1hbmQnXHJcbmltcG9ydCBhcnJUb0hTTEEgZnJvbSAnLi8uLi8uLi9saWIvYXJyVG9IU0xBJ1xyXG5pbXBvcnQgdXNlV2lzZVJlZiBmcm9tICcuLy4uLy4uL2xpYi91c2VXaXNlUmVmJ1xyXG5cclxuaW1wb3J0ICcuL3N0eWxlLmxlc3MnXHJcblxyXG5cclxuY29uc3QgQnV0dG9uRG93bmxvYWRTVkcgPSBwcm9wcyA9PiB7XHJcblxyXG5cdGNvbnN0IG5vZGUgPSB1c2VXaXNlUmVmKHtcclxuXHRcdGR1bW15QW5jaG9yOiBudWxsXHJcblx0fSlcclxuXHRjb25zdCBbIHFyY29kZSBdID0gUVJDb2RlLnVzZUNvbnRhaW5lcigpXHJcblx0Y29uc3QgWyBfX2V4cG9ydCBdID0gRXhwb3J0LnVzZUNvbnRhaW5lcigpXHJcblxyXG5cdGNvbnN0IG9uQ2xpY2tIYW5kbGVyID0gZXZlbnQgPT4ge1xyXG5cclxuXHRcdGNvbnN0IGNhbnZhc1NpemUgPSBfX2V4cG9ydC5zaXplXHJcblxyXG5cdFx0aWYoIW5vZGUuZHVtbXlBbmNob3IpXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdGxldCBkID0gZ2VuZXJhdGVTVkdQYXRoQ29tbWFuZCh7XHJcblx0XHRcdHNpemU6ICAgICAgICAgICBxcmNvZGUuc2l6ZSxcclxuXHRcdFx0c2hhcGVzOiAgICAgICAgIHFyY29kZS5zaGFwZXMsXHJcblx0XHRcdHJvdW5kQ29ybmVyOiAgICBxcmNvZGUucm91bmRDb3JuZXIsXHJcblx0XHRcdGV5ZVJvdW5kQ29ybmVyOiBxcmNvZGUuZXllUm91bmRDb3JuZXIsXHJcblx0XHRcdGNhbnZhczoge1xyXG5cdFx0XHRcdHNpemU6IGNhbnZhc1NpemVcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcclxuXHRcdGxldCBjb250ZW50ID1cclxuYCR7d2luZG93LlNWR19DUkVESVRTfVxyXG48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwICR7Y2FudmFzU2l6ZX0gJHtjYW52YXNTaXplfVwiPlxyXG4keyBfX2V4cG9ydC5leGNsdWRlQmFja2dyb3VuZCA/ICcnIDogYDxwYXRoIGQ9XCJNMCwwSCR7Y2FudmFzU2l6ZX1WJHtjYW52YXNTaXplfUgwelwiIGZpbGw9XCIke2FyclRvSFNMQShxcmNvZGUuYmFja2dyb3VuZENvbG9yKX1cIiAvPmB9XHJcbjxwYXRoIGQ9XCIke2R9XCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGZpbGw9XCIke2FyclRvSFNMQShxcmNvZGUuZm9yZWdyb3VuZENvbG9yKX1cIiAvPlxyXG48L3N2Zz5gLnJlcGxhY2UoL1xcbi9nLCAnJylcclxuXHJcblx0XHRsZXQgbGluayA9IG5vZGUuZHVtbXlBbmNob3JcclxuXHJcblx0XHRsaW5rLmRvd25sb2FkID0gJ1FSQ29kZS5zdmcnXHJcblx0XHRsaW5rLmhyZWYgPSAnZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJyArIGVuY29kZVVSSUNvbXBvbmVudChjb250ZW50KVxyXG5cdFx0bGluay5jbGljaygpXHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uLWRvd25sb2FkLXBuZ1wiPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImR1bW15XCI+XHJcblx0XHRcdFx0PGEgcmVmPXsgbm9kZS5kdW1teUFuY2hvcl9fc2V0IH0gLz5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdDxidXR0b25cclxuXHRcdFx0XHRjbGFzc05hbWU9XCJsYXJnZSBvcmFuZ2VcIlxyXG5cdFx0XHRcdG9uQ2xpY2s9eyBvbkNsaWNrSGFuZGxlciB9XHJcblx0XHRcdFx0ZGlzYWJsZWQ9eyAhcXJjb2RlLmlzVmFsaWQgfVxyXG5cdFx0XHQ+XHJcblx0XHRcdFx0U1ZHXHJcblx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0PC9kaXY+XHJcblx0KVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uRG93bmxvYWRTVkciLCJpbXBvcnQgeyBoIH0gZnJvbSAncHJlYWN0J1xyXG5cclxuaW1wb3J0IEFsZXJ0IGZyb20gJy4vLi4vLi4vY29udGFpbmVycy9BbGVydCdcclxuaW1wb3J0IEV4cG9ydCBmcm9tICcuLy4uLy4uL2NvbnRhaW5lcnMvRXhwb3J0J1xyXG5pbXBvcnQgUVJDb2RlIGZyb20gJy4vLi4vLi4vY29udGFpbmVycy9RUkNvZGUnXHJcbmltcG9ydCBnZW5lcmF0ZVNWR1BhdGhDb21tYW5kIGZyb20gJy4vLi4vLi4vbGliL2dlbmVyYXRlLXN2Zy1wYXRoLWNvbW1hbmQnXHJcbmltcG9ydCBhcnJUb0hTTEEgZnJvbSAnLi8uLi8uLi9saWIvYXJyVG9IU0xBJ1xyXG5cclxuaW1wb3J0ICcuL3N0eWxlLmxlc3MnXHJcblxyXG5cclxuY29uc3QgQnV0dG9uQ29weVNWR0NvZGUgPSBwcm9wcyA9PiB7XHJcblxyXG5cdGNvbnN0IGFsZXJ0ID0gQWxlcnQudXNlQ29udGFpbmVyKClcclxuXHRjb25zdCBbIHFyY29kZSBdID0gUVJDb2RlLnVzZUNvbnRhaW5lcigpXHJcblx0Y29uc3QgWyBfX2V4cG9ydCBdID0gRXhwb3J0LnVzZUNvbnRhaW5lcigpXHJcblxyXG5cdGNvbnN0IG9uQ2xpY2tIYW5kbGVyID0gZXZlbnQgPT4ge1xyXG5cclxuXHRcdGNvbnN0IGNhbnZhc1NpemUgPSBfX2V4cG9ydC5zaXplXHJcblxyXG5cdFx0bGV0IGQgPSBnZW5lcmF0ZVNWR1BhdGhDb21tYW5kKHtcclxuXHRcdFx0c2l6ZTogICAgICAgICAgIHFyY29kZS5zaXplLFxyXG5cdFx0XHRzaGFwZXM6ICAgICAgICAgcXJjb2RlLnNoYXBlcyxcclxuXHRcdFx0cm91bmRDb3JuZXI6ICAgIHFyY29kZS5yb3VuZENvcm5lcixcclxuXHRcdFx0ZXllUm91bmRDb3JuZXI6IHFyY29kZS5leWVSb3VuZENvcm5lcixcclxuXHRcdFx0Y2FudmFzOiB7XHJcblx0XHRcdFx0c2l6ZTogY2FudmFzU2l6ZVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdGxldCBjb250ZW50ID1cclxuYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgJHtjYW52YXNTaXplfSAke2NhbnZhc1NpemV9XCI+XHJcbiR7d2luZG93LlNWR19DUkVESVRTfVxyXG4keyBfX2V4cG9ydC5leGNsdWRlQmFja2dyb3VuZCA/ICcnIDogYDxwYXRoIGQ9XCJNMCwwSCR7Y2FudmFzU2l6ZX1WJHtjYW52YXNTaXplfUgwelwiIGZpbGw9XCIke2FyclRvSFNMQShxcmNvZGUuYmFja2dyb3VuZENvbG9yKX1cIiAvPmB9XHJcbjxwYXRoIGQ9XCIke2R9XCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGZpbGw9XCIke2FyclRvSFNMQShxcmNvZGUuZm9yZWdyb3VuZENvbG9yKX1cIiAvPlxyXG48L3N2Zz5gLnJlcGxhY2UoL1xcbi9nLCAnJylcclxuXHJcblx0XHRuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChjb250ZW50KVxyXG5cclxuXHRcdGFsZXJ0LnB1c2goJ1NWRyBjb2RlIGNvcGllZCB0byBjbGlwYm9hcmQgIScpXHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIChcclxuXHRcdDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uLWRvd25sb2FkLXBuZ1wiPlxyXG5cdFx0XHQ8YnV0dG9uXHJcblx0XHRcdFx0Y2xhc3NOYW1lPVwibGFyZ2Ugb3JhbmdlXCJcclxuXHRcdFx0XHRvbkNsaWNrPXsgb25DbGlja0hhbmRsZXIgfVxyXG5cdFx0XHRcdGRpc2FibGVkPXsgIXFyY29kZS5pc1ZhbGlkIH1cclxuXHRcdFx0PlxyXG5cdFx0XHRcdFNWR1xyXG5cdFx0XHQ8L2J1dHRvbj5cclxuXHRcdDwvZGl2PlxyXG5cdClcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkNvcHlTVkdDb2RlIiwiaW1wb3J0IHsgaCwgcmVuZGVyIH0gZnJvbSAncHJlYWN0J1xyXG5cclxuaW1wb3J0IHsgY3ggfSBmcm9tICdAZW1vdGlvbi9jc3MnXHJcblxyXG5pbXBvcnQgQWxlcnRDb250YWluZXIgZnJvbSAnLi9jb250YWluZXJzL0FsZXJ0JztcclxuaW1wb3J0IFFSQ29kZSBmcm9tICcuL2NvbnRhaW5lcnMvUVJDb2RlJztcclxuaW1wb3J0IEV4cG9ydCBmcm9tICcuL2NvbnRhaW5lcnMvRXhwb3J0JztcclxuXHJcbmltcG9ydCBTZWN0aW9uTGluZSBmcm9tICcuL2NvbXBvbmVudHMvU2VjdGlvbkxpbmUnXHJcblxyXG5pbXBvcnQgQWxlcnQgZnJvbSAnLi9wYXJ0aWFscy9BbGVydCdcclxuaW1wb3J0IFByZXZpZXdRUkNvZGVDb250YWluZXIgZnJvbSAnLi9wYXJ0aWFscy9QcmV2aWV3UVJDb2RlQ29udGFpbmVyJ1xyXG5pbXBvcnQgUHJldmlld1FSQ29kZSBmcm9tICcuL3BhcnRpYWxzL1ByZXZpZXdRUkNvZGUnXHJcbmltcG9ydCBJbnB1dENvbnRlbnQgZnJvbSAnLi9wYXJ0aWFscy9JbnB1dENvbnRlbnQnXHJcbmltcG9ydCBPcHRpb25NYXJnaW4gZnJvbSAnLi9wYXJ0aWFscy9PcHRpb25NYXJnaW4nXHJcbmltcG9ydCBPcHRpb25TbW9vdGhuZXNzIGZyb20gJy4vcGFydGlhbHMvT3B0aW9uU21vb3RobmVzcydcclxuaW1wb3J0IENvbG9yUGlja2VyIGZyb20gJy4vcGFydGlhbHMvQ29sb3JQaWNrZXInXHJcbmltcG9ydCBFeHBvcnRTaXplIGZyb20gJy4vcGFydGlhbHMvRXhwb3J0U2l6ZSdcclxuaW1wb3J0IEV4Y2x1ZGViYWNrZ3JvdW5kIGZyb20gJy4vcGFydGlhbHMvRXhjbHVkZWJhY2tncm91bmQnXHJcbmltcG9ydCBCdXR0b25Eb3dubG9hZFBORyBmcm9tICcuL3BhcnRpYWxzL0J1dHRvbkRvd25sb2FkUE5HJ1xyXG5pbXBvcnQgQnV0dG9uRG93bmxvYWRTVkcgZnJvbSAnLi9wYXJ0aWFscy9CdXR0b25Eb3dubG9hZFNWRydcclxuaW1wb3J0IEJ1dHRvbkNvcHlTVkdDb2RlIGZyb20gJy4vcGFydGlhbHMvQnV0dG9uQ29weVNWR0NvZGUnXHJcblxyXG5pbXBvcnQgJy4vc3R5bGUubGVzcydcclxuXHJcblxyXG53aW5kb3cuU1ZHX0NSRURJVFMgPSAnPCEtLSBDcmVhdGUgYXQgZXhhbXBsZS5jb20gLS0+J1xyXG5cclxuXHJcbmNvbnN0IEFwcCA9ICgpID0+IChcclxuXHQ8ZGl2IGNsYXNzTmFtZT1cImxheW91dFwiPlxyXG5cdFx0PGRpdiBjbGFzc05hbWU9XCJsYXlvdXQtcHJldmlld1wiPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImxheW91dC1wcmV2aWV3LWNvbnRhaW5lclwiPlxyXG5cclxuXHRcdFx0XHQ8UHJldmlld1FSQ29kZUNvbnRhaW5lcj5cclxuXHRcdFx0XHRcdDxQcmV2aWV3UVJDb2RlIC8+XHJcblx0XHRcdFx0PC9QcmV2aWV3UVJDb2RlQ29udGFpbmVyPlxyXG5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQ8L2Rpdj5cclxuXHRcdDxkaXYgY2xhc3NOYW1lPVwibGF5b3V0LW9wdGlvbnNcIj5cclxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJsYXlvdXQtb3B0aW9ucy1jb250YWluZXJcIj5cclxuXHJcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJsYXlvdXQtb3B0aW9ucy1ib2R5XCI+XHJcblxyXG5cdFx0XHRcdFx0PFNlY3Rpb25MaW5lPlxyXG5cdFx0XHRcdFx0XHRDb250ZW50XHJcblx0XHRcdFx0XHQ8L1NlY3Rpb25MaW5lPlxyXG5cclxuXHRcdFx0XHRcdDxJbnB1dENvbnRlbnQgLz5cclxuXHJcblx0XHRcdFx0XHQ8U2VjdGlvbkxpbmU+XHJcblx0XHRcdFx0XHRcdFN0eWxlc1xyXG5cdFx0XHRcdFx0PC9TZWN0aW9uTGluZT5cclxuXHJcblx0XHRcdFx0XHQ8T3B0aW9uTWFyZ2luIC8+XHJcblxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJoLTE2XCIgLz5cclxuXHJcblx0XHRcdFx0XHQ8T3B0aW9uU21vb3RobmVzcyAvPlxyXG5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC0xNlwiIC8+XHJcblxyXG5cdFx0XHRcdFx0PENvbG9yUGlja2VyIC8+XHJcblxyXG5cdFx0XHRcdFx0ey8qXHJcblx0XHRcdFx0XHQ8ZGl2PlxyXG5cdFx0XHRcdFx0XHREYXJrIFRoZW1lXHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHJcblx0XHRcdFx0XHRNaW5vciBDbG91ZFxyXG5cdFx0XHRcdFx0UmFuZG9tXHJcblx0XHRcdFx0XHQqL31cclxuXHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtNFwiIC8+XHJcblxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImxheW91dC1vcHRpb25zLWZvb3RlclwiPlxyXG5cclxuXHRcdFx0XHRcdDxTZWN0aW9uTGluZT5cclxuXHRcdFx0XHRcdFx0RXhwb3J0XHJcblx0XHRcdFx0XHQ8L1NlY3Rpb25MaW5lPlxyXG5cclxuXHRcdFx0XHRcdDxFeHBvcnRTaXplIC8+XHJcblxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJoLThcIiAvPlxyXG5cclxuXHRcdFx0XHRcdDxFeGNsdWRlYmFja2dyb3VuZCAvPlxyXG5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC0yNFwiIC8+XHJcblxyXG5cdFx0XHRcdFx0PGxhYmVsPlxyXG5cdFx0XHRcdFx0XHQ8c3ZnIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiPlxyXG5cdFx0XHRcdFx0XHRcdDxwYXRoIGQ9XCJNMjE2IDBoODBjMTMuMyAwIDI0IDEwLjcgMjQgMjR2MTY4aDg3LjdjMTcuOCAwIDI2LjcgMjEuNSAxNC4xIDM0LjFMMjY5LjcgMzc4LjNjLTcuNSA3LjUtMTkuOCA3LjUtMjcuMyAwTDkwLjEgMjI2LjFjLTEyLjYtMTIuNi0zLjctMzQuMSAxNC4xLTM0LjFIMTkyVjI0YzAtMTMuMyAxMC43LTI0IDI0LTI0em0yOTYgMzc2djExMmMwIDEzLjMtMTAuNyAyNC0yNCAyNEgyNGMtMTMuMyAwLTI0LTEwLjctMjQtMjRWMzc2YzAtMTMuMyAxMC43LTI0IDI0LTI0aDE0Ni43bDQ5IDQ5YzIwLjEgMjAuMSA1Mi41IDIwLjEgNzIuNiAwbDQ5LTQ5SDQ4OGMxMy4zIDAgMjQgMTAuNyAyNCAyNHptLTEyNCA4OGMwLTExLTktMjAtMjAtMjBzLTIwIDktMjAgMjAgOSAyMCAyMCAyMCAyMC05IDIwLTIwem02NCAwYzAtMTEtOS0yMC0yMC0yMHMtMjAgOS0yMCAyMCA5IDIwIDIwIDIwIDIwLTkgMjAtMjB6XCIvPlxyXG5cdFx0XHRcdFx0XHQ8L3N2Zz5cclxuXHRcdFx0XHRcdFx0RG93bmxvYWRcclxuXHRcdFx0XHRcdDwvbGFiZWw+XHJcblxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJoLTEyXCIgLz5cclxuXHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImYtMVwiPlxyXG5cdFx0XHRcdFx0XHRcdDxCdXR0b25Eb3dubG9hZFBORyAvPlxyXG5cdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJ3LTE2IG53LTE2XCIgLz5cclxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmLTFcIj5cclxuXHRcdFx0XHRcdFx0XHQ8QnV0dG9uRG93bmxvYWRTVkcgLz5cclxuXHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImgtMTZcIiAvPlxyXG5cclxuXHRcdFx0XHRcdDxsYWJlbD5cclxuXHRcdFx0XHRcdFx0PHN2ZyB2aWV3Qm94PVwiMCAwIDY0MCA1MTJcIj5cclxuXHRcdFx0XHRcdFx0XHQ8cGF0aCBkPVwiTTI3OC45IDUxMS41bC02MS0xNy43Yy02LjQtMS44LTEwLTguNS04LjItMTQuOUwzNDYuMiA4LjdjMS44LTYuNCA4LjUtMTAgMTQuOS04LjJsNjEgMTcuN2M2LjQgMS44IDEwIDguNSA4LjIgMTQuOUwyOTMuOCA1MDMuM2MtMS45IDYuNC04LjUgMTAuMS0xNC45IDguMnptLTExNC0xMTIuMmw0My41LTQ2LjRjNC42LTQuOSA0LjMtMTIuNy0uOC0xNy4yTDExNyAyNTZsOTAuNi03OS43YzUuMS00LjUgNS41LTEyLjMuOC0xNy4ybC00My41LTQ2LjRjLTQuNS00LjgtMTIuMS01LjEtMTctLjVMMy44IDI0Ny4yYy01LjEgNC43LTUuMSAxMi44IDAgMTcuNWwxNDQuMSAxMzUuMWM0LjkgNC42IDEyLjUgNC40IDE3LS41em0zMjcuMi42bDE0NC4xLTEzNS4xYzUuMS00LjcgNS4xLTEyLjggMC0xNy41TDQ5Mi4xIDExMi4xYy00LjgtNC41LTEyLjQtNC4zLTE3IC41TDQzMS42IDE1OWMtNC42IDQuOS00LjMgMTIuNy44IDE3LjJMNTIzIDI1NmwtOTAuNiA3OS43Yy01LjEgNC41LTUuNSAxMi4zLS44IDE3LjJsNDMuNSA0Ni40YzQuNSA0LjkgMTIuMSA1LjEgMTcgLjZ6XCIvPlxyXG5cdFx0XHRcdFx0XHQ8L3N2Zz5cclxuXHRcdFx0XHRcdFx0Q29weSBDb2RlXHJcblx0XHRcdFx0XHQ8L2xhYmVsPlxyXG5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiaC0xMlwiIC8+XHJcblxyXG5cdFx0XHRcdFx0PEJ1dHRvbkNvcHlTVkdDb2RlIC8+XHJcblxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvZGl2PlxyXG5cdDwvZGl2PlxyXG4pXHJcblxyXG5cclxuY29uc3QgYXV0aCA9ICgpID0+IHtcclxuXHRpZihwcm9jZXNzLmVudi5OT0RFX0VOViA9PSAnZGV2ZWxvcG1lbnQnKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIGxvY2F0aW9uLnByb3RvY29sID09ICdodHRwOicgfHwgbG9jYXRpb24ucHJvdG9jb2wgPT0gJ2h0dHBzOidcclxuXHR9XHJcbn1cclxuXHJcblxyXG5yZW5kZXIoXHJcblx0YXV0aCgpID8gKFxyXG5cdFx0PEFsZXJ0Q29udGFpbmVyLlByb3ZpZGVyPlxyXG5cdFx0XHQ8UVJDb2RlLlByb3ZpZGVyPlxyXG5cdFx0XHRcdDxFeHBvcnQuUHJvdmlkZXI+XHJcblx0XHRcdFx0XHQ8QWxlcnQgLz5cclxuXHRcdFx0XHRcdDxBcHAgLz5cclxuXHRcdFx0XHQ8L0V4cG9ydC5Qcm92aWRlcj5cclxuXHRcdFx0PC9RUkNvZGUuUHJvdmlkZXI+XHJcblx0XHQ8L0FsZXJ0Q29udGFpbmVyLlByb3ZpZGVyPlxyXG5cdCkgOiAoXHJcblx0XHQ8ZGl2IGNsYXNzTmFtZT1cImFwcC1lcnJvclwiPlxyXG5cdFx0XHRPb3BzISBTb21ldGhpbmcgd2VudCB3cm9uZyFcclxuXHRcdDwvZGl2PlxyXG5cdCksXHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FwcCcpXHJcbikiXSwibmFtZXMiOlsiZGlqa3N0cmEiLCJzaW5nbGVfc291cmNlX3Nob3J0ZXN0X3BhdGhzIiwiZ3JhcGgiLCJzIiwiZCIsInByZWRlY2Vzc29ycyIsImNvc3RzIiwiY2xvc2VzdCIsInUiLCJ2IiwiY29zdF9vZl9zX3RvX3UiLCJhZGphY2VudF9ub2RlcyIsImNvc3Rfb2Zfc190b191X3BsdXNfY29zdF9vZl9lIiwiY29zdF9vZl9zX3RvX3YiLCJvcGVuIiwiUHJpb3JpdHlRdWV1ZSIsIm1ha2UiLCJwdXNoIiwiZW1wdHkiLCJwb3AiLCJ2YWx1ZSIsImNvc3QiLCJoYXNPd25Qcm9wZXJ0eSIsIm1zZyIsImpvaW4iLCJFcnJvciIsImV4dHJhY3Rfc2hvcnRlc3RfcGF0aF9mcm9tX3ByZWRlY2Vzc29yX2xpc3QiLCJub2RlcyIsInJldmVyc2UiLCJmaW5kX3BhdGgiLCJvcHRzIiwia2V5IiwiVCIsInQiLCJxdWV1ZSIsInNvcnRlciIsImRlZmF1bHRfc29ydGVyIiwiYSIsImIiLCJpdGVtIiwidGhpcyIsInNvcnQiLCJzaGlmdCIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbnB1dCIsInJlc3VsdCIsInNpemUiLCJpbmRleCIsInBvaW50IiwiY2hhckNvZGVBdCIsInNlY29uZCIsIlVpbnQ4QXJyYXkiLCJidWZmZXIiLCJDIiwibiIsImUiLCJTIiwiciIsIkUiLCJwcm9wcyIsImciLCJyZWYiLCJjYWxsIiwiY3VycmVudCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImRpc3BsYXlOYW1lIiwibmFtZSIsInByb3RvdHlwZSIsImlzUmVhY3RDb21wb25lbnQiLCJfX2YiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInN0YXRlIiwidyIsInR5cGUiLCJSIiwiU3ltYm9sIiwiZm9yIiwieCIsIiQkdHlwZW9mIiwicmVuZGVyIiwiTiIsIm1hcCIsImsiLCJmb3JFYWNoIiwiY291bnQiLCJvbmx5IiwidG9BcnJheSIsIkEiLCJ0aGVuIiwibyIsIl9fIiwiX19jIiwiX19lIiwiX19rIiwiTyIsIkwiLCJfX3UiLCJfX2IiLCJVIiwiRiIsImRlZmF1bHQiLCJNIiwiX19SIiwiX19oIiwiX192IiwiaSIsImwiLCJfX1AiLCJpbnNlcnRCZWZvcmUiLCJfX2QiLCJfX08iLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiZiIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiX19IIiwiZmFsbGJhY2siLCJjaGlsZHJlbiIsImRlbGV0ZSIsInJldmVhbE9yZGVyIiwiRCIsImdldENoaWxkQ29udGV4dCIsImNvbnRleHQiLCJJIiwibm9kZVR5cGUiLCJwYXJlbnROb2RlIiwiY2hpbGROb2RlcyIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzcGxpY2UiLCJpbmRleE9mIiwiVyIsImdldCIsIk1hcCIsInNldCIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudERpZE1vdW50IiwiUCIsIlYiLCJqIiwieiIsInRlc3QiLCJCIiwidGV4dENvbnRlbnQiLCIkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkgiLCJaIiwiWSIsImNhbmNlbEJ1YmJsZSIsInEiLCJkZWZhdWx0UHJldmVudGVkIiwicGVyc2lzdCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNEZWZhdWx0UHJldmVudGVkIiwibmF0aXZlRXZlbnQiLCJHIiwiSiIsImNsYXNzIiwiSyIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIm11bHRpcGxlIiwiQXJyYXkiLCJpc0FycmF5Iiwic2VsZWN0ZWQiLCJkZWZhdWx0VmFsdWUiLCJjbGFzc05hbWUiLCJlbnVtZXJhYmxlIiwiUSIsIlgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwicmVhZENvbnRleHQiLCJfX24iLCJubiIsInRuIiwiZW4iLCJybiIsImFyZ3VtZW50cyIsInVuIiwib24iLCJiYXNlIiwibG4iLCJmbiIsImNuIiwidXNlU3RhdGUiLCJ1c2VSZWR1Y2VyIiwidXNlRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlUmVmIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZU1lbW8iLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidmVyc2lvbiIsIkNoaWxkcmVuIiwiaHlkcmF0ZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVDb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNsb25lRWxlbWVudCIsImNyZWF0ZVJlZiIsIkZyYWdtZW50IiwiaXNWYWxpZEVsZW1lbnQiLCJmaW5kRE9NTm9kZSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJtZW1vIiwiZm9yd2FyZFJlZiIsImZsdXNoU3luYyIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiU3VzcGVuc2VMaXN0IiwibGF6eSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiYyIsImgiLCJkZWZhdWx0UHJvcHMiLCJ5IiwiY29uc3RydWN0b3IiLCJ2bm9kZSIsInAiLCJfIiwibSIsIl9fciIsImRlYm91bmNlUmVuZGVyaW5nIiwic29tZSIsIm93bmVyU1ZHRWxlbWVudCIsIm5leHRTaWJsaW5nIiwic2V0UHJvcGVydHkiLCJzdHlsZSIsImNzc1RleHQiLCJzbGljZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCJjb250ZXh0VHlwZSIsIl9fRSIsInN1YiIsIl9fcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJkaWZmZWQiLCJsb2NhbE5hbWUiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsImlzIiwiZGF0YSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiYXR0cmlidXRlcyIsIl9faHRtbCIsImlubmVySFRNTCIsImNoZWNrZWQiLCJ1bm1vdW50IiwiZmlyc3RDaGlsZCIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIlByb21pc2UiLCJiaW5kIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJjb25jYXQiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZpbHRlciIsImNhblByb21pc2UiLCJRUkNvZGUiLCJDYW52YXNSZW5kZXJlciIsIlN2Z1JlbmRlcmVyIiwicmVuZGVyQ2FudmFzIiwicmVuZGVyRnVuYyIsImNhbnZhcyIsInRleHQiLCJjYiIsImFyZ3MiLCJhcmdzTnVtIiwiaXNMYXN0QXJnQ2IiLCJ1bmRlZmluZWQiLCJnZXRDb250ZXh0IiwicmVqZWN0IiwiY3JlYXRlIiwidG9DYW52YXMiLCJ0b0RhdGFVUkwiLCJyZW5kZXJUb0RhdGFVUkwiLCJ0b1N0cmluZyIsImdldFN5bWJvbFNpemUiLCJnZXRSb3dDb2xDb29yZHMiLCJwb3NDb3VudCIsIk1hdGgiLCJmbG9vciIsImludGVydmFscyIsImNlaWwiLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbnMiLCJjb29yZHMiLCJwb3MiLCJwb3NMZW5ndGgiLCJNb2RlIiwiQUxQSEFfTlVNX0NIQVJTIiwiQWxwaGFudW1lcmljRGF0YSIsIm1vZGUiLCJBTFBIQU5VTUVSSUMiLCJnZXRCaXRzTGVuZ3RoIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJwdXQiLCJCaXRCdWZmZXIiLCJidWZJbmRleCIsIm51bSIsInB1dEJpdCIsImdldExlbmd0aEluQml0cyIsImJpdCIsIkJpdE1hdHJpeCIsInJlc2VydmVkQml0Iiwicm93IiwiY29sIiwicmVzZXJ2ZWQiLCJ4b3IiLCJpc1Jlc2VydmVkIiwiZW5jb2RlVXRmOCIsIkJ5dGVEYXRhIiwiQllURSIsIkVDTGV2ZWwiLCJFQ19CTE9DS1NfVEFCTEUiLCJFQ19DT0RFV09SRFNfVEFCTEUiLCJnZXRCbG9ja3NDb3VudCIsImVycm9yQ29ycmVjdGlvbkxldmVsIiwiZ2V0VG90YWxDb2Rld29yZHNDb3VudCIsImlzVmFsaWQiLCJsZXZlbCIsImZyb20iLCJzdHJpbmciLCJmcm9tU3RyaW5nIiwiVXRpbHMiLCJHMTVfQkNIIiwiZ2V0QkNIRGlnaXQiLCJnZXRFbmNvZGVkQml0cyIsIm1hc2siLCJFWFBfVEFCTEUiLCJMT0dfVEFCTEUiLCJsb2ciLCJleHAiLCJtdWwiLCJLYW5qaURhdGEiLCJLQU5KSSIsInRvU0pJUyIsIlBhdHRlcm5zIiwiUEFUVEVSTjAwMCIsIlBBVFRFUk4wMDEiLCJQQVRURVJOMDEwIiwiUEFUVEVSTjAxMSIsIlBBVFRFUk4xMDAiLCJQQVRURVJOMTAxIiwiUEFUVEVSTjExMCIsIlBBVFRFUk4xMTEiLCJQZW5hbHR5U2NvcmVzIiwiZ2V0TWFza0F0IiwibWFza1BhdHRlcm4iLCJpc05hTiIsInBhcnNlSW50IiwiZ2V0UGVuYWx0eU4xIiwicG9pbnRzIiwic2FtZUNvdW50Q29sIiwic2FtZUNvdW50Um93IiwibGFzdENvbCIsImxhc3RSb3ciLCJnZXRQZW5hbHR5TjIiLCJsYXN0IiwiZ2V0UGVuYWx0eU4zIiwiYml0c0NvbCIsImJpdHNSb3ciLCJnZXRQZW5hbHR5TjQiLCJkYXJrQ291bnQiLCJtb2R1bGVzQ291bnQiLCJhYnMiLCJhcHBseU1hc2siLCJwYXR0ZXJuIiwiZ2V0QmVzdE1hc2siLCJzZXR1cEZvcm1hdEZ1bmMiLCJudW1QYXR0ZXJucyIsImtleXMiLCJiZXN0UGF0dGVybiIsImxvd2VyUGVuYWx0eSIsIkluZmluaXR5IiwicGVuYWx0eSIsIlZlcnNpb25DaGVjayIsIlJlZ2V4IiwiTlVNRVJJQyIsImlkIiwiY2NCaXRzIiwiTUlYRUQiLCJnZXRDaGFyQ291bnRJbmRpY2F0b3IiLCJnZXRCZXN0TW9kZUZvckRhdGEiLCJkYXRhU3RyIiwidGVzdE51bWVyaWMiLCJ0ZXN0QWxwaGFudW1lcmljIiwidGVzdEthbmppIiwiTnVtZXJpY0RhdGEiLCJncm91cCIsInN1YnN0ciIsInJlbWFpbmluZ051bSIsIkdGIiwicDEiLCJwMiIsImNvZWZmIiwibW9kIiwiZGl2aWRlbnQiLCJkaXZpc29yIiwib2Zmc2V0IiwiZ2VuZXJhdGVFQ1BvbHlub21pYWwiLCJkZWdyZWUiLCJwb2x5IiwiQWxpZ25tZW50UGF0dGVybiIsIkZpbmRlclBhdHRlcm4iLCJNYXNrUGF0dGVybiIsIkVDQ29kZSIsIlJlZWRTb2xvbW9uRW5jb2RlciIsIlZlcnNpb24iLCJGb3JtYXRJbmZvIiwiU2VnbWVudHMiLCJzZXR1cEZvcm1hdEluZm8iLCJtYXRyaXgiLCJiaXRzIiwiY3JlYXRlRGF0YSIsInNlZ21lbnRzIiwiZGF0YVRvdGFsQ29kZXdvcmRzQml0cyIsImdldFN5bWJvbFRvdGFsQ29kZXdvcmRzIiwicmVtYWluaW5nQnl0ZSIsInRvdGFsQ29kZXdvcmRzIiwiZWNUb3RhbENvZGV3b3JkcyIsImRhdGFUb3RhbENvZGV3b3JkcyIsImVjVG90YWxCbG9ja3MiLCJibG9ja3NJbkdyb3VwMSIsInRvdGFsQ29kZXdvcmRzSW5Hcm91cDEiLCJkYXRhQ29kZXdvcmRzSW5Hcm91cDEiLCJkYXRhQ29kZXdvcmRzSW5Hcm91cDIiLCJlY0NvdW50IiwicnMiLCJkY0RhdGEiLCJlY0RhdGEiLCJtYXhEYXRhU2l6ZSIsImRhdGFTaXplIiwiZW5jb2RlIiwibWF4IiwiY3JlYXRlQ29kZXdvcmRzIiwiY3JlYXRlU3ltYm9sIiwiZnJvbUFycmF5IiwiZXN0aW1hdGVkVmVyc2lvbiIsInJhd1NlZ21lbnRzIiwicmF3U3BsaXQiLCJnZXRCZXN0VmVyc2lvbkZvckRhdGEiLCJiZXN0VmVyc2lvbiIsImRhdGFCaXRzIiwibW9kdWxlQ291bnQiLCJtb2R1bGVzIiwic2V0dXBGaW5kZXJQYXR0ZXJuIiwic2V0dXBUaW1pbmdQYXR0ZXJuIiwic2V0dXBBbGlnbm1lbnRQYXR0ZXJuIiwic2V0dXBWZXJzaW9uSW5mbyIsImluYyIsImJpdEluZGV4IiwiYnl0ZUluZGV4IiwiZGFyayIsInNldHVwRGF0YSIsIm9wdGlvbnMiLCJ0b1NKSVNGdW5jIiwic2V0VG9TSklTRnVuY3Rpb24iLCJQb2x5bm9taWFsIiwiZ2VuUG9seSIsImluaXRpYWxpemUiLCJwYWRkZWREYXRhIiwicmVtYWluZGVyIiwic3RhcnQiLCJidWZmIiwibnVtZXJpYyIsImthbmppIiwiYnl0ZSIsIlJlZ0V4cCIsIkJZVEVfS0FOSkkiLCJURVNUX0tBTkpJIiwiVEVTVF9OVU1FUklDIiwiVEVTVF9BTFBIQU5VTUVSSUMiLCJzdHIiLCJnZXRTdHJpbmdCeXRlTGVuZ3RoIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXRTZWdtZW50cyIsInJlZ2V4IiwiZXhlYyIsImdldFNlZ21lbnRzRnJvbVN0cmluZyIsIm51bVNlZ3MiLCJhbHBoYU51bVNlZ3MiLCJieXRlU2VncyIsImthbmppU2VncyIsImlzS2FuamlNb2RlRW5hYmxlZCIsInMxIiwiczIiLCJvYmoiLCJnZXRTZWdtZW50Qml0c0xlbmd0aCIsImJ1aWxkU2luZ2xlU2VnbWVudCIsIm1vZGVzSGludCIsImJlc3RNb2RlIiwiYXJyYXkiLCJyZWR1Y2UiLCJhY2MiLCJzZWciLCJzZWdzIiwiYnVpbGROb2RlcyIsInRhYmxlIiwicHJldk5vZGVJZHMiLCJub2RlR3JvdXAiLCJjdXJyZW50Tm9kZUlkcyIsIm5vZGUiLCJsYXN0Q291bnQiLCJwcmV2Tm9kZUlkIiwiZW5kIiwiYnVpbGRHcmFwaCIsInBhdGgiLCJvcHRpbWl6ZWRTZWdzIiwiY3VyciIsInByZXZTZWciLCJtZXJnZVNlZ21lbnRzIiwidG9TSklTRnVuY3Rpb24iLCJDT0RFV09SRFNfQ09VTlQiLCJkaWdpdCIsIkcxOF9CQ0giLCJnZXRSZXNlcnZlZEJpdHNDb3VudCIsImdldFRvdGFsQml0c0Zyb21EYXRhQXJyYXkiLCJ0b3RhbEJpdHMiLCJyZXNlcnZlZEJpdHMiLCJnZXRDYXBhY2l0eSIsInVzYWJsZUJpdHMiLCJlY2wiLCJjdXJyZW50VmVyc2lvbiIsImdldEJlc3RWZXJzaW9uRm9yTWl4ZWREYXRhIiwiZ2V0QmVzdFZlcnNpb25Gb3JEYXRhTGVuZ3RoIiwicXJEYXRhIiwiY2FudmFzRWwiLCJnZXRDYW52YXNFbGVtZW50IiwiZ2V0T3B0aW9ucyIsImdldEltYWdlV2lkdGgiLCJjdHgiLCJpbWFnZSIsImNyZWF0ZUltYWdlRGF0YSIsInFyVG9JbWFnZURhdGEiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsImNsZWFyQ2FudmFzIiwicHV0SW1hZ2VEYXRhIiwicmVuZGVyZXJPcHRzIiwicXVhbGl0eSIsImdldENvbG9yQXR0cmliIiwiY29sb3IiLCJhdHRyaWIiLCJhbHBoYSIsImhleCIsInRvRml4ZWQiLCJzdmdDbWQiLCJjbWQiLCJxcmNvZGVzaXplIiwibWFyZ2luIiwiYmciLCJsaWdodCIsIm1vdmVCeSIsIm5ld1JvdyIsImxpbmVMZW5ndGgiLCJxclRvUGF0aCIsInZpZXdCb3giLCJzdmdUYWciLCJoZXgycmdiYSIsImhleENvZGUiLCJzcGxpdCIsImFwcGx5IiwiaGV4VmFsdWUiLCJzY2FsZSIsImdldFNjYWxlIiwicXJTaXplIiwiaW1nRGF0YSIsInFyIiwic3ltYm9sU2l6ZSIsInNjYWxlZE1hcmdpbiIsInBhbGV0dGUiLCJwb3NEc3QiLCJweENvbG9yIiwiX3JlYWN0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiYXJyMiIsInVzZVRocm90dGxlZEVmZmVjdCIsImNhbGxiYWNrIiwiZGVsYXkiLCJkZXBzIiwibGFzdFJhbiIsIkRhdGUiLCJub3ciLCJoYW5kbGVyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJwcm9wIiwidG9TdHJpbmdUYWciLCJTdHlsZVNoZWV0IiwiX3RoaXMiLCJfaW5zZXJ0VGFnIiwidGFnIiwiYmVmb3JlIiwidGFncyIsImluc2VydGlvblBvaW50IiwicHJlcGVuZCIsImNvbnRhaW5lciIsImlzU3BlZWR5Iiwic3BlZWR5IiwiY3RyIiwibm9uY2UiLCJfcHJvdG8iLCJpbnNlcnQiLCJydWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNoZWV0Rm9yVGFnIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiZmx1c2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhc3NpZ24iLCJ0cmltIiwicmVwbGFjZW1lbnQiLCJpbmRleG9mIiwic2VhcmNoIiwiYmVnaW4iLCJsaW5lIiwiY29sdW1uIiwicG9zaXRpb24iLCJjaGFyYWN0ZXIiLCJjaGFyYWN0ZXJzIiwicm9vdCIsInBhcmVudCIsInJldHVybiIsImNvcHkiLCJwcmV2IiwibmV4dCIsInBlZWsiLCJjYXJldCIsInRva2VuIiwiYWxsb2MiLCJkZWFsbG9jIiwiZGVsaW1pdCIsImRlbGltaXRlciIsIndoaXRlc3BhY2UiLCJlc2NhcGluZyIsImNvbW1lbnRlciIsImlkZW50aWZpZXIiLCJNUyIsIk1PWiIsIldFQktJVCIsIkNPTU1FTlQiLCJERUNMQVJBVElPTiIsIktFWUZSQU1FUyIsInNlcmlhbGl6ZSIsIm91dHB1dCIsInN0cmluZ2lmeSIsImVsZW1lbnQiLCJwcmVmaXgiLCJoYXNoIiwiY29tcGlsZSIsInBhcnNlIiwicnVsZXMiLCJydWxlc2V0cyIsInBzZXVkbyIsImRlY2xhcmF0aW9ucyIsImF0cnVsZSIsInByb3BlcnR5IiwicHJldmlvdXMiLCJ2YXJpYWJsZSIsInNjYW5uaW5nIiwiYW1wZXJzYW5kIiwicmVmZXJlbmNlIiwiY29tbWVudCIsImRlY2xhcmF0aW9uIiwicnVsZXNldCIsInBvc3QiLCJpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmciLCJnZXRSdWxlcyIsInBhcnNlZCIsInRvUnVsZXMiLCJmaXhlZEVsZW1lbnRzIiwiV2Vha01hcCIsImNvbXBhdCIsImlzSW1wbGljaXRSdWxlIiwicGFyZW50UnVsZXMiLCJyZW1vdmVMYWJlbCIsImRlZmF1bHRTdHlsaXNQbHVnaW5zIiwibWF0Y2giLCJzc3JTdHlsZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2V0QXR0cmlidXRlIiwiaGVhZCIsInN0eWxpc1BsdWdpbnMiLCJfaW5zZXJ0IiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImN1cnJlbnRTaGVldCIsImNvbGxlY3Rpb24iLCJmaW5hbGl6aW5nUGx1Z2lucyIsInNlcmlhbGl6ZXIiLCJzZWxlY3RvciIsInNlcmlhbGl6ZWQiLCJzaG91bGRDYWNoZSIsInN0eWxlcyIsImNhY2hlIiwicmVnaXN0ZXJlZCIsImxlbiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiV2Via2l0TGluZUNsYW1wIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiYXJnIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJjdXJzb3IiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwibWVyZ2VkUHJvcHMiLCJpbnRlcnBvbGF0aW9uIiwiX19lbW90aW9uX3N0eWxlcyIsImFuaW0iLCJfa2V5IiwiaW50ZXJwb2xhdGVkIiwiX2kiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJzZXJpYWxpemVTdHlsZXMiLCJzdHJpbmdNb2RlIiwic3RyaW5ncyIsInJhdyIsImxhc3RJbmRleCIsImlkZW50aWZpZXJOYW1lIiwiZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiaW5zZXJ0U3R5bGVzIiwiaXNTdHJpbmdUYWciLCJyZWdpc3RlclN0eWxlcyIsImluc2VydFdpdGhvdXRTY29waW5nIiwibWVyZ2UiLCJjc3MiLCJjbGFzc25hbWVzIiwiY2xzIiwidG9BZGQiLCJfbGVuIiwiY3giLCJfbGVuNCIsIl9rZXk0IiwiaW5qZWN0R2xvYmFsIiwiX2xlbjMiLCJfa2V5MyIsImtleWZyYW1lcyIsIl9sZW4yIiwiX2tleTIiLCJhbmltYXRpb24iLCJpZHMiLCJfY3JlYXRlRW1vdGlvbiIsImNyZWF0ZUNvbnRhaW5lciIsInVzZUhvb2siLCJDb250ZXh0IiwiaW5pdGlhbFN0YXRlIiwidXNlQ29udGFpbmVyIiwidXBkYXRlUmVkdWNlciIsInVzZVVwZGF0ZSIsImluaXRpYWxpemVWYWx1ZSIsInVwZGF0ZSIsInRhcmdldCIsInJlY2VpdmVyIiwiUmVmbGVjdCIsIlByb3h5IiwidXNlV2lzZVN0YXRlIiwiY2FsbGJhY2tzIiwicmVnaXN0ZXIiLCJtZXNzYWdlIiwiZGlmZiIsIkQ0IiwiRDgiLCJJTFAiLCJCTE9DS19EQVRBX1dISVRFIiwiRVJST1JfQ09SUkVDVElPTiIsInFyY29kZSIsImNvbnRlbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJzaGFwZXMiLCJyb3VuZENvcm5lciIsImV5ZVJvdW5kQ29ybmVyIiwiZm9yZWdyb3VuZENvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiZGF0YU1vZHVsZSIsIlFSQ29kZU0iLCJyYXdTaXplIiwicmF3RGF0YSIsImJsb2NrcyIsIl94IiwiX3kiLCJncm91cEluZGV4IiwiYmxvY2tHcm91cHMiLCJibG9ja0dyb3VwSW5kZXgiLCJtYXJnaW5CbG9ja3MiLCJpc0dyb3VwZWQiLCJncm91cElzbGFuZCIsImJsb2NrR3JvdXAiLCJkaXJlY3Rpb25zIiwiaXNDbG9zZUxvb3AiLCJsYXN0UG9pbnQiLCJsYXN0TGluZURpcmVjdGlvbiIsIlRCMyIsIk5EIiwiTkREIiwidGVzdEJsb2NrIiwibngiLCJueSIsIngxIiwieTEiLCJ4MiIsInkyIiwibmVhcmJ5QmxvY2tYIiwibmVhcmJ5QmxvY2tZIiwibGQiLCJpc0V5ZSIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJtaW4iLCJwb2ludFR5cGVzIiwiZXhjbHVkZUJhY2tncm91bmQiLCJlZmZlY3QiLCJhbGVydCIsIkFsZXJ0Q29udGluZXIiLCJtZXNzYWdlcyIsInVzZUVmZmVjdE9uY2UiLCJlbFdyYXBwZXIiLCJzZXRTaXplIiwiY2xhc3NMaXN0IiwiYWRkIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJyZW1vdmUiLCJvbldpbmRvd1Jlc2l6ZSIsIndpbmRvdyIsIm5vcm1hbGl6ZSIsImFtYXgiLCJyYXRpbyIsInAzIiwibngxIiwibnkxIiwibngyIiwibnkyIiwieDMiLCJ5MyIsIm14MSIsIm15MSIsIm14MiIsIm15MiIsImdlbmVyYXRlU1ZHUGF0aENvbW1hbmQiLCJhcnJUb0hTTEEiLCJmaWxsIiwidXNlV2lzZVJlZiIsImRlZmF1bHRGb3JtRGF0YSIsIm9uSW5wdXRDaGFuZ2VIYW5kbGVyIiwic2F2ZUZvcm1EYXRhIiwiZm9jdXMiLCJhbHQiLCJ0ZXh0X19zZXQiLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwibGluayIsImxpbmtfX3NldCIsInRydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJkZWZhdWx0Q2hlY2tlZCIsIm9uQ2xpY2tJbnNpZGUiLCJvbkNsaWNrT3V0c2lkZSIsIm9uR2xvYmFsQ2xpY2siLCJjb250YWlucyIsInRvZ2dsZSIsInRvZ2dsZU5vZGUiLCJzZWFyY2hJbnB1dCIsInNldFZhbHVlIiwic2V0T3B0aW9ucyIsImlzRm9jdXMiLCJzZXRJc0ZvY3VzIiwib25JbnB1dENoYW5nZSIsInN0b3BQcm9wYWdhdGlvbiIsIl9fdmFsdWUiLCJ1cGRhdGVPcHRpb25zIiwic2VhcmNoVmFsdWUiLCJvcHRpb24iLCJrZXl3b3JkcyIsImtleXdvcmQiLCJ1c2VDbGlja0lPIiwiZmluZCIsImxhYmVsIiwic3NpZCIsInBhc3N3b3JkIiwiZW5jcnlwdGlvbiIsImhpZGUiLCJzc2lkX19zZXQiLCJJbnB1dERyb3Bkb3duIiwiZW5jcnlwdGlvbl9fc2V0IiwiaGlkZV9fc2V0Iiwic291cmNlIiwiYXBpIiwiaW5pdCIsImNvbnZlcnRlciIsImRlZmF1bHRBdHRyaWJ1dGVzIiwiZXhwaXJlcyIsInRvVVRDU3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwic3RyaW5naWZpZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlTmFtZSIsImNvb2tpZSIsImNvb2tpZXMiLCJqYXIiLCJwYXJ0cyIsImZvdW5kS2V5IiwicmVhZCIsIndpdGhBdHRyaWJ1dGVzIiwid2l0aENvbnZlcnRlciIsImZyZWV6ZSIsImRpYWxDb2RlIiwibnVtYmVyIiwiX19kaWFsQ29kZSIsIkNvb2tpZSIsImNvdW50cnkiLCJkaWFsQ291bnRyeUNvZGUiLCJjb2RlIiwidG9VcHBlckNhc2UiLCJjb3VudHJ5Q29kZSIsImRpYWxfY29kZSIsImZldGNoIiwicmVzcG9uc2UiLCJqc29uIiwicmVhZE9ubHkiLCJudW1iZXJfX3NldCIsInNyYyIsImRpYWxDb2RlX19zZXQiLCJ1c2VEZWJvdW5jZSIsIm1zIiwiX2EiLCJyZWFkeSIsInRpbWVvdXQiLCJpc1JlYWR5IiwiY2xlYXIiLCJ1c2VUaW1lb3V0Rm4iLCJjYW5jZWwiLCJyZXNldCIsInJhdGlvcyIsInJhdGlvUGVyY2VudGFnZSIsInF1ZXJ5IiwicHJldmlld191cmwiLCJwbGFjZSIsInBsYWNlX19zZXQiLCJBc3BlY3RSYXRpbyIsImZyYW1lQm9yZGVyIiwidGVtcGxhdGUiLCJjdXJyZW5jeSIsImFkZHJlc3MiLCJhbW91bnQiLCJYUlAiLCJjdXJyZW5jaWVzIiwic3ltYm9sIiwiY3VycmVuY3lfb3B0aW9ucyIsImJ0YyIsImN1cnJlbmN5X19zZXQiLCJhZGRyZXNzX19zZXQiLCJOdW1iZXIiLCJkYXRhVHlwZXMiLCJmb3JtIiwiVGV4dCIsIkxpbmsiLCJXaWZpIiwiUGhvbmUiLCJMb2NhdGlvbiIsIkNyeXB0byIsImZvcm1EYXRhIiwic2V0VHlwZSIsIkZvcm0iLCJvblNhdmVGb3JtRGF0YSIsIl9fZm9ybURhdGEiLCJvbkNsaWNrIiwibGltaXQiLCJyb3VuZCIsInJlbWFwIiwiaW5NaW4iLCJpbk1heCIsIm91dE1pbiIsIm91dE1heCIsImdldEFic09mZnNldCIsInRvcCIsImxlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0UGFyZW50Iiwic2xpZGVyIiwic3RlcCIsInJhbmdlIiwicHZhbHVlIiwib25Nb3VzZURvd24iLCJwcmV2ZW50RGVmYXVsdCIsInNsaWRlclgiLCJzbGlkZXJXIiwibW91c2VYIiwidG91Y2hlcyIsInBhZ2VYIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoU3RhcnQiLCJzbGlkZXJCYWNrZ3JvdW5kIiwiYmFja2dyb3VuZCIsInNsaWRlcl9fc2V0IiwiYXhpcyIsIm1hcmdpbl9fc2V0IiwidmFsdWVfX3NldCIsImhzbDJoc3YiLCJJbnB1dE51bWJlciIsInBvc3RmaXgiLCJwcmV2aWV3Iiwic3dhdGNoZXMiLCJpc0ZvY3VzU3dhdGNoZXMiLCJzd2F0Y2hlc1NlbGVjdGlvblgiLCJzd2F0Y2hlc1NlbGVjdGlvblkiLCJtb3VzZVkiLCJwYWdlWSIsInN3YXRjaGVzT2Zmc2V0Iiwic3dhdGNoZXNYIiwic3dhdGNoZXNZIiwic3dhdGNoZXNXIiwic3dhdGNoZXNIIiwiaHNsIiwiaHN2MmhzbCIsImhzdiIsImVsIiwiaW5SaWdodCIsInN3YXRjaGVzX19zZXQiLCJoX19zZXQiLCJzX19zZXQiLCJsX19zZXQiLCJTVkdfQ1JFRElUUyIsIkZvcmVncm91bmRDb2xvciIsImZvcmVncm91bmRDb2xvcl9fc2V0IiwiQmFja2dyb3VuZENvbG9yIiwiYmFja2dyb3VuZENvbG9yX19zZXQiLCJzd2FwIiwiX19leHBvcnQiLCJFeHBvcnQiLCJleGNsdWRlQmFja2dyb3VuZF9fc2V0IiwiZHVtbXlBbmNob3IiLCJjYW52YXNfX3NldCIsImR1bW15QW5jaG9yX19zZXQiLCJjYW52YXNTaXplIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJQYXRoMkQiLCJkb3dubG9hZCIsImNsaWNrIiwiZGlzYWJsZWQiLCJBbGVydCIsIm5hdmlnYXRvciIsImNsaXBib2FyZCIsIndyaXRlVGV4dCIsInByb3RvY29sIiwiSW5wdXRDb250ZW50IiwicXVlcnlTZWxlY3RvciJdLCJzb3VyY2VSb290IjoiIn0=