(()=>{var e={987:e=>{"use strict";var t={single_source_shortest_paths:function(e,n,r){var o={},a={};a[n]=0;var i,c,l,u,s,d,f,h=t.PriorityQueue.make();for(h.push(n,0);!h.empty();)for(l in c=(i=h.pop()).value,u=i.cost,s=e[c]||{})s.hasOwnProperty(l)&&(d=u+s[l],f=a[l],(void 0===a[l]||f>d)&&(a[l]=d,h.push(l,d),o[l]=c));if(void 0!==r&&void 0===a[r]){var p=["Could not find a path from ",n," to ",r,"."].join("");throw new Error(p)}return o},extract_shortest_path_from_predecessor_list:function(e,t){for(var n=[],r=t;r;)n.push(r),e[r],r=e[r];return n.reverse(),n},find_path:function(e,n,r){var o=t.single_source_shortest_paths(e,n,r);return t.extract_shortest_path_from_predecessor_list(o,r)},PriorityQueue:{make:function(e){var n,r=t.PriorityQueue,o={};for(n in e=e||{},r)r.hasOwnProperty(n)&&(o[n]=r[n]);return o.queue=[],o.sorter=e.sorter||r.default_sorter,o},default_sorter:function(e,t){return e.cost-t.cost},push:function(e,t){var n={value:e,cost:t};this.queue.push(n),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}};e.exports=t},378:e=>{"use strict";e.exports=function(e){for(var t=[],n=e.length,r=0;r<n;r++){var o=e.charCodeAt(r);if(o>=55296&&o<=56319&&n>r+1){var a=e.charCodeAt(r+1);a>=56320&&a<=57343&&(o=1024*(o-55296)+a-56320+65536,r+=1)}o<128?t.push(o):o<2048?(t.push(o>>6|192),t.push(63&o|128)):o<55296||o>=57344&&o<65536?(t.push(o>>12|224),t.push(o>>6&63|128),t.push(63&o|128)):o>=65536&&o<=1114111?(t.push(o>>18|240),t.push(o>>12&63|128),t.push(o>>6&63|128),t.push(63&o|128)):t.push(239,191,189)}return new Uint8Array(t).buffer}},661:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Children:()=>h,Component:()=>o.wA,Fragment:()=>o.HY,PureComponent:()=>c,StrictMode:()=>G,Suspense:()=>_,SuspenseList:()=>g,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:()=>D,cloneElement:()=>F,createContext:()=>o.kr,createElement:()=>o.az,createFactory:()=>z,createPortal:()=>A,createRef:()=>o.Vf,default:()=>K,findDOMNode:()=>V,flushSync:()=>Z,forwardRef:()=>d,hydrate:()=>x,isValidElement:()=>H,lazy:()=>y,memo:()=>l,render:()=>k,unmountComponentAtNode:()=>Y,unstable_batchedUpdates:()=>$,useCallback:()=>r.I4,useContext:()=>r.qp,useDebugValue:()=>r.Qb,useEffect:()=>r.d4,useErrorBoundary:()=>r.cO,useImperativeHandle:()=>r.aP,useLayoutEffect:()=>r.bt,useMemo:()=>r.Ye,useReducer:()=>r._Y,useRef:()=>r.sO,useState:()=>r.eJ,version:()=>U});var r=n(396),o=n(400);function a(e,t){for(var n in t)e[n]=t[n];return e}function i(e,t){for(var n in e)if("__source"!==n&&!(n in t))return!0;for(var r in t)if("__source"!==r&&e[r]!==t[r])return!0;return!1}function c(e){this.props=e}function l(e,t){function n(e){var n=this.props.ref,r=n==e.ref;return!r&&n&&(n.call?n(null):n.current=null),t?!t(this.props,e)||!r:i(this.props,e)}function r(t){return this.shouldComponentUpdate=n,(0,o.az)(e,t)}return r.displayName="Memo("+(e.displayName||e.name)+")",r.prototype.isReactComponent=!0,r.__f=!0,r}(c.prototype=new o.wA).isPureReactComponent=!0,c.prototype.shouldComponentUpdate=function(e,t){return i(this.props,e)||i(this.state,t)};var u=o.YM.__b;o.YM.__b=function(e){e.type&&e.type.__f&&e.ref&&(e.props.ref=e.ref,e.ref=null),u&&u(e)};var s="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function d(e){function t(t){var n=a({},t);return delete n.ref,e(n,t.ref||null)}return t.$$typeof=s,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t}var f=function(e,t){return null==e?null:(0,o.bR)((0,o.bR)(e).map(t))},h={map:f,forEach:f,count:function(e){return e?(0,o.bR)(e).length:0},only:function(e){var t=(0,o.bR)(e);if(1!==t.length)throw"Children.only";return t[0]},toArray:o.bR},p=o.YM.__e;o.YM.__e=function(e,t,n,r){if(e.then)for(var o,a=t;a=a.__;)if((o=a.__c)&&o.__c)return null==t.__e&&(t.__e=n.__e,t.__k=n.__k),o.__c(e,t);p(e,t,n,r)};var m=o.YM.unmount;function _(){this.__u=0,this.t=null,this.__b=null}function v(e){var t=e.__.__c;return t&&t.__e&&t.__e(e)}function y(e){var t,n,r;function a(a){if(t||(t=e()).then((function(e){n=e.default||e}),(function(e){r=e})),r)throw r;if(!n)throw t;return(0,o.az)(n,a)}return a.displayName="Lazy",a.__f=!0,a}function g(){this.u=null,this.o=null}o.YM.unmount=function(e){var t=e.__c;t&&t.__R&&t.__R(),t&&!0===e.__h&&(e.type=null),m&&m(e)},(_.prototype=new o.wA).__c=function(e,t){var n=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(n);var o=v(r.__v),a=!1,i=function(){a||(a=!0,n.__R=null,o?o(c):c())};n.__R=i;var c=function(){if(!--r.__u){if(r.state.__e){var e=r.state.__e;r.__v.__k[0]=function e(t,n,r){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map((function(t){return e(t,n,r)})),t.__c&&t.__c.__P===n&&(t.__e&&r.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=r)),t}(e,e.__c.__P,e.__c.__O)}var t;for(r.setState({__e:r.__b=null});t=r.t.pop();)t.forceUpdate()}},l=!0===t.__h;r.__u++||l||r.setState({__e:r.__b=r.__v.__k[0]}),e.then(i,i)},_.prototype.componentWillUnmount=function(){this.t=[]},_.prototype.render=function(e,t){if(this.__b){if(this.__v.__k){var n=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=function e(t,n,r){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach((function(e){"function"==typeof e.__c&&e.__c()})),t.__c.__H=null),null!=(t=a({},t)).__c&&(t.__c.__P===r&&(t.__c.__P=n),t.__c=null),t.__k=t.__k&&t.__k.map((function(t){return e(t,n,r)}))),t}(this.__b,n,r.__O=r.__P)}this.__b=null}var i=t.__e&&(0,o.az)(o.HY,null,e.fallback);return i&&(i.__h=null),[(0,o.az)(o.HY,null,t.__e?null:e.children),i]};var C=function(e,t,n){if(++n[1]===n[0]&&e.o.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.o.size))for(n=e.u;n;){for(;n.length>3;)n.pop()();if(n[1]<n[0])break;e.u=n=n[2]}};function b(e){return this.getChildContext=function(){return e.context},e.children}function w(e){var t=this,n=e.i;t.componentWillUnmount=function(){(0,o.sY)(null,t.l),t.l=null,t.i=null},t.i&&t.i!==n&&t.componentWillUnmount(),e.__v?(t.l||(t.i=n,t.l={nodeType:1,parentNode:n,childNodes:[],appendChild:function(e){this.childNodes.push(e),t.i.appendChild(e)},insertBefore:function(e,n){this.childNodes.push(e),t.i.appendChild(e)},removeChild:function(e){this.childNodes.splice(this.childNodes.indexOf(e)>>>1,1),t.i.removeChild(e)}}),(0,o.sY)((0,o.az)(b,{context:t.context},e.__v),t.l)):t.l&&t.componentWillUnmount()}function A(e,t){return(0,o.az)(w,{__v:e,i:t})}(g.prototype=new o.wA).__e=function(e){var t=this,n=v(t.__v),r=t.o.get(e);return r[0]++,function(o){var a=function(){t.props.revealOrder?(r.push(o),C(t,e,r)):o()};n?n(a):a()}},g.prototype.render=function(e){this.u=null,this.o=new Map;var t=(0,o.bR)(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var n=t.length;n--;)this.o.set(t[n],this.u=[1,0,this.u]);return e.children},g.prototype.componentDidUpdate=g.prototype.componentDidMount=function(){var e=this;this.o.forEach((function(t,n){C(e,n,t)}))};var S="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,M=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,L="undefined"!=typeof document,E=function(e){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(e)};function k(e,t,n){return null==t.__k&&(t.textContent=""),(0,o.sY)(e,t),"function"==typeof n&&n(),e?e.__c:null}function x(e,t,n){return(0,o.ZB)(e,t),"function"==typeof n&&n(),e?e.__c:null}o.wA.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(e){Object.defineProperty(o.wA.prototype,e,{configurable:!0,get:function(){return this["UNSAFE_"+e]},set:function(t){Object.defineProperty(this,e,{configurable:!0,writable:!0,value:t})}})}));var N=o.YM.event;function O(){}function P(){return this.cancelBubble}function I(){return this.defaultPrevented}o.YM.event=function(e){return N&&(e=N(e)),e.persist=O,e.isPropagationStopped=P,e.isDefaultPrevented=I,e.nativeEvent=e};var R,j={configurable:!0,get:function(){return this.class}},T=o.YM.vnode;o.YM.vnode=function(e){var t=e.type,n=e.props,r=n;if("string"==typeof t){var a=-1===t.indexOf("-");for(var i in r={},n){var c=n[i];L&&"children"===i&&"noscript"===t||"value"===i&&"defaultValue"in n&&null==c||("defaultValue"===i&&"value"in n&&null==n.value?i="value":"download"===i&&!0===c?c="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!E(n.type)?i="oninput":/^onfocus$/i.test(i)?i="onfocusin":/^onblur$/i.test(i)?i="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i)?i=i.toLowerCase():a&&M.test(i)?i=i.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===c&&(c=void 0),r[i]=c)}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=(0,o.bR)(n.children).forEach((function(e){e.props.selected=-1!=r.value.indexOf(e.props.value)}))),"select"==t&&null!=r.defaultValue&&(r.value=(0,o.bR)(n.children).forEach((function(e){e.props.selected=r.multiple?-1!=r.defaultValue.indexOf(e.props.value):r.defaultValue==e.props.value}))),e.props=r,n.class!=n.className&&(j.enumerable="className"in n,null!=n.className&&(r.class=n.className),Object.defineProperty(r,"className",j))}e.$$typeof=S,T&&T(e)};var B=o.YM.__r;o.YM.__r=function(e){B&&B(e),R=e.__c};var D={ReactCurrentDispatcher:{current:{readContext:function(e){return R.__n[e.__c].props.value}}}},U="17.0.2";function z(e){return o.az.bind(null,e)}function H(e){return!!e&&e.$$typeof===S}function F(e){return H(e)?o.Tm.apply(null,arguments):e}function Y(e){return!!e.__k&&((0,o.sY)(null,e),!0)}function V(e){return e&&(e.base||1===e.nodeType&&e)||null}var $=function(e,t){return e(t)},Z=function(e,t){return e(t)},G=o.HY;const K={useState:r.eJ,useReducer:r._Y,useEffect:r.d4,useLayoutEffect:r.bt,useRef:r.sO,useImperativeHandle:r.aP,useMemo:r.Ye,useCallback:r.I4,useContext:r.qp,useDebugValue:r.Qb,version:"17.0.2",Children:h,render:k,hydrate:x,unmountComponentAtNode:Y,createPortal:A,createElement:o.az,createContext:o.kr,createFactory:z,cloneElement:F,createRef:o.Vf,Fragment:o.HY,isValidElement:H,findDOMNode:V,Component:o.wA,PureComponent:c,memo:l,forwardRef:d,flushSync:Z,unstable_batchedUpdates:$,StrictMode:o.HY,Suspense:_,SuspenseList:g,lazy:y,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:D}},400:(e,t,n)=>{"use strict";n.d(t,{HY:()=>y,Tm:()=>z,Vf:()=>v,YM:()=>o,ZB:()=>U,az:()=>m,bR:()=>L,h:()=>m,kr:()=>H,sY:()=>D,wA:()=>g});var r,o,a,i,c,l,u,s={},d=[],f=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function h(e,t){for(var n in t)e[n]=t[n];return e}function p(e){var t=e.parentNode;t&&t.removeChild(e)}function m(e,t,n){var o,a,i,c={};for(i in t)"key"==i?o=t[i]:"ref"==i?a=t[i]:c[i]=t[i];if(arguments.length>2&&(c.children=arguments.length>3?r.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(i in e.defaultProps)void 0===c[i]&&(c[i]=e.defaultProps[i]);return _(e,c,o,a,null)}function _(e,t,n,r,i){var c={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==i?++a:i};return null==i&&null!=o.vnode&&o.vnode(c),c}function v(){return{current:null}}function y(e){return e.children}function g(e,t){this.props=e,this.context=t}function C(e,t){if(null==t)return e.__?C(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?C(e):null}function b(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return b(e)}}function w(e){(!e.__d&&(e.__d=!0)&&i.push(e)&&!A.__r++||l!==o.debounceRendering)&&((l=o.debounceRendering)||c)(A)}function A(){for(var e;A.__r=i.length;)e=i.sort((function(e,t){return e.__v.__b-t.__v.__b})),i=[],e.some((function(e){var t,n,r,o,a,i;e.__d&&(a=(o=(t=e).__v).__e,(i=t.__P)&&(n=[],(r=h({},o)).__v=o.__v+1,P(i,o,r,t.__n,void 0!==i.ownerSVGElement,null!=o.__h?[a]:null,n,null==a?C(o):a,o.__h),I(n,o),o.__e!=a&&b(o)))}))}function S(e,t,n,r,o,a,i,c,l,u){var f,h,p,m,v,g,b,w=r&&r.__k||d,A=w.length;for(n.__k=[],f=0;f<t.length;f++)if(null!=(m=n.__k[f]=null==(m=t[f])||"boolean"==typeof m?null:"string"==typeof m||"number"==typeof m||"bigint"==typeof m?_(null,m,null,null,m):Array.isArray(m)?_(y,{children:m},null,null,null):m.__b>0?_(m.type,m.props,m.key,null,m.__v):m)){if(m.__=n,m.__b=n.__b+1,null===(p=w[f])||p&&m.key==p.key&&m.type===p.type)w[f]=void 0;else for(h=0;h<A;h++){if((p=w[h])&&m.key==p.key&&m.type===p.type){w[h]=void 0;break}p=null}P(e,m,p=p||s,o,a,i,c,l,u),v=m.__e,(h=m.ref)&&p.ref!=h&&(b||(b=[]),p.ref&&b.push(p.ref,null,m),b.push(h,m.__c||v,m)),null!=v?(null==g&&(g=v),"function"==typeof m.type&&m.__k===p.__k?m.__d=l=M(m,l,e):l=E(e,m,p,w,v,l),"function"==typeof n.type&&(n.__d=l)):l&&p.__e==l&&l.parentNode!=e&&(l=C(p))}for(n.__e=g,f=A;f--;)null!=w[f]&&("function"==typeof n.type&&null!=w[f].__e&&w[f].__e==n.__d&&(n.__d=C(r,f+1)),T(w[f],w[f]));if(b)for(f=0;f<b.length;f++)j(b[f],b[++f],b[++f])}function M(e,t,n){for(var r,o=e.__k,a=0;o&&a<o.length;a++)(r=o[a])&&(r.__=e,t="function"==typeof r.type?M(r,t,n):E(n,r,r,o,r.__e,t));return t}function L(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){L(e,t)})):t.push(e)),t}function E(e,t,n,r,o,a){var i,c,l;if(void 0!==t.__d)i=t.__d,t.__d=void 0;else if(null==n||o!=a||null==o.parentNode)e:if(null==a||a.parentNode!==e)e.appendChild(o),i=null;else{for(c=a,l=0;(c=c.nextSibling)&&l<r.length;l+=2)if(c==o)break e;e.insertBefore(o,a),i=a}return void 0!==i?i:o.nextSibling}function k(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]=null==n?"":"number"!=typeof n||f.test(t)?n:n+"px"}function x(e,t,n,r,o){var a;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||k(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||k(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])a=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+a]=n,n?r||e.addEventListener(t,a?O:N,a):e.removeEventListener(t,a?O:N,a);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null!=n&&(!1!==n||"a"===t[0]&&"r"===t[1])?e.setAttribute(t,n):e.removeAttribute(t))}}function N(e){this.l[e.type+!1](o.event?o.event(e):e)}function O(e){this.l[e.type+!0](o.event?o.event(e):e)}function P(e,t,n,r,a,i,c,l,u){var s,d,f,p,m,_,v,C,b,w,A,M=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(u=n.__h,l=t.__e=n.__e,t.__h=null,i=[l]),(s=o.__b)&&s(t);try{e:if("function"==typeof M){if(C=t.props,b=(s=M.contextType)&&r[s.__c],w=s?b?b.props.value:s.__:r,n.__c?v=(d=t.__c=n.__c).__=d.__E:("prototype"in M&&M.prototype.render?t.__c=d=new M(C,w):(t.__c=d=new g(C,w),d.constructor=M,d.render=B),b&&b.sub(d),d.props=C,d.state||(d.state={}),d.context=w,d.__n=r,f=d.__d=!0,d.__h=[]),null==d.__s&&(d.__s=d.state),null!=M.getDerivedStateFromProps&&(d.__s==d.state&&(d.__s=h({},d.__s)),h(d.__s,M.getDerivedStateFromProps(C,d.__s))),p=d.props,m=d.state,f)null==M.getDerivedStateFromProps&&null!=d.componentWillMount&&d.componentWillMount(),null!=d.componentDidMount&&d.__h.push(d.componentDidMount);else{if(null==M.getDerivedStateFromProps&&C!==p&&null!=d.componentWillReceiveProps&&d.componentWillReceiveProps(C,w),!d.__e&&null!=d.shouldComponentUpdate&&!1===d.shouldComponentUpdate(C,d.__s,w)||t.__v===n.__v){d.props=C,d.state=d.__s,t.__v!==n.__v&&(d.__d=!1),d.__v=t,t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),d.__h.length&&c.push(d);break e}null!=d.componentWillUpdate&&d.componentWillUpdate(C,d.__s,w),null!=d.componentDidUpdate&&d.__h.push((function(){d.componentDidUpdate(p,m,_)}))}d.context=w,d.props=C,d.state=d.__s,(s=o.__r)&&s(t),d.__d=!1,d.__v=t,d.__P=e,s=d.render(d.props,d.state,d.context),d.state=d.__s,null!=d.getChildContext&&(r=h(h({},r),d.getChildContext())),f||null==d.getSnapshotBeforeUpdate||(_=d.getSnapshotBeforeUpdate(p,m)),A=null!=s&&s.type===y&&null==s.key?s.props.children:s,S(e,Array.isArray(A)?A:[A],t,n,r,a,i,c,l,u),d.base=t.__e,t.__h=null,d.__h.length&&c.push(d),v&&(d.__E=d.__=null),d.__e=!1}else null==i&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=R(n.__e,t,n,r,a,i,c,u);(s=o.diffed)&&s(t)}catch(e){t.__v=null,(u||null!=i)&&(t.__e=l,t.__h=!!u,i[i.indexOf(l)]=null),o.__e(e,t,n)}}function I(e,t){o.__c&&o.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){o.__e(e,t.__v)}}))}function R(e,t,n,o,a,i,c,l){var u,d,f,h=n.props,m=t.props,_=t.type,v=0;if("svg"===_&&(a=!0),null!=i)for(;v<i.length;v++)if((u=i[v])&&"setAttribute"in u==!!_&&(_?u.localName===_:3===u.nodeType)){e=u,i[v]=null;break}if(null==e){if(null===_)return document.createTextNode(m);e=a?document.createElementNS("http://www.w3.org/2000/svg",_):document.createElement(_,m.is&&m),i=null,l=!1}if(null===_)h===m||l&&e.data===m||(e.data=m);else{if(i=i&&r.call(e.childNodes),d=(h=n.props||s).dangerouslySetInnerHTML,f=m.dangerouslySetInnerHTML,!l){if(null!=i)for(h={},v=0;v<e.attributes.length;v++)h[e.attributes[v].name]=e.attributes[v].value;(f||d)&&(f&&(d&&f.__html==d.__html||f.__html===e.innerHTML)||(e.innerHTML=f&&f.__html||""))}if(function(e,t,n,r,o){var a;for(a in n)"children"===a||"key"===a||a in t||x(e,a,null,n[a],r);for(a in t)o&&"function"!=typeof t[a]||"children"===a||"key"===a||"value"===a||"checked"===a||n[a]===t[a]||x(e,a,t[a],n[a],r)}(e,m,h,a,l),f)t.__k=[];else if(v=t.props.children,S(e,Array.isArray(v)?v:[v],t,n,o,a&&"foreignObject"!==_,i,c,i?i[0]:n.__k&&C(n,0),l),null!=i)for(v=i.length;v--;)null!=i[v]&&p(i[v]);l||("value"in m&&void 0!==(v=m.value)&&(v!==e.value||"progress"===_&&!v||"option"===_&&v!==h.value)&&x(e,"value",v,h.value,!1),"checked"in m&&void 0!==(v=m.checked)&&v!==e.checked&&x(e,"checked",v,h.checked,!1))}return e}function j(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){o.__e(e,n)}}function T(e,t,n){var r,a;if(o.unmount&&o.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||j(r,null,t)),null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){o.__e(e,t)}r.base=r.__P=null}if(r=e.__k)for(a=0;a<r.length;a++)r[a]&&T(r[a],t,"function"!=typeof e.type);n||null==e.__e||p(e.__e),e.__e=e.__d=void 0}function B(e,t,n){return this.constructor(e,n)}function D(e,t,n){var a,i,c;o.__&&o.__(e,t),i=(a="function"==typeof n)?null:n&&n.__k||t.__k,c=[],P(t,e=(!a&&n||t).__k=m(y,null,[e]),i||s,s,void 0!==t.ownerSVGElement,!a&&n?[n]:i?null:t.firstChild?r.call(t.childNodes):null,c,!a&&n?n:i?i.__e:t.firstChild,a),I(c,e)}function U(e,t){D(e,t,U)}function z(e,t,n){var o,a,i,c=h({},e.props);for(i in t)"key"==i?o=t[i]:"ref"==i?a=t[i]:c[i]=t[i];return arguments.length>2&&(c.children=arguments.length>3?r.call(arguments,2):n),_(e.type,c,o||e.key,a||e.ref,null)}function H(e,t){var n={__c:t="__cC"+u++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some(w)},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}r=d.slice,o={__e:function(e,t,n,r){for(var o,a,i;t=t.__;)if((o=t.__c)&&!o.__)try{if((a=o.constructor)&&null!=a.getDerivedStateFromError&&(o.setState(a.getDerivedStateFromError(e)),i=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(e,r||{}),i=o.__d),i)return o.__E=o}catch(t){e=t}throw e}},a=0,g.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h({},this.state),"function"==typeof e&&(e=e(h({},n),this.props)),e&&h(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),w(this))},g.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),w(this))},g.prototype.render=y,i=[],c="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,A.__r=0,u=0},396:(e,t,n)=>{"use strict";n.d(t,{I4:()=>w,Qb:()=>S,Ye:()=>b,_Y:()=>_,aP:()=>C,bt:()=>y,cO:()=>M,d4:()=>v,eJ:()=>m,qp:()=>A,sO:()=>g});var r,o,a,i=n(400),c=0,l=[],u=i.YM.__b,s=i.YM.__r,d=i.YM.diffed,f=i.YM.__c,h=i.YM.unmount;function p(e,t){i.YM.__h&&i.YM.__h(o,e,c||t),c=0;var n=o.__H||(o.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({}),n.__[e]}function m(e){return c=1,_(O,e)}function _(e,t,n){var a=p(r++,2);return a.t=e,a.__c||(a.__=[n?n(t):O(void 0,t),function(e){var t=a.t(a.__[0],e);a.__[0]!==t&&(a.__=[t,a.__[1]],a.__c.setState({}))}],a.__c=o),a.__}function v(e,t){var n=p(r++,3);!i.YM.__s&&N(n.__H,t)&&(n.__=e,n.__H=t,o.__H.__h.push(n))}function y(e,t){var n=p(r++,4);!i.YM.__s&&N(n.__H,t)&&(n.__=e,n.__H=t,o.__h.push(n))}function g(e){return c=5,b((function(){return{current:e}}),[])}function C(e,t,n){c=6,y((function(){return"function"==typeof e?(e(t()),function(){return e(null)}):e?(e.current=t(),function(){return e.current=null}):void 0}),null==n?n:n.concat(e))}function b(e,t){var n=p(r++,7);return N(n.__H,t)&&(n.__=e(),n.__H=t,n.__h=e),n.__}function w(e,t){return c=8,b((function(){return e}),t)}function A(e){var t=o.context[e.__c],n=p(r++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(o)),t.props.value):e.__}function S(e,t){i.YM.useDebugValue&&i.YM.useDebugValue(t?t(e):e)}function M(e){var t=p(r++,10),n=m();return t.__=e,o.componentDidCatch||(o.componentDidCatch=function(e){t.__&&t.__(e),n[1](e)}),[n[0],function(){n[1](void 0)}]}function L(){for(var e;e=l.shift();)if(e.__P)try{e.__H.__h.forEach(k),e.__H.__h.forEach(x),e.__H.__h=[]}catch(t){e.__H.__h=[],i.YM.__e(t,e.__v)}}i.YM.__b=function(e){o=null,u&&u(e)},i.YM.__r=function(e){s&&s(e),r=0;var t=(o=e.__c).__H;t&&(t.__h.forEach(k),t.__h.forEach(x),t.__h=[])},i.YM.diffed=function(e){d&&d(e);var t=e.__c;t&&t.__H&&t.__H.__h.length&&(1!==l.push(t)&&a===i.YM.requestAnimationFrame||((a=i.YM.requestAnimationFrame)||function(e){var t,n=function(){clearTimeout(r),E&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);E&&(t=requestAnimationFrame(n))})(L)),o=null},i.YM.__c=function(e,t){t.some((function(e){try{e.__h.forEach(k),e.__h=e.__h.filter((function(e){return!e.__||x(e)}))}catch(n){t.some((function(e){e.__h&&(e.__h=[])})),t=[],i.YM.__e(n,e.__v)}})),f&&f(e,t)},i.YM.unmount=function(e){h&&h(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach((function(e){try{k(e)}catch(e){t=e}})),t&&i.YM.__e(t,n.__v))};var E="function"==typeof requestAnimationFrame;function k(e){var t=o,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),o=t}function x(e){var t=o;e.__c=e.__(),o=t}function N(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function O(e,t){return"function"==typeof t?t(e):t}},592:(e,t,n)=>{const r=n(138),o=n(115),a=n(907),i=n(776);function c(e,t,n,a,i){const c=[].slice.call(arguments,1),l=c.length,u="function"==typeof c[l-1];if(!u&&!r())throw new Error("Callback required as last argument");if(!u){if(l<1)throw new Error("Too few arguments provided");return 1===l?(n=t,t=a=void 0):2!==l||t.getContext||(a=n,n=t,t=void 0),new Promise((function(r,i){try{const i=o.create(n,a);r(e(i,t,a))}catch(e){i(e)}}))}if(l<2)throw new Error("Too few arguments provided");2===l?(i=n,n=t,t=a=void 0):3===l&&(t.getContext&&void 0===i?(i=a,a=void 0):(i=a,a=n,n=t,t=void 0));try{const r=o.create(n,a);i(null,e(r,t,a))}catch(e){i(e)}}t.create=o.create,t.toCanvas=c.bind(null,a.render),t.toDataURL=c.bind(null,a.renderToDataURL),t.toString=c.bind(null,(function(e,t,n){return i.render(e,n)}))},138:e=>{e.exports=function(){return"function"==typeof Promise&&Promise.prototype&&Promise.prototype.then}},845:(e,t,n)=>{const r=n(242).getSymbolSize;t.getRowColCoords=function(e){if(1===e)return[];const t=Math.floor(e/7)+2,n=r(e),o=145===n?26:2*Math.ceil((n-13)/(2*t-2)),a=[n-7];for(let e=1;e<t-1;e++)a[e]=a[e-1]-o;return a.push(6),a.reverse()},t.getPositions=function(e){const n=[],r=t.getRowColCoords(e),o=r.length;for(let e=0;e<o;e++)for(let t=0;t<o;t++)0===e&&0===t||0===e&&t===o-1||e===o-1&&0===t||n.push([r[e],r[t]]);return n}},260:(e,t,n)=>{const r=n(910),o=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function a(e){this.mode=r.ALPHANUMERIC,this.data=e}a.getBitsLength=function(e){return 11*Math.floor(e/2)+e%2*6},a.prototype.getLength=function(){return this.data.length},a.prototype.getBitsLength=function(){return a.getBitsLength(this.data.length)},a.prototype.write=function(e){let t;for(t=0;t+2<=this.data.length;t+=2){let n=45*o.indexOf(this.data[t]);n+=o.indexOf(this.data[t+1]),e.put(n,11)}this.data.length%2&&e.put(o.indexOf(this.data[t]),6)},e.exports=a},245:e=>{function t(){this.buffer=[],this.length=0}t.prototype={get:function(e){const t=Math.floor(e/8);return 1==(this.buffer[t]>>>7-e%8&1)},put:function(e,t){for(let n=0;n<t;n++)this.putBit(1==(e>>>t-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(e){const t=Math.floor(this.length/8);this.buffer.length<=t&&this.buffer.push(0),e&&(this.buffer[t]|=128>>>this.length%8),this.length++}},e.exports=t},280:e=>{function t(e){if(!e||e<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=e,this.data=new Uint8Array(e*e),this.reservedBit=new Uint8Array(e*e)}t.prototype.set=function(e,t,n,r){const o=e*this.size+t;this.data[o]=n,r&&(this.reservedBit[o]=!0)},t.prototype.get=function(e,t){return this.data[e*this.size+t]},t.prototype.xor=function(e,t,n){this.data[e*this.size+t]^=n},t.prototype.isReserved=function(e,t){return this.reservedBit[e*this.size+t]},e.exports=t},424:(e,t,n)=>{const r=n(378),o=n(910);function a(e){this.mode=o.BYTE,this.data=new Uint8Array(r(e))}a.getBitsLength=function(e){return 8*e},a.prototype.getLength=function(){return this.data.length},a.prototype.getBitsLength=function(){return a.getBitsLength(this.data.length)},a.prototype.write=function(e){for(let t=0,n=this.data.length;t<n;t++)e.put(this.data[t],8)},e.exports=a},393:(e,t,n)=>{const r=n(908),o=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],a=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];t.getBlocksCount=function(e,t){switch(t){case r.L:return o[4*(e-1)+0];case r.M:return o[4*(e-1)+1];case r.Q:return o[4*(e-1)+2];case r.H:return o[4*(e-1)+3];default:return}},t.getTotalCodewordsCount=function(e,t){switch(t){case r.L:return a[4*(e-1)+0];case r.M:return a[4*(e-1)+1];case r.Q:return a[4*(e-1)+2];case r.H:return a[4*(e-1)+3];default:return}}},908:(e,t)=>{t.L={bit:1},t.M={bit:0},t.Q={bit:3},t.H={bit:2},t.isValid=function(e){return e&&void 0!==e.bit&&e.bit>=0&&e.bit<4},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"l":case"low":return t.L;case"m":case"medium":return t.M;case"q":case"quartile":return t.Q;case"h":case"high":return t.H;default:throw new Error("Unknown EC Level: "+e)}}(e)}catch(e){return n}}},526:(e,t,n)=>{const r=n(242).getSymbolSize;t.getPositions=function(e){const t=r(e);return[[0,0],[t-7,0],[0,t-7]]}},642:(e,t,n)=>{const r=n(242),o=r.getBCHDigit(1335);t.getEncodedBits=function(e,t){const n=e.bit<<3|t;let a=n<<10;for(;r.getBCHDigit(a)-o>=0;)a^=1335<<r.getBCHDigit(a)-o;return 21522^(n<<10|a)}},729:(e,t)=>{const n=new Uint8Array(512),r=new Uint8Array(256);!function(){let e=1;for(let t=0;t<255;t++)n[t]=e,r[e]=t,e<<=1,256&e&&(e^=285);for(let e=255;e<512;e++)n[e]=n[e-255]}(),t.log=function(e){if(e<1)throw new Error("log("+e+")");return r[e]},t.exp=function(e){return n[e]},t.mul=function(e,t){return 0===e||0===t?0:n[r[e]+r[t]]}},442:(e,t,n)=>{const r=n(910),o=n(242);function a(e){this.mode=r.KANJI,this.data=e}a.getBitsLength=function(e){return 13*e},a.prototype.getLength=function(){return this.data.length},a.prototype.getBitsLength=function(){return a.getBitsLength(this.data.length)},a.prototype.write=function(e){let t;for(t=0;t<this.data.length;t++){let n=o.toSJIS(this.data[t]);if(n>=33088&&n<=40956)n-=33088;else{if(!(n>=57408&&n<=60351))throw new Error("Invalid SJIS character: "+this.data[t]+"\nMake sure your charset is UTF-8");n-=49472}n=192*(n>>>8&255)+(255&n),e.put(n,13)}},e.exports=a},126:(e,t)=>{t.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};const n=3,r=3,o=40,a=10;function i(e,n,r){switch(e){case t.Patterns.PATTERN000:return(n+r)%2==0;case t.Patterns.PATTERN001:return n%2==0;case t.Patterns.PATTERN010:return r%3==0;case t.Patterns.PATTERN011:return(n+r)%3==0;case t.Patterns.PATTERN100:return(Math.floor(n/2)+Math.floor(r/3))%2==0;case t.Patterns.PATTERN101:return n*r%2+n*r%3==0;case t.Patterns.PATTERN110:return(n*r%2+n*r%3)%2==0;case t.Patterns.PATTERN111:return(n*r%3+(n+r)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}}t.isValid=function(e){return null!=e&&""!==e&&!isNaN(e)&&e>=0&&e<=7},t.from=function(e){return t.isValid(e)?parseInt(e,10):void 0},t.getPenaltyN1=function(e){const t=e.size;let r=0,o=0,a=0,i=null,c=null;for(let l=0;l<t;l++){o=a=0,i=c=null;for(let u=0;u<t;u++){let t=e.get(l,u);t===i?o++:(o>=5&&(r+=n+(o-5)),i=t,o=1),t=e.get(u,l),t===c?a++:(a>=5&&(r+=n+(a-5)),c=t,a=1)}o>=5&&(r+=n+(o-5)),a>=5&&(r+=n+(a-5))}return r},t.getPenaltyN2=function(e){const t=e.size;let n=0;for(let r=0;r<t-1;r++)for(let o=0;o<t-1;o++){const t=e.get(r,o)+e.get(r,o+1)+e.get(r+1,o)+e.get(r+1,o+1);4!==t&&0!==t||n++}return n*r},t.getPenaltyN3=function(e){const t=e.size;let n=0,r=0,a=0;for(let o=0;o<t;o++){r=a=0;for(let i=0;i<t;i++)r=r<<1&2047|e.get(o,i),i>=10&&(1488===r||93===r)&&n++,a=a<<1&2047|e.get(i,o),i>=10&&(1488===a||93===a)&&n++}return n*o},t.getPenaltyN4=function(e){let t=0;const n=e.data.length;for(let r=0;r<n;r++)t+=e.data[r];return Math.abs(Math.ceil(100*t/n/5)-10)*a},t.applyMask=function(e,t){const n=t.size;for(let r=0;r<n;r++)for(let o=0;o<n;o++)t.isReserved(o,r)||t.xor(o,r,i(e,o,r))},t.getBestMask=function(e,n){const r=Object.keys(t.Patterns).length;let o=0,a=1/0;for(let i=0;i<r;i++){n(i),t.applyMask(i,e);const r=t.getPenaltyN1(e)+t.getPenaltyN2(e)+t.getPenaltyN3(e)+t.getPenaltyN4(e);t.applyMask(i,e),r<a&&(a=r,o=i)}return o}},910:(e,t,n)=>{const r=n(114),o=n(7);t.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},t.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},t.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},t.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},t.MIXED={bit:-1},t.getCharCountIndicator=function(e,t){if(!e.ccBits)throw new Error("Invalid mode: "+e);if(!r.isValid(t))throw new Error("Invalid version: "+t);return t>=1&&t<10?e.ccBits[0]:t<27?e.ccBits[1]:e.ccBits[2]},t.getBestModeForData=function(e){return o.testNumeric(e)?t.NUMERIC:o.testAlphanumeric(e)?t.ALPHANUMERIC:o.testKanji(e)?t.KANJI:t.BYTE},t.toString=function(e){if(e&&e.id)return e.id;throw new Error("Invalid mode")},t.isValid=function(e){return e&&e.bit&&e.ccBits},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"numeric":return t.NUMERIC;case"alphanumeric":return t.ALPHANUMERIC;case"kanji":return t.KANJI;case"byte":return t.BYTE;default:throw new Error("Unknown mode: "+e)}}(e)}catch(e){return n}}},85:(e,t,n)=>{const r=n(910);function o(e){this.mode=r.NUMERIC,this.data=e.toString()}o.getBitsLength=function(e){return 10*Math.floor(e/3)+(e%3?e%3*3+1:0)},o.prototype.getLength=function(){return this.data.length},o.prototype.getBitsLength=function(){return o.getBitsLength(this.data.length)},o.prototype.write=function(e){let t,n,r;for(t=0;t+3<=this.data.length;t+=3)n=this.data.substr(t,3),r=parseInt(n,10),e.put(r,10);const o=this.data.length-t;o>0&&(n=this.data.substr(t),r=parseInt(n,10),e.put(r,3*o+1))},e.exports=o},143:(e,t,n)=>{const r=n(729);t.mul=function(e,t){const n=new Uint8Array(e.length+t.length-1);for(let o=0;o<e.length;o++)for(let a=0;a<t.length;a++)n[o+a]^=r.mul(e[o],t[a]);return n},t.mod=function(e,t){let n=new Uint8Array(e);for(;n.length-t.length>=0;){const e=n[0];for(let o=0;o<t.length;o++)n[o]^=r.mul(t[o],e);let o=0;for(;o<n.length&&0===n[o];)o++;n=n.slice(o)}return n},t.generateECPolynomial=function(e){let n=new Uint8Array([1]);for(let o=0;o<e;o++)n=t.mul(n,new Uint8Array([1,r.exp(o)]));return n}},115:(e,t,n)=>{const r=n(242),o=n(908),a=n(245),i=n(280),c=n(845),l=n(526),u=n(126),s=n(393),d=n(882),f=n(103),h=n(642),p=n(910),m=n(130);function _(e,t,n){const r=e.size,o=h.getEncodedBits(t,n);let a,i;for(a=0;a<15;a++)i=1==(o>>a&1),a<6?e.set(a,8,i,!0):a<8?e.set(a+1,8,i,!0):e.set(r-15+a,8,i,!0),a<8?e.set(8,r-a-1,i,!0):a<9?e.set(8,15-a-1+1,i,!0):e.set(8,15-a-1,i,!0);e.set(r-8,8,1,!0)}function v(e,t,n){const o=new a;n.forEach((function(t){o.put(t.mode.bit,4),o.put(t.getLength(),p.getCharCountIndicator(t.mode,e)),t.write(o)}));const i=8*(r.getSymbolTotalCodewords(e)-s.getTotalCodewordsCount(e,t));for(o.getLengthInBits()+4<=i&&o.put(0,4);o.getLengthInBits()%8!=0;)o.putBit(0);const c=(i-o.getLengthInBits())/8;for(let e=0;e<c;e++)o.put(e%2?17:236,8);return function(e,t,n){const o=r.getSymbolTotalCodewords(t),a=s.getTotalCodewordsCount(t,n),i=o-a,c=s.getBlocksCount(t,n),l=c-o%c,u=Math.floor(o/c),f=Math.floor(i/c),h=f+1,p=u-f,m=new d(p);let _=0;const v=new Array(c),y=new Array(c);let g=0;const C=new Uint8Array(e.buffer);for(let e=0;e<c;e++){const t=e<l?f:h;v[e]=C.slice(_,_+t),y[e]=m.encode(v[e]),_+=t,g=Math.max(g,t)}const b=new Uint8Array(o);let w,A,S=0;for(w=0;w<g;w++)for(A=0;A<c;A++)w<v[A].length&&(b[S++]=v[A][w]);for(w=0;w<p;w++)for(A=0;A<c;A++)b[S++]=y[A][w];return b}(o,e,t)}function y(e,t,n,o){let a;if(Array.isArray(e))a=m.fromArray(e);else{if("string"!=typeof e)throw new Error("Invalid data");{let r=t;if(!r){const t=m.rawSplit(e);r=f.getBestVersionForData(t,n)}a=m.fromString(e,r||40)}}const s=f.getBestVersionForData(a,n);if(!s)throw new Error("The amount of data is too big to be stored in a QR Code");if(t){if(t<s)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+s+".\n")}else t=s;const d=v(t,n,a),h=r.getSymbolSize(t),p=new i(h);return function(e,t){const n=e.size,r=l.getPositions(t);for(let t=0;t<r.length;t++){const o=r[t][0],a=r[t][1];for(let t=-1;t<=7;t++)if(!(o+t<=-1||n<=o+t))for(let r=-1;r<=7;r++)a+r<=-1||n<=a+r||(t>=0&&t<=6&&(0===r||6===r)||r>=0&&r<=6&&(0===t||6===t)||t>=2&&t<=4&&r>=2&&r<=4?e.set(o+t,a+r,!0,!0):e.set(o+t,a+r,!1,!0))}}(p,t),function(e){const t=e.size;for(let n=8;n<t-8;n++){const t=n%2==0;e.set(n,6,t,!0),e.set(6,n,t,!0)}}(p),function(e,t){const n=c.getPositions(t);for(let t=0;t<n.length;t++){const r=n[t][0],o=n[t][1];for(let t=-2;t<=2;t++)for(let n=-2;n<=2;n++)-2===t||2===t||-2===n||2===n||0===t&&0===n?e.set(r+t,o+n,!0,!0):e.set(r+t,o+n,!1,!0)}}(p,t),_(p,n,0),t>=7&&function(e,t){const n=e.size,r=f.getEncodedBits(t);let o,a,i;for(let t=0;t<18;t++)o=Math.floor(t/3),a=t%3+n-8-3,i=1==(r>>t&1),e.set(o,a,i,!0),e.set(a,o,i,!0)}(p,t),function(e,t){const n=e.size;let r=-1,o=n-1,a=7,i=0;for(let c=n-1;c>0;c-=2)for(6===c&&c--;;){for(let n=0;n<2;n++)if(!e.isReserved(o,c-n)){let r=!1;i<t.length&&(r=1==(t[i]>>>a&1)),e.set(o,c-n,r),a--,-1===a&&(i++,a=7)}if(o+=r,o<0||n<=o){o-=r,r=-r;break}}}(p,d),isNaN(o)&&(o=u.getBestMask(p,_.bind(null,p,n))),u.applyMask(o,p),_(p,n,o),{modules:p,version:t,errorCorrectionLevel:n,maskPattern:o,segments:a}}t.create=function(e,t){if(void 0===e||""===e)throw new Error("No input text");let n,a,i=o.M;return void 0!==t&&(i=o.from(t.errorCorrectionLevel,o.M),n=f.from(t.version),a=u.from(t.maskPattern),t.toSJISFunc&&r.setToSJISFunction(t.toSJISFunc)),y(e,n,i,a)}},882:(e,t,n)=>{const r=n(143);function o(e){this.genPoly=void 0,this.degree=e,this.degree&&this.initialize(this.degree)}o.prototype.initialize=function(e){this.degree=e,this.genPoly=r.generateECPolynomial(this.degree)},o.prototype.encode=function(e){if(!this.genPoly)throw new Error("Encoder not initialized");const t=new Uint8Array(e.length+this.degree);t.set(e);const n=r.mod(t,this.genPoly),o=this.degree-n.length;if(o>0){const e=new Uint8Array(this.degree);return e.set(n,o),e}return n},e.exports=o},7:(e,t)=>{const n="[0-9]+";let r="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";r=r.replace(/u/g,"\\u");const o="(?:(?![A-Z0-9 $%*+\\-./:]|"+r+")(?:.|[\r\n]))+";t.KANJI=new RegExp(r,"g"),t.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),t.BYTE=new RegExp(o,"g"),t.NUMERIC=new RegExp(n,"g"),t.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");const a=new RegExp("^"+r+"$"),i=new RegExp("^[0-9]+$"),c=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");t.testKanji=function(e){return a.test(e)},t.testNumeric=function(e){return i.test(e)},t.testAlphanumeric=function(e){return c.test(e)}},130:(e,t,n)=>{const r=n(910),o=n(85),a=n(260),i=n(424),c=n(442),l=n(7),u=n(242),s=n(987);function d(e){return unescape(encodeURIComponent(e)).length}function f(e,t,n){const r=[];let o;for(;null!==(o=e.exec(n));)r.push({data:o[0],index:o.index,mode:t,length:o[0].length});return r}function h(e){const t=f(l.NUMERIC,r.NUMERIC,e),n=f(l.ALPHANUMERIC,r.ALPHANUMERIC,e);let o,a;u.isKanjiModeEnabled()?(o=f(l.BYTE,r.BYTE,e),a=f(l.KANJI,r.KANJI,e)):(o=f(l.BYTE_KANJI,r.BYTE,e),a=[]);return t.concat(n,o,a).sort((function(e,t){return e.index-t.index})).map((function(e){return{data:e.data,mode:e.mode,length:e.length}}))}function p(e,t){switch(t){case r.NUMERIC:return o.getBitsLength(e);case r.ALPHANUMERIC:return a.getBitsLength(e);case r.KANJI:return c.getBitsLength(e);case r.BYTE:return i.getBitsLength(e)}}function m(e,t){let n;const l=r.getBestModeForData(e);if(n=r.from(t,l),n!==r.BYTE&&n.bit<l.bit)throw new Error('"'+e+'" cannot be encoded with mode '+r.toString(n)+".\n Suggested mode is: "+r.toString(l));switch(n!==r.KANJI||u.isKanjiModeEnabled()||(n=r.BYTE),n){case r.NUMERIC:return new o(e);case r.ALPHANUMERIC:return new a(e);case r.KANJI:return new c(e);case r.BYTE:return new i(e)}}t.fromArray=function(e){return e.reduce((function(e,t){return"string"==typeof t?e.push(m(t,null)):t.data&&e.push(m(t.data,t.mode)),e}),[])},t.fromString=function(e,n){const o=function(e){const t=[];for(let n=0;n<e.length;n++){const o=e[n];switch(o.mode){case r.NUMERIC:t.push([o,{data:o.data,mode:r.ALPHANUMERIC,length:o.length},{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.ALPHANUMERIC:t.push([o,{data:o.data,mode:r.BYTE,length:o.length}]);break;case r.KANJI:t.push([o,{data:o.data,mode:r.BYTE,length:d(o.data)}]);break;case r.BYTE:t.push([{data:o.data,mode:r.BYTE,length:d(o.data)}])}}return t}(h(e,u.isKanjiModeEnabled())),a=function(e,t){const n={},o={start:{}};let a=["start"];for(let i=0;i<e.length;i++){const c=e[i],l=[];for(let e=0;e<c.length;e++){const u=c[e],s=""+i+e;l.push(s),n[s]={node:u,lastCount:0},o[s]={};for(let e=0;e<a.length;e++){const i=a[e];n[i]&&n[i].node.mode===u.mode?(o[i][s]=p(n[i].lastCount+u.length,u.mode)-p(n[i].lastCount,u.mode),n[i].lastCount+=u.length):(n[i]&&(n[i].lastCount=u.length),o[i][s]=p(u.length,u.mode)+4+r.getCharCountIndicator(u.mode,t))}}a=l}for(let e=0;e<a.length;e++)o[a[e]].end=0;return{map:o,table:n}}(o,n),i=s.find_path(a.map,"start","end"),c=[];for(let e=1;e<i.length-1;e++)c.push(a.table[i[e]].node);return t.fromArray(function(e){return e.reduce((function(e,t){const n=e.length-1>=0?e[e.length-1]:null;return n&&n.mode===t.mode?(e[e.length-1].data+=t.data,e):(e.push(t),e)}),[])}(c))},t.rawSplit=function(e){return t.fromArray(h(e,u.isKanjiModeEnabled()))}},242:(e,t)=>{let n;const r=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];t.getSymbolSize=function(e){if(!e)throw new Error('"version" cannot be null or undefined');if(e<1||e>40)throw new Error('"version" should be in range from 1 to 40');return 4*e+17},t.getSymbolTotalCodewords=function(e){return r[e]},t.getBCHDigit=function(e){let t=0;for(;0!==e;)t++,e>>>=1;return t},t.setToSJISFunction=function(e){if("function"!=typeof e)throw new Error('"toSJISFunc" is not a valid function.');n=e},t.isKanjiModeEnabled=function(){return void 0!==n},t.toSJIS=function(e){return n(e)}},114:(e,t)=>{t.isValid=function(e){return!isNaN(e)&&e>=1&&e<=40}},103:(e,t,n)=>{const r=n(242),o=n(393),a=n(908),i=n(910),c=n(114),l=r.getBCHDigit(7973);function u(e,t){return i.getCharCountIndicator(e,t)+4}function s(e,t){let n=0;return e.forEach((function(e){const r=u(e.mode,t);n+=r+e.getBitsLength()})),n}t.from=function(e,t){return c.isValid(e)?parseInt(e,10):t},t.getCapacity=function(e,t,n){if(!c.isValid(e))throw new Error("Invalid QR Code version");void 0===n&&(n=i.BYTE);const a=8*(r.getSymbolTotalCodewords(e)-o.getTotalCodewordsCount(e,t));if(n===i.MIXED)return a;const l=a-u(n,e);switch(n){case i.NUMERIC:return Math.floor(l/10*3);case i.ALPHANUMERIC:return Math.floor(l/11*2);case i.KANJI:return Math.floor(l/13);case i.BYTE:default:return Math.floor(l/8)}},t.getBestVersionForData=function(e,n){let r;const o=a.from(n,a.M);if(Array.isArray(e)){if(e.length>1)return function(e,n){for(let r=1;r<=40;r++)if(s(e,r)<=t.getCapacity(r,n,i.MIXED))return r}(e,o);if(0===e.length)return 1;r=e[0]}else r=e;return function(e,n,r){for(let o=1;o<=40;o++)if(n<=t.getCapacity(o,r,e))return o}(r.mode,r.getLength(),o)},t.getEncodedBits=function(e){if(!c.isValid(e)||e<7)throw new Error("Invalid QR Code version");let t=e<<12;for(;r.getBCHDigit(t)-l>=0;)t^=7973<<r.getBCHDigit(t)-l;return e<<12|t}},907:(e,t,n)=>{const r=n(653);t.render=function(e,t,n){let o=n,a=t;void 0!==o||t&&t.getContext||(o=t,t=void 0),t||(a=function(){try{return document.createElement("canvas")}catch(e){throw new Error("You need to specify a canvas element")}}()),o=r.getOptions(o);const i=r.getImageWidth(e.modules.size,o),c=a.getContext("2d"),l=c.createImageData(i,i);return r.qrToImageData(l.data,e,o),function(e,t,n){e.clearRect(0,0,t.width,t.height),t.style||(t.style={}),t.height=n,t.width=n,t.style.height=n+"px",t.style.width=n+"px"}(c,a,i),c.putImageData(l,0,0),a},t.renderToDataURL=function(e,n,r){let o=r;void 0!==o||n&&n.getContext||(o=n,n=void 0),o||(o={});const a=t.render(e,n,o),i=o.type||"image/png",c=o.rendererOpts||{};return a.toDataURL(i,c.quality)}},776:(e,t,n)=>{const r=n(653);function o(e,t){const n=e.a/255,r=t+'="'+e.hex+'"';return n<1?r+" "+t+'-opacity="'+n.toFixed(2).slice(1)+'"':r}function a(e,t,n){let r=e+t;return void 0!==n&&(r+=" "+n),r}t.render=function(e,t,n){const i=r.getOptions(t),c=e.modules.size,l=e.modules.data,u=c+2*i.margin,s=i.color.light.a?"<path "+o(i.color.light,"fill")+' d="M0 0h'+u+"v"+u+'H0z"/>':"",d="<path "+o(i.color.dark,"stroke")+' d="'+function(e,t,n){let r="",o=0,i=!1,c=0;for(let l=0;l<e.length;l++){const u=Math.floor(l%t),s=Math.floor(l/t);u||i||(i=!0),e[l]?(c++,l>0&&u>0&&e[l-1]||(r+=i?a("M",u+n,.5+s+n):a("m",o,0),o=0,i=!1),u+1<t&&e[l+1]||(r+=a("h",c),c=0)):o++}return r}(l,c,i.margin)+'"/>',f='viewBox="0 0 '+u+" "+u+'"',h='<svg xmlns="http://www.w3.org/2000/svg" '+(i.width?'width="'+i.width+'" height="'+i.width+'" ':"")+f+' shape-rendering="crispEdges">'+s+d+"</svg>\n";return"function"==typeof n&&n(null,h),h}},653:(e,t)=>{function n(e){if("number"==typeof e&&(e=e.toString()),"string"!=typeof e)throw new Error("Color should be defined as hex string");let t=e.slice().replace("#","").split("");if(t.length<3||5===t.length||t.length>8)throw new Error("Invalid hex color: "+e);3!==t.length&&4!==t.length||(t=Array.prototype.concat.apply([],t.map((function(e){return[e,e]})))),6===t.length&&t.push("F","F");const n=parseInt(t.join(""),16);return{r:n>>24&255,g:n>>16&255,b:n>>8&255,a:255&n,hex:"#"+t.slice(0,6).join("")}}t.getOptions=function(e){e||(e={}),e.color||(e.color={});const t=void 0===e.margin||null===e.margin||e.margin<0?4:e.margin,r=e.width&&e.width>=21?e.width:void 0,o=e.scale||4;return{width:r,scale:r?4:o,margin:t,color:{dark:n(e.color.dark||"#000000ff"),light:n(e.color.light||"#ffffffff")},type:e.type,rendererOpts:e.rendererOpts||{}}},t.getScale=function(e,t){return t.width&&t.width>=e+2*t.margin?t.width/(e+2*t.margin):t.scale},t.getImageWidth=function(e,n){const r=t.getScale(e,n);return Math.floor((e+2*n.margin)*r)},t.qrToImageData=function(e,n,r){const o=n.modules.size,a=n.modules.data,i=t.getScale(o,r),c=Math.floor((o+2*r.margin)*i),l=r.margin*i,u=[r.color.light,r.color.dark];for(let t=0;t<c;t++)for(let n=0;n<c;n++){let s=4*(t*c+n),d=r.color.light;if(t>=l&&n>=l&&t<c-l&&n<c-l){d=u[a[Math.floor((t-l)/i)*o+Math.floor((n-l)/i)]?1:0]}e[s++]=d.r,e[s++]=d.g,e[s++]=d.b,e[s]=d.a}}},81:(e,t,n)=>{"use strict";var r=n(661);function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var a=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],a=(0,r.useRef)(Date.now());(0,r.useEffect)((function(){var n=setTimeout((function(){Date.now()-a.current>=t&&(e(),a.current=Date.now())}),t-(Date.now()-a.current));return function(){clearTimeout(n)}}),[t].concat(o(n)))};t.ZP=a}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(400);var t=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),r=Math.abs,o=String.fromCharCode,a=Object.assign;function i(e){return e.trim()}function c(e,t,n){return e.replace(t,n)}function l(e,t){return e.indexOf(t)}function u(e,t){return 0|e.charCodeAt(t)}function s(e,t,n){return e.slice(t,n)}function d(e){return e.length}function f(e){return e.length}function h(e,t){return t.push(e),e}var p=1,m=1,_=0,v=0,y=0,g="";function C(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:p,column:m,length:i,return:""}}function b(e,t){return a(C("",null,null,"",null,null,0),e,{length:-e.length},t)}function w(){return y=v>0?u(g,--v):0,m--,10===y&&(m=1,p--),y}function A(){return y=v<_?u(g,v++):0,m++,10===y&&(m=1,p++),y}function S(){return u(g,v)}function M(){return v}function L(e,t){return s(g,e,t)}function E(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function k(e){return p=m=1,_=d(g=e),v=0,[]}function x(e){return g="",e}function N(e){return i(L(v-1,I(91===e?e+2:40===e?e+1:e)))}function O(e){for(;(y=S())&&y<33;)A();return E(e)>2||E(y)>3?"":" "}function P(e,t){for(;--t&&A()&&!(y<48||y>102||y>57&&y<65||y>70&&y<97););return L(e,M()+(t<6&&32==S()&&32==A()))}function I(e){for(;A();)switch(y){case e:return v;case 34:case 39:34!==e&&39!==e&&I(y);break;case 40:41===e&&I(e);break;case 92:A()}return v}function R(e,t){for(;A()&&e+y!==57&&(e+y!==84||47!==S()););return"/*"+L(t,v-1)+"*"+o(47===e?e:A())}function j(e){for(;!E(S());)A();return L(e,v)}var T="-ms-",B="-moz-",D="-webkit-",U="comm",z="rule",H="decl",F="@keyframes";function Y(e,t){for(var n="",r=f(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function V(e,t,n,r){switch(e.type){case"@import":case H:return e.return=e.return||e.value;case U:return"";case F:return e.return=e.value+"{"+Y(e.children,r)+"}";case z:e.value=e.props.join(",")}return d(n=Y(e.children,r))?e.return=e.value+"{"+n+"}":""}function $(e,t){switch(function(e,t){return(((t<<2^u(e,0))<<2^u(e,1))<<2^u(e,2))<<2^u(e,3)}(e,t)){case 5103:return D+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return D+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return D+e+B+e+T+e+e;case 6828:case 4268:return D+e+T+e+e;case 6165:return D+e+T+"flex-"+e+e;case 5187:return D+e+c(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return D+e+T+"flex-item-"+c(e,/flex-|-self/,"")+e;case 4675:return D+e+T+"flex-line-pack"+c(e,/align-content|flex-|-self/,"")+e;case 5548:return D+e+T+c(e,"shrink","negative")+e;case 5292:return D+e+T+c(e,"basis","preferred-size")+e;case 6060:return D+"box-"+c(e,"-grow","")+D+e+T+c(e,"grow","positive")+e;case 4554:return D+c(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return c(c(c(e,/(zoom-|grab)/,D+"$1"),/(image-set)/,D+"$1"),e,"")+e;case 5495:case 3959:return c(e,/(image-set\([^]*)/,D+"$1$`$1");case 4968:return c(c(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+D+e+e;case 4095:case 3583:case 4068:case 2532:return c(e,/(.+)-inline(.+)/,D+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(d(e)-1-t>6)switch(u(e,t+1)){case 109:if(45!==u(e,t+4))break;case 102:return c(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+B+(108==u(e,t+3)?"$3":"$2-$3"))+e;case 115:return~l(e,"stretch")?$(c(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==u(e,t+1))break;case 6444:switch(u(e,d(e)-3-(~l(e,"!important")&&10))){case 107:return c(e,":",":"+D)+e;case 101:return c(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+D+(45===u(e,14)?"inline-":"")+"box$3$1"+D+"$2$3$1"+T+"$2box$3")+e}break;case 5936:switch(u(e,t+11)){case 114:return D+e+T+c(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return D+e+T+c(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return D+e+T+c(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return D+e+T+e+e}return e}function Z(e){return x(G("",null,null,null,[""],e=k(e),0,[0],e))}function G(e,t,n,r,a,i,u,s,f){for(var p=0,m=0,_=u,v=0,y=0,g=0,C=1,b=1,L=1,E=0,k="",x=a,I=i,T=r,B=k;b;)switch(g=E,E=A()){case 40:if(108!=g&&58==B.charCodeAt(_-1)){-1!=l(B+=c(N(E),"&","&\f"),"&\f")&&(L=-1);break}case 34:case 39:case 91:B+=N(E);break;case 9:case 10:case 13:case 32:B+=O(g);break;case 92:B+=P(M()-1,7);continue;case 47:switch(S()){case 42:case 47:h(W(R(A(),M()),t,n),f);break;default:B+="/"}break;case 123*C:s[p++]=d(B)*L;case 125*C:case 59:case 0:switch(E){case 0:case 125:b=0;case 59+m:y>0&&d(B)-_&&h(y>32?J(B+";",r,n,_-1):J(c(B," ","")+";",r,n,_-2),f);break;case 59:B+=";";default:if(h(T=K(B,t,n,p,m,a,s,k,x=[],I=[],_),i),123===E)if(0===m)G(B,t,T,T,x,i,_,s,I);else switch(v){case 100:case 109:case 115:G(e,T,T,r&&h(K(e,T,T,0,0,a,s,k,a,x=[],_),I),a,I,_,s,r?x:I);break;default:G(B,T,T,T,[""],I,0,s,I)}}p=m=y=0,C=L=1,k=B="",_=u;break;case 58:_=1+d(B),y=g;default:if(C<1)if(123==E)--C;else if(125==E&&0==C++&&125==w())continue;switch(B+=o(E),E*C){case 38:L=m>0?1:(B+="\f",-1);break;case 44:s[p++]=(d(B)-1)*L,L=1;break;case 64:45===S()&&(B+=N(A())),v=S(),m=_=d(k=B+=j(M())),E++;break;case 45:45===g&&2==d(B)&&(C=0)}}return i}function K(e,t,n,o,a,l,u,d,h,p,m){for(var _=a-1,v=0===a?l:[""],y=f(v),g=0,b=0,w=0;g<o;++g)for(var A=0,S=s(e,_+1,_=r(b=u[g])),M=e;A<y;++A)(M=i(b>0?v[A]+" "+S:c(S,/&\f/g,v[A])))&&(h[w++]=M);return C(e,t,n,0===a?z:d,h,p,m)}function W(e,t,n){return C(e,t,n,U,o(y),s(e,2,-2),0)}function J(e,t,n,r){return C(e,t,n,H,s(e,0,r),s(e,r+1,-1),r)}var q=function(e,t,n){for(var r=0,o=0;r=o,o=S(),38===r&&12===o&&(t[n]=1),!E(o);)A();return L(e,v)},Q=function(e,t){return x(function(e,t){var n=-1,r=44;do{switch(E(r)){case 0:38===r&&12===S()&&(t[n]=1),e[n]+=q(v-1,t,n);break;case 2:e[n]+=N(r);break;case 4:if(44===r){e[++n]=58===S()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=o(r)}}while(r=A());return e}(k(e),t))},X=new WeakMap,ee=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||X.get(n))&&!r){X.set(e,!0);for(var o=[],a=Q(t,o),i=n.props,c=0,l=0;c<a.length;c++)for(var u=0;u<i.length;u++,l++)e.props[l]=o[c]?a[c].replace(/&\f/g,i[u]):i[u]+" "+a[c]}}},te=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},ne=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case H:e.return=$(e.value,e.length);break;case F:return Y([b(e,{value:c(e.value,"@","@"+D)})],r);case z:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=t.exec(e))?e[0]:e}(t,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return Y([b(e,{props:[c(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return Y([b(e,{props:[c(t,/:(plac\w+)/,":-webkit-input-$1")]}),b(e,{props:[c(t,/:(plac\w+)/,":-moz-$1")]}),b(e,{props:[c(t,/:(plac\w+)/,T+"input-$1")]})],r)}return""}))}}];const re=function(e){var n=e.key;if("css"===n){var r=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(r,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o=e.stylisPlugins||ne;var a,i,c={},l=[];a=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+n+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)c[t[n]]=!0;l.push(e)}));var u,s,d,h,p=[V,(h=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&h(e)})],m=(s=[ee,te].concat(o,p),d=f(s),function(e,t,n,r){for(var o="",a=0;a<d;a++)o+=s[a](e,t,n,r)||"";return o});i=function(e,t,n,r){u=n,Y(Z(e?e+"{"+t.styles+"}":t.styles),m),r&&(_.inserted[t.name]=!0)};var _={key:n,sheet:new t({key:n,container:a,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:c,registered:{},insert:i};return _.sheet.hydrate(l),_};const oe=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)};const ae={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};const ie=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var ce=/[A-Z]|^ms/g,le=/_EMO_([^_]+?)_([^]*?)_EMO_/g,ue=function(e){return 45===e.charCodeAt(1)},se=function(e){return null!=e&&"boolean"!=typeof e},de=ie((function(e){return ue(e)?e:e.replace(ce,"-$&").toLowerCase()})),fe=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(le,(function(e,t,n){return pe={name:t,styles:n,next:pe},t}))}return 1===ae[e]||ue(e)||"number"!=typeof t||0===t?t:t+"px"};function he(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return pe={name:n.name,styles:n.styles,next:pe},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)pe={name:r.name,styles:r.styles,next:pe},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=he(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":se(i)&&(r+=de(a)+":"+fe(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var c=he(e,t,i);switch(a){case"animation":case"animationName":r+=de(a)+":"+c+";";break;default:r+=a+"{"+c+"}"}}else for(var l=0;l<i.length;l++)se(i[l])&&(r+=de(a)+":"+fe(a,i[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=pe,a=n(e);return pe=o,he(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var pe,me=/label:\s*([^\s;\n{]+)\s*(;|$)/g;var _e=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";pe=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=he(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=he(n,t,e[i]),r&&(o+=a[i]);me.lastIndex=0;for(var c,l="";null!==(c=me.exec(o));)l+="-"+c[1];return{name:oe(o)+l,styles:o,next:pe}};function ve(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var ye=function(e,t,n){!function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)}(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0);o=o.next}while(void 0!==o)}};function ge(e,t){if(void 0===e.inserted[t.name])return e.insert("",t,e.sheet,!0)}function Ce(e,t,n){var r=[],o=ve(e,r,n);return r.length<2?n:o+t(r)}var be=function e(t){for(var n="",r=0;r<t.length;r++){var o=t[r];if(null!=o){var a=void 0;switch(typeof o){case"boolean":break;case"object":if(Array.isArray(o))a=e(o);else for(var i in a="",o)o[i]&&i&&(a&&(a+=" "),a+=i);break;default:a=o}a&&(n&&(n+=" "),n+=a)}}return n};const we=function(e){var t=re(e);t.sheet.speedy=function(e){this.isSpeedy=e},t.compat=!0;var n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=_e(n,t.registered,void 0);return ye(t,o,!1),t.key+"-"+o.name};return{css:n,cx:function(){for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return Ce(t.registered,n,be(r))},injectGlobal:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=_e(n,t.registered);ge(t,o)},keyframes:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=_e(n,t.registered),a="animation-"+o.name;return ge(t,{name:o.name,styles:"@keyframes "+a+"{"+o.styles+"}"}),a},hydrate:function(e){e.forEach((function(e){t.inserted[e]=!0}))},flush:function(){t.registered={},t.inserted={},t.sheet.flush()},sheet:t.sheet,cache:t,getRegisteredStyles:ve.bind(null,t.registered),merge:Ce.bind(null,t.registered,n)}};var Ae=we({key:"css"}),Se=(Ae.flush,Ae.hydrate,Ae.cx),Me=(Ae.merge,Ae.getRegisteredStyles,Ae.injectGlobal,Ae.keyframes,Ae.css),Le=(Ae.sheet,Ae.cache,n(661));function Ee(e){var t=Le.default.createContext(null);return{Provider:function(n){var r=e(n.initialState);return Le.default.createElement(t.Provider,{value:r},n.children)},useContainer:function(){var e=Le.default.useContext(t);if(null===e)throw new Error("Component must be wrapped with <Container.Provider>");return e}}}var ke=function(e){return(e+1)%1e6};function xe(){return(0,Le.useReducer)(ke,0)[1]}function Ne(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const Pe=function(e){var t=(0,Le.useRef)("function"==typeof e?e():function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ne(Object(n),!0).forEach((function(t){Oe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ne(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e)),n=xe(),r=(0,Le.useRef)({get:function(e,t,r){return/(__set)$/g.test(t)?function(r){e[t.replace(/(__set)$/g,"")]!=r&&(e[t.replace(/(__set)$/g,"")]=r,n())}:Reflect.get.apply(Reflect,arguments)},set:function(e,t,r){return e[t]==r||(Reflect.set.apply(Reflect,arguments),n()),Reflect.set.apply(Reflect,arguments)}});return(0,Le.useRef)(new Proxy(t.current,r.current)).current};function Ie(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return Re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Re(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const je=Ee((function(){var e=Pe({callbacks:[]});return{register:(0,Le.useCallback)((function(t){e.callbacks.push(t)}),[]),push:(0,Le.useCallback)((function(t){var n,r=Ie(e.callbacks);try{for(r.s();!(n=r.n()).done;){(0,n.value)(t)}}catch(e){r.e(e)}finally{r.f()}}),[])}}));var Te=n(81),Be=n(592);Array.prototype.last=function(){return this[this.length-1]};var De=function(e,t){return(e%=t)<0&&(e+=t),e},Ue=function(e,t){return Math.abs(e-t)},ze=[[0,-1],[1,0],[0,1],[-1,0]],He=[[-1,-1],[0,-1],[1,-1],[1,0],[1,1],[0,1],[-1,1],[-1,0]],Fe=[[0,0],[1,0],[1,1],[0,1]],Ye=!1,Ve=["L","M","Q","H"];const $e=Ee((function(){var e=Pe({isValid:!1,content:location.href.replace(/(\/+)$/g,""),margin:2,size:21,shapes:[],roundCorner:0,eyeRoundCorner:0,foregroundColor:[0,0,0],backgroundColor:[0,0,100]});return(0,Te.ZP)((function(){if(e.isValid&&e.content&&0!=e.content.length){for(var t=Be.create(e.content,{errorCorrectionLevel:"L"}).modules,n=1;t.size<=21&&n<4;)t=Be.create(e.content,{errorCorrectionLevel:Ve[n]}).modules,n++;for(var r=t.size,o=t.data,a=r+2*e.margin,i=Array(a),c=0;c<a;c++){i[c]=Array(a);for(var l=0;l<a;l++){var u=l-e.margin,s=c-e.margin;i[c][l]={groupIndex:void 0},i[c][l].data=u<0||s<0||u>=r||s>=r?0:o[s*r+u],i[c][l].type=u<0||s<0||u>=r||s>=r?0:u<7&&s<7||u>=r-7&&s<7||u<7&&s>=r-7?1:0}}for(var d=[],f=[],h=-1,p=[],m=!1,_=function e(t){if(null!=i[t[1]][t[0]].groupIndex)return!1;var n=i[t[1]][t[0]].data;for(f[h]||(f[h]={data:n,blocks:[]}),i[t[1]][t[0]].groupIndex=h,f[h].blocks.push([t[0],t[1]]),m=!0,n?He.forEach((function(e){var n=t[0]+e[0],r=t[1]+e[1];n<0||r<0||n>=a||r>=a||i[r][n].data&&p.push([n,r])})):ze.forEach((function(e){var n=t[0]+e[0],r=t[1]+e[1];n<0||r<0||n>=a||r>=a||i[r][n].data||p.push([n,r])}));p.length;)e(p.shift());return m},v=0;v<a;v++)for(var y=0;y<a;y++)_([y,v]),m&&(h++,p=[],m=!1);for(var g=function(e){for(var t=f[e],n=[],r=[],o=0,a=!1;!(a||++o>999999999);)if(0!=n.length){var c=n.last(),l=r.last(),u=[[0,-1],[0,0],[-1,0]],s=[[0,-1],[1,0],[0,1]],h=[0,1,2];t.data==Ye?1==l?(u=[[0,0],[0,-1],[-1,-1]],s=[[0,1],[1,0],[0,-1]],h=[2,1,0]):2==l?(u=[[-1,0],[0,0],[0,-1]],s=[[-1,0],[0,1],[1,0]],h=[3,2,1]):3==l?(u=[[-1,-1],[-1,0],[0,0]],s=[[0,-1],[-1,0],[0,1]],h=[0,3,2]):0==l&&(u=[[0,-1],[-1,-1],[-1,0]],s=[[1,0],[0,-1],[-1,0]],h=[1,0,3]):1==l?(u=[[0,-1],[0,0],[-1,0]],s=[[0,-1],[1,0],[0,1]],h=[0,1,2]):2==l?(u=[[0,0],[-1,0],[-1,-1]],s=[[1,0],[0,1],[-1,0]],h=[1,2,3]):3==l?(u=[[-1,0],[-1,-1],[0,-1]],s=[[0,1],[-1,0],[0,-1]],h=[2,3,0]):0==l&&(u=[[-1,-1],[0,-1],[0,0]],s=[[-1,0],[0,-1],[1,0]],h=[3,0,1]);for(var p=0;p<3;p++){var m=u[p],_=c[0]+m[0],v=c[1]+m[1],y=i[v][_];if(t.data==Ye?y.groupIndex!=e:y.groupIndex==e){var g=c[0]+s[p][0],C=c[1]+s[p][1];if(l==h[p]&&n.pop(),g==n[0][0]&&C==n[0][1]){a=!0;break}n.push([g,C]),r.push(h[p]);break}}}else if(t.data==Ye){var b=t.blocks[0][0],w=t.blocks[0][1],A=b+1,S=w;n.push([b,w]),r.push(void 0),n.push([A,S]),r.push(1)}else for(var M=0;M<4;M++){var L=ze[M],E=t.blocks[0][0]+L[0],k=t.blocks[0][1]+L[1];if(i[k][E].groupIndex!=e){var x=t.blocks[0][0],N=t.blocks[0][1],O=De(M+1,4),P=x+Fe[M][0],I=N+Fe[M][1],R=P+ze[O][0],j=I+ze[O][1];n.push([P,I]),r.push(void 0),n.push([R,j]),r.push(O);break}}if(0==n.length)return"continue";var T=function(){if(4!=n.length)return!1;if(t.data!=Ye)return!1;for(var e=1/0,r=1/0,o=0,a=0,i=0;i<n.length;i++)e=Math.min(e,n[i][0]),r=Math.min(r,n[i][1]),o=Math.max(o,n[i][0]),a=Math.max(a,n[i][1]);return 3==Ue(e,o)&&3==Ue(r,a)}(),B=i[t.blocks[0][1]][t.blocks[0][0]].type||T;d.push([n,B])},C=0;C<f.length;C++)g(C);e.size=a,e.shapes=d}}),200,[e.content,e.margin]),[e]}));const Ze=Ee((function(){return[Pe({size:480,excludeBackground:!1})]}));var Ge=n(396);const Ke=function(t){return(0,e.h)("div",{className:"section-line"},(0,e.h)("div",null,t.children),(0,e.h)("hr",null))};const We=function(e){(0,Le.useEffect)(e,[])};const Je=function(t){var n=je.useContainer(),r=Pe({id:0,messages:[]}),o=(0,Le.useCallback)((function(e){console.log(e);var t=r.id;r.id++,r.messages.push({id:t,text:e}),setTimeout((function(){r.messages=r.messages.filter((function(e){return e.id!=t}))}),5e3)}),[]);return We((function(){n.register(o)})),(0,e.h)("div",{className:"alert"},r.messages.map((function(t){return(0,e.h)("div",{key:t.id,className:"message"},t.text)})))};var qe;function Qe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Xe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Xe(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const et=function(t){var n,r,o=(0,Ge.sO)(),a=Qe((0,Ge.eJ)(null),2),i=a[0],c=a[1],l=(0,Ge.I4)((function(){o.current&&(o.current.classList.add("is-measuring"),c(Math.min(o.current.clientWidth,o.current.clientHeight)),o.current.classList.remove("is-measuring"))})),u=(0,Ge.I4)((function(){return l()}));return We((function(){return l(),window.addEventListener("resize",u),function(){window.removeEventListener("resize",u)}}),[]),(0,e.h)("div",{ref:o,className:"preview-qrcode-wrapper"},(0,e.h)("div",{className:Se("preview-qrcode-container",Me(qe||(n=["width: ","px; height: ","px;"],r||(r=n.slice(0)),qe=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(r)}}))),i,i))},t.children))};var tt=function(e,t){return(e%=t)<0&&(e+=t),e},nt=function(e){return 0==e?0:e/Math.abs(e)},rt=function(e,t){return e>=0&&t>=0?Math.max(e,t):Math.min(e,t)};const ot=function(e){for(var t=e.size,n=e.shapes,r=e.roundCorner,o=e.eyeRoundCorner,a=e.canvas,i=void 0===a?{size:void 0}:a,c=null!=(null==i?void 0:i.size)?i.size/t:1,l="",u=0;u<n.length;u++){var s=n[u][0],d=n[u][1],f=r/100||0,h=o/100||0;if(!d&&0==f||d&&0==f&&0==h)for(var p=0;p<s.length;p++)l+=0==p?"M":"L",l+="".concat(s[p][0]*c,",").concat(s[p][1]*c);else for(var m=0;m<s.length;m++){l+=0==m?"M":"L";var _=s[tt(m-1,s.length)],v=s[m],y=s[tt(m+1,s.length)],g=nt(_[0]-v[0]),C=nt(_[1]-v[1]),b=nt(y[0]-v[0]),w=nt(y[1]-v[1]),A=v[0],S=v[1],M=v[0],L=v[1],E=v[0],k=v[1];if(d){var x=Math.abs(_[0]-v[0])/2,N=Math.abs(_[1]-v[1])/2,O=Math.abs(y[0]-v[0])/2,P=Math.abs(y[1]-v[1])/2;A=v[0]+g*rt(f/2,x*h),S=v[1]+C*rt(f/2,N*h),E=v[0]+b*rt(f/2,O*h),k=v[1]+w*rt(f/2,P*h)}else A=v[0]+g*f/2,S=v[1]+C*f/2,E=v[0]+b*f/2,k=v[1]+w*f/2;l+="".concat(A*c,",").concat(S*c," L").concat(A*c,",").concat(S*c," Q").concat(M*c,",").concat(L*c," ").concat(E*c,",").concat(k*c)}l+="z"}return l};function at(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return it(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return it(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function it(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ct=function(e){var t=at(e,4),n=t[0],r=t[1],o=t[2],a=t[3],i=void 0===a?100:a;return"hsla(".concat(n,", ").concat(r,"%, ").concat(o,"%, ").concat(i,"%)")};function lt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ut(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ut(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ut(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const st=function(t){var n=lt($e.useContainer(),1)[0],r=Pe({viewBox:"0 0 1 1",d:""});return(0,Te.ZP)((function(){r.d=ot({size:n.size,shapes:n.shapes,roundCorner:n.roundCorner,eyeRoundCorner:n.eyeRoundCorner}),r.viewBox="0 0 ".concat(n.size," ").concat(n.size)}),20,[n.size,n.shapes,n.roundCorner,n.eyeRoundCorner]),(0,Le.useMemo)((function(){return n.isValid?(0,e.h)("div",{className:Se("preview",{"is-not-valid":!n.isValid})},(0,e.h)("svg",{viewBox:r.viewBox,style:{backgroundColor:ct(n.backgroundColor)}},(0,e.h)("path",{d:"M0,0H".concat(n.size,"V").concat(n.size,"H0z"),fill:ct(n.backgroundColor)}),(0,e.h)("path",{d:r.d,"fill-rule":"evenodd",fill:ct(n.foregroundColor)}))):(0,e.h)("div",{className:"placeholder"},(0,e.h)("svg",{viewBox:"0 0 19 19"},(0,e.h)("path",{class:"cls-1",d:"M 2 4.5 L 2 3.5 L 2 2.5 C 2 2.362 2.056 2.237 2.147 2.147 C 2.237 2.056 2.362 2 2.5 2 L 3.5 2 L 4.5 2 C 4.638 2 4.763 2.056 4.854 2.147 C 4.944 2.237 5 2.362 5 2.5 L 5 3.5 L 5 4.5 C 5 4.638 4.944 4.763 4.854 4.854 C 4.763 4.944 4.638 5 4.5 5 L 3.5 5 L 2.5 5 C 2.362 5 2.237 4.944 2.147 4.854 C 2.056 4.763 2 4.638 2 4.5 Z M 3 4 L 3.5 4 L 4 4 L 4 3.5 L 4 3 L 3.5 3 L 3 3 L 3 3.5 Z M 7 0.5 L 7 3.5 L 7 6.5 C 7 6.638 6.944 6.763 6.854 6.854 C 6.763 6.944 6.638 7 6.5 7 L 3.5 7 L 0.5 7 C 0.362 7 0.237 6.944 0.147 6.854 C 0.056 6.763 0 6.638 0 6.5 L 0 3.5 L 0 0.5 C 0 0.362 0.056 0.237 0.147 0.147 C 0.237 0.056 0.362 0 0.5 0 L 3.5 0 L 6.5 0 C 6.638 0 6.763 0.056 6.854 0.147 C 6.944 0.237 7 0.362 7 0.5 Z M 6 1 L 3.5 1 L 1 1 L 1 3.5 L 1 6 L 3.5 6 L 6 6 L 6 3.5 Z M 2 16.5 L 2 15.5 L 2 14.5 C 2 14.362 2.056 14.237 2.147 14.147 C 2.237 14.056 2.362 14 2.5 14 L 3.5 14 L 4.5 14 C 4.638 14 4.763 14.056 4.854 14.147 C 4.944 14.237 5 14.362 5 14.5 L 5 15.5 L 5 16.5 C 5 16.638 4.944 16.763 4.854 16.854 C 4.763 16.944 4.638 17 4.5 17 L 3.5 17 L 2.5 17 C 2.362 17 2.237 16.944 2.147 16.854 C 2.056 16.763 2 16.638 2 16.5 Z M 3 16 L 3.5 16 L 4 16 L 4 15.5 L 4 15 L 3.5 15 L 3 15 L 3 15.5 Z M 7 12.5 L 7 15.5 L 7 18.5 C 7 18.638 6.944 18.763 6.854 18.854 C 6.763 18.944 6.638 19 6.5 19 L 3.5 19 L 0.5 19 C 0.362 19 0.237 18.944 0.147 18.854 C 0.056 18.763 0 18.638 0 18.5 L 0 15.5 L 0 12.5 C 0 12.362 0.056 12.237 0.147 12.147 C 0.237 12.056 0.362 12 0.5 12 L 3.5 12 L 6.5 12 C 6.638 12 6.763 12.056 6.854 12.147 C 6.944 12.237 7 12.362 7 12.5 Z M 6 13 L 3.5 13 L 1 13 L 1 15.5 L 1 18 L 3.5 18 L 6 18 L 6 15.5 Z M 14 4.5 L 14 3.5 L 14 2.5 C 14 2.362 14.056 2.237 14.147 2.147 C 14.237 2.056 14.362 2 14.5 2 L 15.5 2 L 16.5 2 C 16.638 2 16.763 2.056 16.854 2.147 C 16.944 2.237 17 2.362 17 2.5 L 17 3.5 L 17 4.5 C 17 4.638 16.944 4.763 16.854 4.854 C 16.763 4.944 16.638 5 16.5 5 L 15.5 5 L 14.5 5 C 14.362 5 14.237 4.944 14.147 4.854 C 14.056 4.763 14 4.638 14 4.5 Z M 15 4 L 15.5 4 L 16 4 L 16 3.5 L 16 3 L 15.5 3 L 15 3 L 15 3.5 Z M 19 0.5 L 19 3.5 L 19 6.5 C 19 6.638 18.944 6.763 18.854 6.854 C 18.763 6.944 18.638 7 18.5 7 L 15.5 7 L 12.5 7 C 12.362 7 12.237 6.944 12.147 6.854 C 12.056 6.763 12 6.638 12 6.5 L 12 3.5 L 12 0.5 C 12 0.362 12.056 0.237 12.147 0.147 C 12.237 0.056 12.362 0 12.5 0 L 15.5 0 L 18.5 0 C 18.638 0 18.763 0.056 18.854 0.147 C 18.944 0.237 19 0.362 19 0.5 Z M 18 1 L 15.5 1 L 13 1 L 13 3.5 L 13 6 L 15.5 6 L 18 6 L 18 3.5 Z M 8.067 0.75 C 7.971 0.584 7.983 0.396 8.067 0.25 C 8.151 0.104 8.308 0 8.5 0 L 9.5 0 L 10.5 0 C 10.59 0 10.676 0.024 10.75 0.067 C 10.825 0.11 10.888 0.173 10.933 0.25 C 11.029 0.417 11.017 0.604 10.933 0.75 C 10.849 0.896 10.692 1 10.5 1 L 9.5 1 L 8.5 1 C 8.411 1 8.325 0.976 8.25 0.933 C 8.175 0.89 8.112 0.828 8.067 0.75 Z M 8.067 4.75 C 7.971 4.584 7.983 4.396 8.067 4.25 C 8.151 4.104 8.308 4 8.5 4 L 9.5 4 L 10.5 4 C 10.59 4 10.676 4.024 10.75 4.067 C 10.825 4.11 10.888 4.172 10.933 4.25 C 11.029 4.417 11.017 4.604 10.933 4.75 C 10.849 4.896 10.692 5 10.5 5 L 9.5 5 L 8.5 5 C 8.411 5 8.325 4.976 8.25 4.933 C 8.175 4.89 8.112 4.828 8.067 4.75 Z M 6.933 10.25 C 7.029 10.417 7.017 10.604 6.933 10.75 C 6.849 10.896 6.692 11 6.5 11 L 5.5 11 L 4.5 11 C 4.41 11 4.324 10.976 4.25 10.933 C 4.175 10.89 4.111 10.828 4.067 10.75 C 3.971 10.584 3.983 10.396 4.067 10.25 C 4.151 10.104 4.307 10 4.5 10 L 5.5 10 L 6.5 10 C 6.589 10 6.675 10.024 6.75 10.067 C 6.825 10.11 6.888 10.172 6.933 10.25 Z M 2.5 9 C 2.411 9 2.325 8.976 2.25 8.933 C 2.175 8.89 2.112 8.828 2.067 8.75 C 1.971 8.584 1.983 8.396 2.067 8.25 C 2.151 8.104 2.308 8 2.5 8 L 3.5 8 L 4.5 8 C 4.59 8 4.676 8.024 4.75 8.067 C 4.825 8.11 4.889 8.172 4.933 8.25 C 5.029 8.417 5.017 8.604 4.933 8.75 C 4.849 8.896 4.693 9 4.5 9 L 3.5 9 Z M 10.75 2.067 C 10.917 2.163 11 2.332 11 2.5 C 11 2.669 10.917 2.837 10.75 2.933 C 10.584 3.029 10.396 3.017 10.25 2.933 C 10.104 2.849 10 2.693 10 2.5 C 10 2.362 10.056 2.237 10.147 2.147 C 10.237 2.056 10.362 2 10.5 2 C 10.544 2 10.588 2.006 10.63 2.017 C 10.672 2.028 10.712 2.045 10.75 2.067 Z M 8 8 C 8 7.732 8.072 7.474 8.201 7.25 C 8.331 7.026 8.518 6.835 8.75 6.701 C 9.25 6.413 9.813 6.448 10.25 6.701 C 10.688 6.954 11 7.422 11 8 C 10.997 8.262 10.935 8.517 10.824 8.747 C 10.713 8.978 10.552 9.184 10.35 9.35 C 10.23 9.475 10.143 9.567 10.085 9.664 C 10.028 9.76 10 9.86 10 10 L 10 10.25 L 10 10.5 C 10 10.59 9.976 10.676 9.933 10.75 C 9.89 10.825 9.828 10.888 9.75 10.933 C 9.583 11.029 9.396 11.017 9.25 10.933 C 9.104 10.849 9 10.692 9 10.5 L 9 10.25 L 9 10 C 9.003 9.738 9.065 9.484 9.176 9.253 C 9.287 9.023 9.448 8.816 9.65 8.65 C 9.77 8.525 9.857 8.433 9.915 8.336 C 9.972 8.24 10 8.14 10 8 C 10 7.911 9.976 7.825 9.933 7.75 C 9.89 7.675 9.828 7.611 9.75 7.567 C 9.584 7.471 9.396 7.483 9.25 7.567 C 9.104 7.651 9 7.808 9 8 C 9 8.138 8.944 8.263 8.854 8.354 C 8.763 8.444 8.638 8.5 8.5 8.5 C 8.362 8.5 8.237 8.444 8.147 8.354 C 8.056 8.263 8 8.138 8 8 Z M 10 12 C 10 12.138 9.944 12.263 9.854 12.354 C 9.763 12.444 9.638 12.5 9.5 12.5 C 9.362 12.5 9.237 12.444 9.147 12.354 C 9.056 12.263 9 12.138 9 12 C 9 11.862 9.056 11.737 9.147 11.647 C 9.237 11.556 9.362 11.5 9.5 11.5 C 9.638 11.5 9.763 11.556 9.854 11.647 C 9.944 11.737 10 11.862 10 12 Z M 7 8.5 C 7 8.638 6.944 8.763 6.854 8.854 C 6.763 8.944 6.638 9 6.5 9 C 6.362 9 6.237 8.944 6.147 8.854 C 6.056 8.763 6 8.638 6 8.5 C 6 8.362 6.056 8.237 6.147 8.147 C 6.237 8.056 6.362 8 6.5 8 C 6.638 8 6.763 8.056 6.854 8.147 C 6.944 8.237 7 8.362 7 8.5 Z M 1 8.5 C 1 8.638 0.944 8.763 0.854 8.854 C 0.763 8.944 0.638 9 0.5 9 C 0.362 9 0.237 8.944 0.147 8.854 C 0.056 8.763 0 8.638 0 8.5 C 0 8.362 0.056 8.237 0.147 8.147 C 0.237 8.056 0.362 8 0.5 8 C 0.638 8 0.763 8.056 0.854 8.147 C 0.944 8.237 1 8.362 1 8.5 Z M 16.933 8.25 C 17.029 8.417 17.017 8.604 16.933 8.75 C 16.849 8.896 16.693 9 16.5 9 L 15.5 9 L 14.5 9 C 14.411 9 14.325 8.976 14.25 8.933 C 14.175 8.89 14.112 8.828 14.067 8.75 C 13.971 8.584 13.983 8.396 14.067 8.25 C 14.151 8.104 14.308 8 14.5 8 L 15.5 8 L 16.5 8 C 16.59 8 16.676 8.024 16.75 8.067 C 16.825 8.11 16.889 8.172 16.933 8.25 Z M 13 8.5 C 13 8.638 12.944 8.763 12.854 8.854 C 12.763 8.944 12.638 9 12.5 9 C 12.362 9 12.237 8.944 12.147 8.854 C 12.056 8.763 12 8.638 12 8.5 C 12 8.362 12.056 8.237 12.147 8.147 C 12.237 8.056 12.362 8 12.5 8 C 12.638 8 12.763 8.056 12.854 8.147 C 12.944 8.237 13 8.362 13 8.5 Z M 13 10.5 C 13 10.638 12.944 10.763 12.854 10.854 C 12.763 10.944 12.638 11 12.5 11 C 12.362 11 12.237 10.944 12.147 10.854 C 12.056 10.763 12 10.638 12 10.5 C 12 10.362 12.056 10.237 12.147 10.147 C 12.237 10.056 12.362 10 12.5 10 C 12.638 10 12.763 10.056 12.854 10.147 C 12.944 10.237 13 10.362 13 10.5 Z M 15 10.5 C 15 10.638 14.944 10.763 14.854 10.854 C 14.763 10.944 14.638 11 14.5 11 C 14.362 11 14.237 10.944 14.147 10.854 C 14.056 10.763 14 10.638 14 10.5 C 14 10.362 14.056 10.237 14.147 10.147 C 14.237 10.056 14.362 10 14.5 10 C 14.638 10 14.763 10.056 14.854 10.147 C 14.944 10.237 15 10.362 15 10.5 Z M 17 10.5 C 17 10.638 16.944 10.763 16.854 10.854 C 16.763 10.944 16.638 11 16.5 11 C 16.362 11 16.237 10.944 16.147 10.854 C 16.056 10.763 16 10.638 16 10.5 C 16 10.362 16.056 10.237 16.147 10.147 C 16.237 10.056 16.362 10 16.5 10 C 16.638 10 16.763 10.056 16.854 10.147 C 16.944 10.237 17 10.362 17 10.5 Z M 19 10.5 C 19 10.638 18.944 10.763 18.854 10.854 C 18.763 10.944 18.638 11 18.5 11 C 18.362 11 18.237 10.944 18.147 10.854 C 18.056 10.763 18 10.638 18 10.5 C 18 10.362 18.056 10.237 18.147 10.147 C 18.237 10.056 18.362 10 18.5 10 C 18.638 10 18.763 10.056 18.854 10.147 C 18.944 10.237 19 10.362 19 10.5 Z M 19 12.5 C 19 12.638 18.944 12.763 18.854 12.854 C 18.763 12.944 18.638 13 18.5 13 C 18.362 13 18.237 12.944 18.147 12.854 C 18.056 12.763 18 12.638 18 12.5 C 18 12.362 18.056 12.237 18.147 12.147 C 18.237 12.056 18.362 12 18.5 12 C 18.638 12 18.763 12.056 18.854 12.147 C 18.944 12.237 19 12.362 19 12.5 Z M 19 8.5 C 19 8.638 18.944 8.763 18.854 8.854 C 18.763 8.944 18.638 9 18.5 9 C 18.362 9 18.237 8.944 18.147 8.854 C 18.056 8.763 18 8.638 18 8.5 C 18 8.362 18.056 8.237 18.147 8.147 C 18.237 8.056 18.362 8 18.5 8 C 18.638 8 18.763 8.056 18.854 8.147 C 18.944 8.237 19 8.362 19 8.5 Z M 9 16.5 C 9 16.638 8.944 16.763 8.854 16.854 C 8.763 16.944 8.638 17 8.5 17 C 8.362 17 8.237 16.944 8.147 16.854 C 8.056 16.763 8 16.638 8 16.5 C 8 16.362 8.056 16.237 8.147 16.147 C 8.237 16.056 8.362 16 8.5 16 C 8.638 16 8.763 16.056 8.854 16.147 C 8.944 16.237 9 16.362 9 16.5 Z M 15 16.5 C 15 16.638 14.944 16.763 14.854 16.854 C 14.763 16.944 14.638 17 14.5 17 C 14.362 17 14.237 16.944 14.147 16.854 C 14.056 16.763 14 16.638 14 16.5 C 14 16.362 14.056 16.237 14.147 16.147 C 14.237 16.056 14.362 16 14.5 16 C 14.638 16 14.763 16.056 14.854 16.147 C 14.944 16.237 15 16.362 15 16.5 Z M 1 10.5 C 1 10.638 0.944 10.763 0.854 10.854 C 0.763 10.944 0.638 11 0.5 11 C 0.362 11 0.237 10.944 0.147 10.854 C 0.056 10.763 0 10.638 0 10.5 C 0 10.362 0.056 10.237 0.147 10.147 C 0.237 10.056 0.362 10 0.5 10 C 0.638 10 0.763 10.056 0.854 10.147 C 0.944 10.237 1 10.362 1 10.5 Z M 3 10.5 C 3 10.638 2.944 10.763 2.854 10.854 C 2.763 10.944 2.638 11 2.5 11 C 2.362 11 2.237 10.944 2.147 10.854 C 2.056 10.763 2 10.638 2 10.5 C 2 10.362 2.056 10.237 2.147 10.147 C 2.237 10.056 2.362 10 2.5 10 C 2.638 10 2.763 10.056 2.854 10.147 C 2.944 10.237 3 10.362 3 10.5 Z M 18.933 14.25 C 19.029 14.417 19.017 14.604 18.933 14.75 C 18.849 14.896 18.693 15 18.5 15 L 17.5 15 L 16.5 15 C 16.411 15 16.325 14.976 16.25 14.933 C 16.175 14.89 16.112 14.828 16.067 14.75 C 15.971 14.584 15.983 14.396 16.067 14.25 C 16.151 14.104 16.307 14 16.5 14 L 17.5 14 L 18.5 14 C 18.59 14 18.676 14.024 18.75 14.067 C 18.825 14.11 18.889 14.172 18.933 14.25 Z M 8.067 14.75 C 7.971 14.584 7.983 14.396 8.067 14.25 C 8.151 14.104 8.308 14 8.5 14 L 9.5 14 L 10.5 14 C 10.59 14 10.676 14.024 10.75 14.067 C 10.825 14.11 10.888 14.172 10.933 14.25 C 11.029 14.417 11.017 14.604 10.933 14.75 C 10.849 14.896 10.692 15 10.5 15 L 9.5 15 L 8.5 15 C 8.411 15 8.325 14.976 8.25 14.933 C 8.175 14.89 8.112 14.828 8.067 14.75 Z M 17 12.5 C 17 12.638 16.944 12.763 16.854 12.854 C 16.763 12.944 16.638 13 16.5 13 C 16.362 13 16.237 12.944 16.147 12.854 C 16.056 12.763 16 12.638 16 12.5 C 16 12.362 16.056 12.237 16.147 12.147 C 16.237 12.056 16.362 12 16.5 12 C 16.638 12 16.763 12.056 16.854 12.147 C 16.944 12.237 17 12.362 17 12.5 Z M 16.933 18.25 C 17.029 18.417 17.017 18.604 16.933 18.75 C 16.849 18.896 16.693 19 16.5 19 L 15.5 19 L 14.5 19 C 14.411 19 14.325 18.976 14.25 18.933 C 14.175 18.89 14.112 18.828 14.067 18.75 C 13.971 18.584 13.983 18.396 14.067 18.25 C 14.151 18.104 14.308 18 14.5 18 L 15.5 18 L 16.5 18 C 16.59 18 16.676 18.024 16.75 18.067 C 16.825 18.11 16.889 18.172 16.933 18.25 Z M 12.933 16.25 C 13.029 16.417 13.017 16.604 12.933 16.75 C 12.849 16.896 12.692 17 12.5 17 L 11.5 17 L 10.5 17 C 10.411 17 10.325 16.976 10.25 16.933 C 10.175 16.89 10.112 16.828 10.067 16.75 C 9.971 16.584 9.983 16.396 10.067 16.25 C 10.151 16.104 10.308 16 10.5 16 L 11.5 16 L 12.5 16 C 12.59 16 12.676 16.024 12.75 16.067 C 12.825 16.11 12.888 16.172 12.933 16.25 Z M 18.933 16.25 C 19.029 16.417 19.017 16.604 18.933 16.75 C 18.849 16.896 18.693 17 18.5 17 L 17.5 17 L 16.5 17 C 16.411 17 16.325 16.976 16.25 16.933 C 16.175 16.89 16.112 16.828 16.067 16.75 C 15.971 16.584 15.983 16.396 16.067 16.25 C 16.151 16.104 16.307 16 16.5 16 L 17.5 16 L 18.5 16 C 18.59 16 18.676 16.024 18.75 16.067 C 18.825 16.11 18.889 16.172 18.933 16.25 Z M 9 18.5 C 9 18.638 8.944 18.763 8.854 18.854 C 8.763 18.944 8.638 19 8.5 19 C 8.362 19 8.237 18.944 8.147 18.854 C 8.056 18.763 8 18.638 8 18.5 C 8 18.362 8.056 18.237 8.147 18.147 C 8.237 18.056 8.362 18 8.5 18 C 8.638 18 8.763 18.056 8.854 18.147 C 8.944 18.237 9 18.362 9 18.5 Z M 13 18.5 C 13 18.638 12.944 18.763 12.854 18.854 C 12.763 18.944 12.638 19 12.5 19 C 12.362 19 12.237 18.944 12.147 18.854 C 12.056 18.763 12 18.638 12 18.5 C 12 18.362 12.056 18.237 12.147 18.147 C 12.237 18.056 12.362 18 12.5 18 C 12.638 18 12.763 18.056 12.854 18.147 C 12.944 18.237 13 18.362 13 18.5 Z M 19 18.5 C 19 18.638 18.944 18.763 18.854 18.854 C 18.763 18.944 18.638 19 18.5 19 C 18.362 19 18.237 18.944 18.147 18.854 C 18.056 18.763 18 18.638 18 18.5 C 18 18.362 18.056 18.237 18.147 18.147 C 18.237 18.056 18.362 18 18.5 18 C 18.638 18 18.763 18.056 18.854 18.147 C 18.944 18.237 19 18.362 19 18.5 Z M 11 18.5 C 11 18.638 10.944 18.763 10.854 18.854 C 10.763 18.944 10.638 19 10.5 19 C 10.362 19 10.237 18.944 10.147 18.854 C 10.056 18.763 10 18.638 10 18.5 C 10 18.362 10.056 18.237 10.147 18.147 C 10.237 18.056 10.362 18 10.5 18 C 10.638 18 10.763 18.056 10.854 18.147 C 10.944 18.237 11 18.362 11 18.5 Z M 8.25 2.933 C 8.084 2.837 8 2.669 8 2.5 C 8 2.332 8.083 2.163 8.25 2.067 C 8.417 1.971 8.604 1.983 8.75 2.067 C 8.896 2.151 9 2.308 9 2.5 C 9 2.638 8.944 2.763 8.854 2.854 C 8.763 2.944 8.638 3 8.5 3 C 8.456 3 8.413 2.994 8.371 2.983 C 8.329 2.972 8.288 2.955 8.25 2.933 Z M 12 14.5 L 12 13.5 L 12 12.5 C 12 12.362 12.056 12.237 12.147 12.147 C 12.237 12.056 12.362 12 12.5 12 L 13.5 12 L 14.5 12 C 14.638 12 14.763 12.056 14.854 12.147 C 14.944 12.237 15 12.362 15 12.5 L 15 13.5 L 15 14.5 C 15 14.638 14.944 14.763 14.854 14.854 C 14.763 14.944 14.638 15 14.5 15 L 13.5 15 L 12.5 15 C 12.362 15 12.237 14.944 12.147 14.854 C 12.056 14.763 12 14.638 12 14.5 Z M 13 14 L 13.5 14 L 14 14 L 14 13.5 L 14 13 L 13.5 13 L 13 13 L 13 13.5 Z"})))}),[r.viewBox,r.d,n.isValid,n.size,n.foregroundColor,n.backgroundColor])};function dt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ft(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const ht=function(e){var t=(0,Le.useRef)("function"==typeof e?e():function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dt(Object(n),!0).forEach((function(t){ft(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e)),n=(0,Le.useRef)({get:function(e,t,n){return/(__set)$/g.test(t)?function(n){return e[t.replace(/(__set)$/g,"")]=n}:Reflect.get.apply(Reflect,arguments)},set:function(e,t,n){return Reflect.set.apply(Reflect,arguments),Reflect.set.apply(Reflect,arguments)}});return(0,Le.useRef)(new Proxy(t.current,n.current)).current};function pt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return vt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return vt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const yt=function(t){var n,r=_t($e.useContainer(),1)[0],o=Pe({text:(null===(n=t.defaultFormData)||void 0===n?void 0:n.text)||""}),a=(0,Le.useCallback)((function(e){var t;o.text=(null===(t=e.target)||void 0===t?void 0:t.value)||""}),[]),i=(0,Le.useCallback)((function(){return""!=o.text}),[]);return(0,Le.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pt(Object(n),!0).forEach((function(t){mt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},o)),r.isValid=i(),r.content=o.text}),[o.text]),(0,Le.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("label",null,"Text",(0,e.h)("b",{alt:"Field is required"},"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{type:"text",defaultValue:o.text,placeholder:"Write something..",onChange:a}))}),[])};function gt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ct(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function bt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return wt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return wt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function wt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const At=function(t){var n,r=bt($e.useContainer(),1)[0],o=Pe({link:(null===(n=t.defaultFormData)||void 0===n?void 0:n.link)||""}),a=(0,Le.useCallback)((function(e){var t;o.link=(null===(t=e.target)||void 0===t?void 0:t.value)||""}),[]),i=(0,Le.useCallback)((function(){return""!=o.link}),[]);return(0,Le.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gt(Object(n),!0).forEach((function(t){Ct(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},o)),r.isValid=i();var e=o.link;/^(https?:\/\/)/.test(e)||(e="https://".concat(e)),r.content=e}),[o.link]),(0,Le.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("label",null,"Link (URL)",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{type:"text",defaultValue:o.link,placeholder:location.href.replace(/(\/+)$/g,"").replace(/^(https?:\/\/)/g,""),onChange:a}))}),[])};const St=function(t){return(0,e.h)("label",{className:"checkbox"},(0,e.h)("input",{type:"checkbox",onChange:function(e){t.onChange&&t.onChange(e.target.checked?null==t.trueValue||t.trueValue:null!=t.falseValue&&t.falseValue)},defaultChecked:t.defaultValue==t.trueValue}),(0,e.h)("div",{className:"checkbox-checkmark"},(0,e.h)("div",{className:"checkbox-checkmark-container"},(0,e.h)("svg",{viewBox:"0 0 60.31 49.97"},(0,e.h)("polygon",{points:"21.66 49.97 0 28.31 11.31 17 21.66 27.34 49 0 60.31 11.31 21.66 49.97"})))),t.children)};function Mt(e){return function(e){if(Array.isArray(e))return Et(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Lt(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Lt(e,t){if(e){if("string"==typeof e)return Et(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Et(e,t):void 0}}function Et(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const kt=function(e,t,n,r){var o=(0,Le.useCallback)((function(r){if(!e)return n(r);Array.isArray(e)||(e=[e]);var o,a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=Lt(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(e);try{for(a.s();!(o=a.n()).done;){var i=o.value;if(i&&i.contains(r.target))return t(r)}}catch(e){a.e(e)}finally{a.f()}return n(r)}),[e]);(0,Le.useEffect)((function(){return window.addEventListener("click",o),function(){window.removeEventListener("click",o)}}),[e].concat(Mt(r)))};function xt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||Nt(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nt(e,t){if(e){if("string"==typeof e)return Ot(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ot(e,t):void 0}}function Ot(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Pt=function(t){var n,r=ht({container:null,selected:null,toggle:t.toggleNode,searchInput:null}),o=xt((0,Le.useState)(t.defaultValue),2),a=o[0],i=o[1],c=xt((0,Le.useState)(t.options||[]),2),l=c[0],u=c[1],s=xt((0,Le.useState)(!1),2),d=s[0],f=s[1],h=xe(),p=(0,Le.useCallback)((function(e){e.stopPropagation();var n=e.target.value;n!=a&&(f(!1),i(n),t.onChange&&t.onChange(n))}),[a]),m=(0,Le.useCallback)((function(e){u(e.length>0?t.options.filter((function(t){var n,r=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=Nt(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(t.keywords);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(new RegExp(e,"ig").test(o))return!0}}catch(e){r.e(e)}finally{r.f()}return!1})):t.options)}),[t.options]);return(0,Le.useEffect)((function(){r.toggle=t.toggleNode,h()}),[t.toggleNode]),(0,Le.useEffect)((function(){t.value&&i(t.value)}),[t.value]),kt([r.container,r.toggle],(function(e){return f(!(r.selected.contains(e.target)||null!=r&&r.toggle&&r.toggle.contains(e.target))||!d)}),(function(e){return f(!1)}),[d]),(0,Le.useEffect)((function(){t.search&&r.searchInput&&(r.searchInput.value="",r.searchInput.focus(),m(""))}),[d]),(0,e.h)("div",{ref:function(e){r.container=e},className:Se("input-dropdown",{"is-focus":d})},(0,e.h)("div",{ref:function(e){r.selected=e},className:"input-dropdown-selected"},null===(n=(t.options||[]).find((function(e){return e.value==a})))||void 0===n?void 0:n.label,(0,e.h)("div",{className:"input-dropdown-arrow"},(0,e.h)("svg",{viewBox:"0 0 320 512"},(0,e.h)("path",{d:"M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"})))),(0,e.h)("div",{className:"input-dropdown-options"},t.search&&(0,e.h)("div",{className:"input-dropdown-search"},(0,e.h)("input",{ref:function(e){r.searchInput=e},type:"text",placeholder:t.search.placeholder,onChange:function(e){return m(e.target.value)}}),(0,e.h)("div",{className:"input-dropdown-search-shadow"})),(0,e.h)("div",{className:"input-dropdown-list"},l.map((function(n){return(0,e.h)("label",{className:Se({"is-selected":n.value==a})},(0,e.h)("input",{type:"radio",name:t.name||"undefined",value:n.value,defaultChecked:n.value==t.defaultValue,onChange:p}),n.label)})))))};function It(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Rt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function jt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Tt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Tt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Tt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Bt=function(t){var n,r,o,a,i=jt($e.useContainer(),1)[0],c=Pe({ssid:(null===(n=t.defaultFormData)||void 0===n?void 0:n.ssid)||"",password:(null===(r=t.defaultFormData)||void 0===r?void 0:r.password)||"",encryption:(null===(o=t.defaultFormData)||void 0===o?void 0:o.encryption)||"WPA",hide:(null===(a=t.defaultFormData)||void 0===a?void 0:a.hide)||""}),l=(0,Le.useCallback)((function(){return""!=c.ssid}),[]);return(0,Le.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?It(Object(n),!0).forEach((function(t){Rt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):It(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},c)),i.isValid=l(),i.content="WIFI:S:".concat(c.ssid,";P:").concat(c.password,";T:").concat(c.encryption,";H:").concat(c.hide,";")}),[c.ssid,c.password,c.encryption,c.hide]),(0,Le.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("label",null,"Wifi Name (SSID)",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{type:"text",placeholder:"SSID",defaultValue:c.ssid,onChange:function(e){var t;c.ssid=(null===(t=e.target)||void 0===t?void 0:t.value)||""}}),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,"Password"),(0,e.h)("div",{className:"h-8"}),(0,e.h)("input",{type:"text",placeholder:"Password",defaultValue:c.password,onChange:function(e){var t;c.password=(null===(t=e.target)||void 0===t?void 0:t.value)||""}}),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,"Encryption"),(0,e.h)("div",{className:"h-8"}),(0,e.h)(Pt,{name:"encryption",options:[{label:"No encryption",value:"nopass"},{label:"WPA/WPA2",value:"WPA"},{label:"WEP",value:"WEP"}],defaultValue:c.encryption,onChange:function(e){c.encryption=e}}),(0,e.h)("div",{className:"h-16"}),(0,e.h)(St,{trueValue:"true",falseValue:"",defaultValue:c.hide,onChange:function(e){c.hide=e}},"Is hidden network"))}),[])},Dt=JSON.parse('[{"name":"Afghanistan","dial_code":"+93","code":"AF"},{"name":"Aland Islands","dial_code":"+358","code":"AX"},{"name":"Albania","dial_code":"+355","code":"AL"},{"name":"Algeria","dial_code":"+213","code":"DZ"},{"name":"AmericanSamoa","dial_code":"+1684","code":"AS"},{"name":"Andorra","dial_code":"+376","code":"AD"},{"name":"Angola","dial_code":"+244","code":"AO"},{"name":"Anguilla","dial_code":"+1264","code":"AI"},{"name":"Antarctica","dial_code":"+672","code":"AQ"},{"name":"Antigua and Barbuda","dial_code":"+1268","code":"AG"},{"name":"Argentina","dial_code":"+54","code":"AR"},{"name":"Armenia","dial_code":"+374","code":"AM"},{"name":"Aruba","dial_code":"+297","code":"AW"},{"name":"Australia","dial_code":"+61","code":"AU"},{"name":"Austria","dial_code":"+43","code":"AT"},{"name":"Azerbaijan","dial_code":"+994","code":"AZ"},{"name":"Bahamas","dial_code":"+1242","code":"BS"},{"name":"Bahrain","dial_code":"+973","code":"BH"},{"name":"Bangladesh","dial_code":"+880","code":"BD"},{"name":"Barbados","dial_code":"+1246","code":"BB"},{"name":"Belarus","dial_code":"+375","code":"BY"},{"name":"Belgium","dial_code":"+32","code":"BE"},{"name":"Belize","dial_code":"+501","code":"BZ"},{"name":"Benin","dial_code":"+229","code":"BJ"},{"name":"Bermuda","dial_code":"+1441","code":"BM"},{"name":"Bhutan","dial_code":"+975","code":"BT"},{"name":"Bolivia, Plurinational State of","dial_code":"+591","code":"BO"},{"name":"Bosnia and Herzegovina","dial_code":"+387","code":"BA"},{"name":"Botswana","dial_code":"+267","code":"BW"},{"name":"Brazil","dial_code":"+55","code":"BR"},{"name":"British Indian Ocean Territory","dial_code":"+246","code":"IO"},{"name":"Brunei Darussalam","dial_code":"+673","code":"BN"},{"name":"Bulgaria","dial_code":"+359","code":"BG"},{"name":"Burkina Faso","dial_code":"+226","code":"BF"},{"name":"Burundi","dial_code":"+257","code":"BI"},{"name":"Cambodia","dial_code":"+855","code":"KH"},{"name":"Cameroon","dial_code":"+237","code":"CM"},{"name":"Canada","dial_code":"+1","code":"CA"},{"name":"Cape Verde","dial_code":"+238","code":"CV"},{"name":"Cayman Islands","dial_code":"+ 345","code":"KY"},{"name":"Central African Republic","dial_code":"+236","code":"CF"},{"name":"Chad","dial_code":"+235","code":"TD"},{"name":"Chile","dial_code":"+56","code":"CL"},{"name":"China","dial_code":"+86","code":"CN"},{"name":"Christmas Island","dial_code":"+61","code":"CX"},{"name":"Cocos (Keeling) Islands","dial_code":"+61","code":"CC"},{"name":"Colombia","dial_code":"+57","code":"CO"},{"name":"Comoros","dial_code":"+269","code":"KM"},{"name":"Congo","dial_code":"+242","code":"CG"},{"name":"Congo, The Democratic Republic of the Congo","dial_code":"+243","code":"CD"},{"name":"Cook Islands","dial_code":"+682","code":"CK"},{"name":"Costa Rica","dial_code":"+506","code":"CR"},{"name":"Cote d\'Ivoire","dial_code":"+225","code":"CI"},{"name":"Croatia","dial_code":"+385","code":"HR"},{"name":"Cuba","dial_code":"+53","code":"CU"},{"name":"Cyprus","dial_code":"+357","code":"CY"},{"name":"Czech Republic","dial_code":"+420","code":"CZ"},{"name":"Denmark","dial_code":"+45","code":"DK"},{"name":"Djibouti","dial_code":"+253","code":"DJ"},{"name":"Dominica","dial_code":"+1767","code":"DM"},{"name":"Dominican Republic","dial_code":"+1849","code":"DO"},{"name":"Ecuador","dial_code":"+593","code":"EC"},{"name":"Egypt","dial_code":"+20","code":"EG"},{"name":"El Salvador","dial_code":"+503","code":"SV"},{"name":"Equatorial Guinea","dial_code":"+240","code":"GQ"},{"name":"Eritrea","dial_code":"+291","code":"ER"},{"name":"Estonia","dial_code":"+372","code":"EE"},{"name":"Ethiopia","dial_code":"+251","code":"ET"},{"name":"Falkland Islands (Malvinas)","dial_code":"+500","code":"FK"},{"name":"Faroe Islands","dial_code":"+298","code":"FO"},{"name":"Fiji","dial_code":"+679","code":"FJ"},{"name":"Finland","dial_code":"+358","code":"FI"},{"name":"France","dial_code":"+33","code":"FR"},{"name":"French Guiana","dial_code":"+594","code":"GF"},{"name":"French Polynesia","dial_code":"+689","code":"PF"},{"name":"Gabon","dial_code":"+241","code":"GA"},{"name":"Gambia","dial_code":"+220","code":"GM"},{"name":"Georgia","dial_code":"+995","code":"GE"},{"name":"Germany","dial_code":"+49","code":"DE"},{"name":"Ghana","dial_code":"+233","code":"GH"},{"name":"Gibraltar","dial_code":"+350","code":"GI"},{"name":"Greece","dial_code":"+30","code":"GR"},{"name":"Greenland","dial_code":"+299","code":"GL"},{"name":"Grenada","dial_code":"+1473","code":"GD"},{"name":"Guadeloupe","dial_code":"+590","code":"GP"},{"name":"Guam","dial_code":"+1671","code":"GU"},{"name":"Guatemala","dial_code":"+502","code":"GT"},{"name":"Guernsey","dial_code":"+44","code":"GG"},{"name":"Guinea","dial_code":"+224","code":"GN"},{"name":"Guinea-Bissau","dial_code":"+245","code":"GW"},{"name":"Guyana","dial_code":"+595","code":"GY"},{"name":"Haiti","dial_code":"+509","code":"HT"},{"name":"Holy See (Vatican City State)","dial_code":"+379","code":"VA"},{"name":"Honduras","dial_code":"+504","code":"HN"},{"name":"Hong Kong","dial_code":"+852","code":"HK"},{"name":"Hungary","dial_code":"+36","code":"HU"},{"name":"Iceland","dial_code":"+354","code":"IS"},{"name":"India","dial_code":"+91","code":"IN"},{"name":"Indonesia","dial_code":"+62","code":"ID"},{"name":"Iran, Islamic Republic of Persian Gulf","dial_code":"+98","code":"IR"},{"name":"Iraq","dial_code":"+964","code":"IQ"},{"name":"Ireland","dial_code":"+353","code":"IE"},{"name":"Isle of Man","dial_code":"+44","code":"IM"},{"name":"Israel","dial_code":"+972","code":"IL"},{"name":"Italy","dial_code":"+39","code":"IT"},{"name":"Jamaica","dial_code":"+1876","code":"JM"},{"name":"Japan","dial_code":"+81","code":"JP"},{"name":"Jersey","dial_code":"+44","code":"JE"},{"name":"Jordan","dial_code":"+962","code":"JO"},{"name":"Kazakhstan","dial_code":"+77","code":"KZ"},{"name":"Kenya","dial_code":"+254","code":"KE"},{"name":"Kiribati","dial_code":"+686","code":"KI"},{"name":"Korea, Democratic People\'s Republic of Korea","dial_code":"+850","code":"KP"},{"name":"Korea, Republic of South Korea","dial_code":"+82","code":"KR"},{"name":"Kuwait","dial_code":"+965","code":"KW"},{"name":"Kyrgyzstan","dial_code":"+996","code":"KG"},{"name":"Laos","dial_code":"+856","code":"LA"},{"name":"Latvia","dial_code":"+371","code":"LV"},{"name":"Lebanon","dial_code":"+961","code":"LB"},{"name":"Lesotho","dial_code":"+266","code":"LS"},{"name":"Liberia","dial_code":"+231","code":"LR"},{"name":"Libyan Arab Jamahiriya","dial_code":"+218","code":"LY"},{"name":"Liechtenstein","dial_code":"+423","code":"LI"},{"name":"Lithuania","dial_code":"+370","code":"LT"},{"name":"Luxembourg","dial_code":"+352","code":"LU"},{"name":"Macao","dial_code":"+853","code":"MO"},{"name":"Macedonia","dial_code":"+389","code":"MK"},{"name":"Madagascar","dial_code":"+261","code":"MG"},{"name":"Malawi","dial_code":"+265","code":"MW"},{"name":"Malaysia","dial_code":"+60","code":"MY"},{"name":"Maldives","dial_code":"+960","code":"MV"},{"name":"Mali","dial_code":"+223","code":"ML"},{"name":"Malta","dial_code":"+356","code":"MT"},{"name":"Marshall Islands","dial_code":"+692","code":"MH"},{"name":"Martinique","dial_code":"+596","code":"MQ"},{"name":"Mauritania","dial_code":"+222","code":"MR"},{"name":"Mauritius","dial_code":"+230","code":"MU"},{"name":"Mayotte","dial_code":"+262","code":"YT"},{"name":"Mexico","dial_code":"+52","code":"MX"},{"name":"Micronesia, Federated States of Micronesia","dial_code":"+691","code":"FM"},{"name":"Moldova","dial_code":"+373","code":"MD"},{"name":"Monaco","dial_code":"+377","code":"MC"},{"name":"Mongolia","dial_code":"+976","code":"MN"},{"name":"Montenegro","dial_code":"+382","code":"ME"},{"name":"Montserrat","dial_code":"+1664","code":"MS"},{"name":"Morocco","dial_code":"+212","code":"MA"},{"name":"Mozambique","dial_code":"+258","code":"MZ"},{"name":"Myanmar","dial_code":"+95","code":"MM"},{"name":"Namibia","dial_code":"+264","code":"NA"},{"name":"Nauru","dial_code":"+674","code":"NR"},{"name":"Nepal","dial_code":"+977","code":"NP"},{"name":"Netherlands","dial_code":"+31","code":"NL"},{"name":"New Caledonia","dial_code":"+687","code":"NC"},{"name":"New Zealand","dial_code":"+64","code":"NZ"},{"name":"Nicaragua","dial_code":"+505","code":"NI"},{"name":"Niger","dial_code":"+227","code":"NE"},{"name":"Nigeria","dial_code":"+234","code":"NG"},{"name":"Niue","dial_code":"+683","code":"NU"},{"name":"Norfolk Island","dial_code":"+672","code":"NF"},{"name":"Northern Mariana Islands","dial_code":"+1670","code":"MP"},{"name":"Norway","dial_code":"+47","code":"NO"},{"name":"Oman","dial_code":"+968","code":"OM"},{"name":"Pakistan","dial_code":"+92","code":"PK"},{"name":"Palau","dial_code":"+680","code":"PW"},{"name":"Palestinian Territory, Occupied","dial_code":"+970","code":"PS"},{"name":"Panama","dial_code":"+507","code":"PA"},{"name":"Papua New Guinea","dial_code":"+675","code":"PG"},{"name":"Paraguay","dial_code":"+595","code":"PY"},{"name":"Peru","dial_code":"+51","code":"PE"},{"name":"Philippines","dial_code":"+63","code":"PH"},{"name":"Pitcairn","dial_code":"+872","code":"PN"},{"name":"Poland","dial_code":"+48","code":"PL"},{"name":"Portugal","dial_code":"+351","code":"PT"},{"name":"Puerto Rico","dial_code":"+1939","code":"PR"},{"name":"Qatar","dial_code":"+974","code":"QA"},{"name":"Romania","dial_code":"+40","code":"RO"},{"name":"Russia","dial_code":"+7","code":"RU"},{"name":"Rwanda","dial_code":"+250","code":"RW"},{"name":"Reunion","dial_code":"+262","code":"RE"},{"name":"Saint Barthelemy","dial_code":"+590","code":"BL"},{"name":"Saint Helena, Ascension and Tristan Da Cunha","dial_code":"+290","code":"SH"},{"name":"Saint Kitts and Nevis","dial_code":"+1869","code":"KN"},{"name":"Saint Lucia","dial_code":"+1758","code":"LC"},{"name":"Saint Martin","dial_code":"+590","code":"MF"},{"name":"Saint Pierre and Miquelon","dial_code":"+508","code":"PM"},{"name":"Saint Vincent and the Grenadines","dial_code":"+1784","code":"VC"},{"name":"Samoa","dial_code":"+685","code":"WS"},{"name":"San Marino","dial_code":"+378","code":"SM"},{"name":"Sao Tome and Principe","dial_code":"+239","code":"ST"},{"name":"Saudi Arabia","dial_code":"+966","code":"SA"},{"name":"Senegal","dial_code":"+221","code":"SN"},{"name":"Serbia","dial_code":"+381","code":"RS"},{"name":"Seychelles","dial_code":"+248","code":"SC"},{"name":"Sierra Leone","dial_code":"+232","code":"SL"},{"name":"Singapore","dial_code":"+65","code":"SG"},{"name":"Slovakia","dial_code":"+421","code":"SK"},{"name":"Slovenia","dial_code":"+386","code":"SI"},{"name":"Solomon Islands","dial_code":"+677","code":"SB"},{"name":"Somalia","dial_code":"+252","code":"SO"},{"name":"South Africa","dial_code":"+27","code":"ZA"},{"name":"South Sudan","dial_code":"+211","code":"SS"},{"name":"South Georgia and the South Sandwich Islands","dial_code":"+500","code":"GS"},{"name":"Spain","dial_code":"+34","code":"ES"},{"name":"Sri Lanka","dial_code":"+94","code":"LK"},{"name":"Sudan","dial_code":"+249","code":"SD"},{"name":"Suriname","dial_code":"+597","code":"SR"},{"name":"Svalbard and Jan Mayen","dial_code":"+47","code":"SJ"},{"name":"Swaziland","dial_code":"+268","code":"SZ"},{"name":"Sweden","dial_code":"+46","code":"SE"},{"name":"Switzerland","dial_code":"+41","code":"CH"},{"name":"Syrian Arab Republic","dial_code":"+963","code":"SY"},{"name":"Taiwan","dial_code":"+886","code":"TW"},{"name":"Tajikistan","dial_code":"+992","code":"TJ"},{"name":"Tanzania, United Republic of Tanzania","dial_code":"+255","code":"TZ"},{"name":"Thailand","dial_code":"+66","code":"TH"},{"name":"Timor-Leste","dial_code":"+670","code":"TL"},{"name":"Togo","dial_code":"+228","code":"TG"},{"name":"Tokelau","dial_code":"+690","code":"TK"},{"name":"Tonga","dial_code":"+676","code":"TO"},{"name":"Trinidad and Tobago","dial_code":"+1868","code":"TT"},{"name":"Tunisia","dial_code":"+216","code":"TN"},{"name":"Turkey","dial_code":"+90","code":"TR"},{"name":"Turkmenistan","dial_code":"+993","code":"TM"},{"name":"Turks and Caicos Islands","dial_code":"+1649","code":"TC"},{"name":"Tuvalu","dial_code":"+688","code":"TV"},{"name":"Uganda","dial_code":"+256","code":"UG"},{"name":"Ukraine","dial_code":"+380","code":"UA"},{"name":"United Arab Emirates","dial_code":"+971","code":"AE"},{"name":"United Kingdom","dial_code":"+44","code":"GB"},{"name":"United States","dial_code":"+1","code":"US"},{"name":"Uruguay","dial_code":"+598","code":"UY"},{"name":"Uzbekistan","dial_code":"+998","code":"UZ"},{"name":"Vanuatu","dial_code":"+678","code":"VU"},{"name":"Venezuela, Bolivarian Republic of Venezuela","dial_code":"+58","code":"VE"},{"name":"Vietnam","dial_code":"+84","code":"VN"},{"name":"Virgin Islands, British","dial_code":"+1284","code":"VG"},{"name":"Virgin Islands, U.S.","dial_code":"+1340","code":"VI"},{"name":"Wallis and Futuna","dial_code":"+681","code":"WF"},{"name":"Yemen","dial_code":"+967","code":"YE"},{"name":"Zambia","dial_code":"+260","code":"ZM"},{"name":"Zimbabwe","dial_code":"+263","code":"ZW"}]');
/*! js-cookie v3.0.1 | MIT */
function Ut(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}var zt=function e(t,n){function r(e,r,o){if("undefined"!=typeof document){"number"==typeof(o=Ut({},n,o)).expires&&(o.expires=new Date(Date.now()+864e5*o.expires)),o.expires&&(o.expires=o.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var a="";for(var i in o)o[i]&&(a+="; "+i,!0!==o[i]&&(a+="="+o[i].split(";")[0]));return document.cookie=e+"="+t.write(r,e)+a}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],r={},o=0;o<n.length;o++){var a=n[o].split("="),i=a.slice(1).join("=");try{var c=decodeURIComponent(a[0]);if(r[c]=t.read(i,c),e===c)break}catch(e){}}return e?r[e]:r}},remove:function(e,t){r(e,"",Ut({},t,{expires:-1}))},withAttributes:function(t){return e(this.converter,Ut({},this.attributes,t))},withConverter:function(t){return e(Ut({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"});const Ht=zt;var Ft;function Yt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Zt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Zt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Gt=function(t){var n,r,o=ht({inputDialCode:null}),a=$t($e.useContainer(),1)[0],i=Pe({dialCode:(null===(n=t.defaultFormData)||void 0===n?void 0:n.dialCode)||"0",number:(null===(r=t.defaultFormData)||void 0===r?void 0:r.number)||""}),c=(0,Le.useCallback)((function(){return""!=i.number}),[]);return(0,Le.useEffect)((function(){t.saveFormData(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yt(Object(n),!0).forEach((function(t){Vt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},i)),a.isValid=c(),a.content="tel:".concat(i.dialCode).concat(i.number.replace(/^0/g,""))}),[i.dialCode,i.number]),We((function(){if("0"==i.dialCode){var e=Ht.get("dial_code");if(e)i.dialCode=e;else{if(Ht.get("country_code")){var t=Dt.find((function(e){return e.code.toUpperCase()==data.countryCode.toUpperCase()}));if(null==t||!t.dial_code)return;return Ht.set("dial_code",t.dial_code),void(i.dialCode=t.dial_code)}fetch("http://ip-api.com/json").then((function(e){return e.json()})).then((function(e){if(null!=e&&e.countryCode){var t=Dt.find((function(t){return t.code.toUpperCase()==e.countryCode.toUpperCase()}));null!=t&&t.dial_code&&(null!=t&&t.code&&Ht.set("country_code",t.code),Ht.set("dial_code",t.dial_code),i.dialCode=t.dial_code)}}))}}})),(0,Le.useMemo)((function(){return(0,e.h)("div",{className:"form-phonenumber"},(0,e.h)("label",null,"Phone Number",(0,e.h)("b",null,"*")),(0,e.h)("div",{className:"h-8"}),(0,e.h)("div",{className:Me(Ft||(t=["display: flex; justify-content: center;"],n||(n=t.slice(0)),Ft=Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(n)}}))))},(0,e.h)("input",{type:"text",placeholder:"+00",className:"dial-code",value:i.dialCode,ref:function(e){o.inputDialCode=e},readOnly:!0}),(0,e.h)("input",{type:"text",placeholder:"Phone Number",className:"phonenumber",defaultValue:i.number,onChange:function(e){i.number=e.target.value}})),(0,e.h)("div",{className:"dial-code-dropdown"},(0,e.h)(Pt,{name:"dial_code",value:i.dialCode,options:Dt.map((function(t){return{label:(0,e.h)(e.HY,null,(0,e.h)("div",{className:"flag"},(0,e.h)("img",{src:"https://raw.githubusercontent.com/lipis/flag-icons/main/flags/4x3/".concat(t.code.toLowerCase(),".svg")})),(0,e.h)("span",null,t.name),(0,e.h)("i",null,"(",t.dial_code,")")),value:t.dial_code,keywords:[t.name,t.code,t.dial_code]}})),onChange:i.dialCode__set,toggleNode:o.inputDialCode,search:{placeholder:"Search country.."}})));var t,n}),[i.dialCode])};function Kt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Wt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Wt(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Jt=[{label:"Raw Text",type:1,form:yt},{label:"Link",type:2,form:At},{label:"Wifi",type:3,form:Bt},{label:"Phone",type:4,form:Gt},{label:"Location",type:5,form:function(t){return(0,Le.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("label",null,"Location"),(0,e.h)("div",{className:"h-8"}),(0,e.h)("i",null,"Coming Soon – Under Construction"))}),[])}},{label:"Crypto / Bitcoin",type:6,form:function(t){return(0,Le.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("label",null,"Crypto"),(0,e.h)("div",{className:"h-8"}),(0,e.h)("i",null,"Coming Soon – Under Construction"))}),[])}}];const qt=function(){var t,n=ht({}),r=Kt((0,Ge.eJ)(2),2),o=r[0],a=r[1],i=null===(t=Jt.find((function(e){return e.type==o})))||void 0===t?void 0:t.form,c=(0,Ge.I4)((function(e){n[o]=e}),[n,o]);return(0,e.h)(e.HY,null,(0,e.h)("div",{className:"type-list"},Jt.map((function(t){return(0,e.h)("a",{className:Se({"is-selected":t.type==o}),onClick:function(e){a(t.type)}},t.label)}))),(0,e.h)("div",{className:"h-16"}),(0,e.h)(i,{defaultFormData:n[o],saveFormData:c}))};var Qt,Xt=function(e,t,n){return Math.min(Math.max(e,t),n)},en=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return Math.round(e/t)*t},tn=function(e,t,n,r,o){return r+(e-t)*(o-r)/(n-t)},nn=function(e){var t=0,n=0;do{t+=e.offsetTop||0,n+=e.offsetLeft||0,e=e.offsetParent}while(e);return{top:t,left:n}};const rn=function(t){var n=ht({slider:null}),r=Pe((function(){var e=t.min||0,n=t.max||100,r=t.step||1,o=n-e,a=t.defaultValue||t.value||e;return{min:e,max:n,step:r,range:o,isFocus:!1,value:a,pvalue:tn(a,e,n,0,100)}})),o=function(e){r.isFocus=!1,window.removeEventListener("mousemove",a)},a=function(e){if(n.slider&&r.isFocus){var o=nn(n.slider).left,a=n.slider.clientWidth,i=e.x;r.pvalue=tn(i,o,o+a,0,100),r.pvalue=en(r.pvalue,r.step/r.range*100),r.pvalue=Xt(r.pvalue,0,100),r.value=tn(r.pvalue,0,100,r.min,r.max),r.value=en(r.value,r.step),t.onChange&&t.onChange(r.value)}};return We((function(){return window.addEventListener("mouseup",o),function(){window.removeEventListener("mouseup",o),window.removeEventListener("mousemove",a)}})),(0,Le.useEffect)((function(){r.value=t.value,r.pvalue=tn(r.value,r.min,r.max,0,100)}),[t.value]),(0,e.h)("div",{className:Se("input-range",r.isFocus?"is-focus":""),onMouseDown:function(e){if(e.nativeEvent.stopPropagation(),e.preventDefault(),n.slider){var o=nn(n.slider).left,i=n.slider.clientWidth,c=e.x;r.pvalue=tn(c,o,o+i,0,100),r.pvalue=en(r.pvalue,r.step/r.range*100),r.pvalue=Xt(r.pvalue,0,100),r.value=tn(r.pvalue,0,100,r.min,r.max),r.value=en(r.value,r.step),r.isFocus=!0,t.onChange&&t.onChange(r.value),window.addEventListener("mousemove",a)}}},(0,e.h)("div",{className:"input-range-slider",style:t.sliderBackground?{background:t.sliderBackground}:{}},(0,e.h)("div",{ref:n.slider__set,className:"input-range-slider-container"},(0,e.h)("div",{className:"input-range-button",style:{left:"".concat(r.pvalue,"%")}}),(t.axis||[]).map((function(t){return(0,e.h)("div",{className:Se("input-range-axis",Me(Qt||(n=["left: ","%;"],r||(r=n.slice(0)),Qt=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(r)}}))),100*t))});var n,r})))))};var on;function an(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return cn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return cn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const ln=function(t){var n=an($e.useContainer(),1)[0];return(0,Le.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("div",{className:Me(on||(t=["display: flex; justify-content: space-between;"],r||(r=t.slice(0)),on=Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(r)}}))))},(0,e.h)("label",null,"Margin"),(0,e.h)("small",null,(0,e.h)("output",null,"x",n.margin))),(0,e.h)("div",{className:"h-2"}),(0,e.h)(rn,{min:1,max:4,defaultValue:n.margin,onChange:n.margin__set,axis:[.3333,.6667]}));var t,r}),[n.margin])};var un;function sn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return dn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return dn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const fn=function(t){var n,r,o=sn($e.useContainer(),1)[0],a=Pe({value:0});return(0,Le.useEffect)((function(){o.roundCorner=Math.min(a.value,100),o.eyeRoundCorner=Math.max(0,a.value-100)}),[a.value]),(0,e.h)(e.HY,null,(0,e.h)("div",{className:Me(un||(n=["display: flex; justify-content: space-between;"],r||(r=n.slice(0)),un=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(r)}}))))},(0,e.h)("label",null,"Smoothness"),(0,e.h)("small",null,(0,e.h)("output",null,0==a.value?"Sharp":a.value<=100?(0,e.h)(e.HY,null,o.roundCorner,"%"):(0,e.h)(e.HY,null,"Pixel ",o.roundCorner,"%,  Eyes ",o.eyeRoundCorner,"%")))),(0,e.h)("div",{className:"h-2"}),(0,e.h)(rn,{type:"range",min:0,max:200,step:5,defaultValue:0,onChange:a.value__set,axis:[.5]}))};function hn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return pn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return pn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var mn=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t*Math.min(n,1-n)+n;return[e,r?2-2*n/r:0,r]},_n=function(t){var n=hn((0,Le.useState)(t.value),2),r=n[0],o=n[1],a=(0,Le.useCallback)((function(e){var n=e.target.value;t.postfix&&(n=n.replace(new RegExp("(\\".concat(t.postfix,")$"),"g"),"")),o(n),t.onChange&&t.onChange(n)}),[r]);return(0,Le.useEffect)((function(){o(t.value)}),[t.value]),(0,e.h)("input",{type:"text",value:"".concat(r).concat(t.postfix||""),onChange:a})};const vn=function(t){var n=ht({container:null,preview:null,swatches:null}),r=Pe({isFocus:!1,isFocusSwatches:!1,h:t.value[0],s:t.value[1],l:t.value[2],a:t.value[3]||100,swatchesSelectionX:100*mn(t.value[0],t.value[1]/100,t.value[2]/100)[1],swatchesSelectionY:-100*mn(t.value[0],t.value[1]/100,t.value[2]/100)[2]+100});kt(n.container,(function(e){r.isFocus=!n.preview.contains(e.target)||!r.isFocus}),(function(e){r.isFocus=!1}),[n,r.isFocus]);var o=(0,Le.useCallback)((function(e){var t=e.x,o=e.y,a=nn(n.swatches),i=a.left,c=a.top,l=n.swatches.clientWidth,u=n.swatches.clientHeight;r.swatchesSelectionX=Xt(tn(t,i,i+l,0,100),0,100),r.swatchesSelectionY=Xt(tn(o,c,c+u,0,100),0,100);var s=r.h,d=1-r.swatchesSelectionY/100,f=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:n-n*t/2,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Math.min(r,1-r);return[e,o?(n-r)/o:0,r]}(s,r.swatchesSelectionX/100,d);r.s=en(100*(f[1]||0)),r.l=en(100*(f[2]||0))}),[]),a=(0,Le.useCallback)((function(e){r.isFocusSwatches=!1,window.removeEventListener("mousemove",o)}),[]);return We((function(){return window.addEventListener("mouseup",a),function(){window.removeEventListener("mouseup",a),window.removeEventListener("mousemove",o)}})),(0,Le.useEffect)((function(){r.h=t.value[0],r.s=t.value[1],r.l=t.value[2],r.a=t.value[3]||100}),[t.value]),(0,Le.useEffect)((function(){if(t.onChange&&(t.onChange([r.h,r.s,r.l,r.a]),!r.isFocusSwatches)){var e=mn(r.h,r.s/100,r.l/100),n=100*e[1],o=-100*e[2]+100;r.swatchesSelectionX=n,r.swatchesSelectionY=o}}),[r.h,r.s,r.l,r.a]),(0,e.h)("div",{ref:function(e){n.container=e},className:Se("input-color-picker",{"is-focus":r.isFocus,"in-right":t.inRight})},(0,e.h)("div",{ref:function(e){n.preview=e},className:"input-color-picker-preview-container"},(0,e.h)("div",{className:"input-color-picker-preview-checker"}),(0,e.h)("div",{className:"input-color-picker-preview",style:{backgroundColor:"hsla(".concat(r.h,", ").concat(r.s,"%, ").concat(r.l,"%, ").concat(r.a,"%)")}})),(0,e.h)("div",{className:"input-color-picker-options"},(0,e.h)("div",{ref:n.swatches__set,className:"swatches",style:{background:"linear-gradient(180deg, hsla(0, 0%, 0%, 0%) 0%, hsla(0, 0%, 0%, 100%) 100%), linear-gradient(90deg, hsla(".concat(r.h,", 0%, 100%, 100%) 0%, hsla(").concat(r.h,", 100%, 50%, 100%) 100%)")},onMouseDown:function(e){e.preventDefault(),r.isFocusSwatches=!0,window.addEventListener("mousemove",o)}},(0,e.h)("div",{className:"swatches-pointer-area"},(0,e.h)("div",{className:"swatches-pointer",style:{left:"".concat(r.swatchesSelectionX,"%"),top:"".concat(r.swatchesSelectionY,"%")}}))),(0,e.h)("div",{className:"h-12"}),(0,e.h)("div",{className:"slider hue"},(0,e.h)("span",null,"H"),(0,e.h)(rn,{min:0,max:360,value:r.h,onChange:r.h__set}),(0,e.h)(_n,{value:r.h,onChange:r.h__set})),(0,e.h)("div",{className:"slider saturation"},(0,e.h)("span",null,"S"),(0,e.h)(rn,{min:0,max:100,value:r.s,onChange:r.s__set,sliderBackground:"linear-gradient(90deg, hsl(".concat(r.h,", 0%, 50%) 0%, hsl(").concat(r.h,", 100%, 50%) 100%)")}),(0,e.h)(_n,{value:r.s,onChange:r.s__set,postfix:"%"})),(0,e.h)("div",{className:"slider lightness"},(0,e.h)("span",null,"L"),(0,e.h)(rn,{min:0,max:100,value:r.l,onChange:r.l__set,sliderBackground:"linear-gradient(90deg, hsl(".concat(r.h,", ").concat(r.s,"%, 0%) 0%, hsl(").concat(r.h,", ").concat(r.s,"%, 50%) 50%, hsl(").concat(r.h,", ").concat(r.s,"%, 100%) 100%)")}),(0,e.h)(_n,{value:r.l,onChange:r.l__set,postfix:"%"}))))};var yn,gn,Cn;function bn(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}function wn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return An(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return An(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function An(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}window.SVG_CREDITS="\x3c!-- Create at example.com --\x3e";var Sn=function(t){var n=wn($e.useContainer(),1)[0];return(0,e.h)(vn,{value:n.foregroundColor,onChange:n.foregroundColor__set})},Mn=function(t){var n=wn($e.useContainer(),1)[0];return(0,Le.useMemo)((function(){return(0,e.h)(vn,{value:n.backgroundColor,onChange:n.backgroundColor__set,inRight:!0})}),[n.backgroundColor])};const Ln=function(t){var n=wn($e.useContainer(),1)[0],r=(0,Le.useCallback)((function(){var e=[n.backgroundColor,n.foregroundColor];n.foregroundColor=e[0],n.backgroundColor=e[1]}),[]);return(0,e.h)("div",{className:Se("colorpicker",Me(yn||(yn=bn(["display: flex;"]))))},(0,e.h)("div",{className:Me(gn||(gn=bn(["flex: 1;"])))},(0,e.h)("label",null,"Foreground Color"),(0,e.h)("div",{className:"h-12"}),(0,e.h)("div",{className:"h-32"},(0,e.h)(Sn,null))),(0,e.h)("div",{className:"swap"},(0,e.h)("button",{onClick:r},(0,e.h)("svg",{viewBox:"0 0 512 512"},(0,e.h)("path",{d:"M0 168v-16c0-13.255 10.745-24 24-24h360V80c0-21.367 25.899-32.042 40.971-16.971l80 80c9.372 9.373 9.372 24.569 0 33.941l-80 80C409.956 271.982 384 261.456 384 240v-48H24c-13.255 0-24-10.745-24-24zm488 152H128v-48c0-21.314-25.862-32.08-40.971-16.971l-80 80c-9.372 9.373-9.372 24.569 0 33.941l80 80C102.057 463.997 128 453.437 128 432v-48h360c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24z"})))),(0,e.h)("div",{className:Me(Cn||(Cn=bn(["flex: 1;"])))},(0,e.h)("label",null,"Background Color"),(0,e.h)("div",{className:"h-12"}),(0,e.h)("div",{className:"h-32"},(0,e.h)(Mn,null))))};var En;function kn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return xn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return xn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Nn=function(t){var n=kn(Ze.useContainer(),1)[0];return(0,Le.useMemo)((function(){return(0,e.h)(e.HY,null,(0,e.h)("div",{className:Me(En||(t=["display: flex; justify-content: space-between;"],r||(r=t.slice(0)),En=Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(r)}}))))},(0,e.h)("label",null,"Size"),(0,e.h)("small",null,(0,e.h)("output",null,n.size,"px"))),(0,e.h)("div",{className:"h-8"}),(0,e.h)(rn,{min:320,max:8e3,step:320,defaultValue:n.size,onChange:function(e){n.size=e}}));var t,r}),[n.size])};function On(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Pn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Pn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Pn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const In=function(){var t=On(Ze.useContainer(),1)[0];return(0,Le.useMemo)((function(){return(0,e.h)(St,{defaultValue:!1,onChange:t.excludeBackground__set},"Exclude background")}),[])};function Rn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return jn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return jn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Tn=function(t){var n=ht({canvas:null,dummyAnchor:null}),r=Rn($e.useContainer(),1)[0],o=Rn(Ze.useContainer(),1)[0];return(0,e.h)("div",{className:"button-download-png"},(0,e.h)("div",{className:"dummy"},(0,e.h)("canvas",{ref:n.canvas__set}),(0,e.h)("a",{ref:n.dummyAnchor__set})),(0,e.h)("button",{className:"large orange",onClick:function(e){var t=o.size;if(n.canvas&&n.dummyAnchor){var a=ot({size:r.size,shapes:r.shapes,roundCorner:r.roundCorner,eyeRoundCorner:r.eyeRoundCorner,canvas:{size:t}}),i=n.canvas,c=n.dummyAnchor;i.width=t,i.height=t;var l=i.getContext("2d");l.clearRect(0,0,t,t),o.excludeBackground||(l.fillStyle=ct(r.backgroundColor),l.fillRect(0,0,t,t)),l.fillStyle=ct(r.foregroundColor),l.fill(new Path2D(a),"evenodd"),c.download="QRCode.png",c.href=i.toDataURL("image/png"),c.click()}},disabled:!r.isValid},"PNG"))};function Bn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Dn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Dn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Un=function(t){var n=ht({dummyAnchor:null}),r=Bn($e.useContainer(),1)[0],o=Bn(Ze.useContainer(),1)[0];return(0,e.h)("div",{className:"button-download-png"},(0,e.h)("div",{className:"dummy"},(0,e.h)("a",{ref:n.dummyAnchor__set})),(0,e.h)("button",{className:"large orange",onClick:function(e){var t=o.size;if(n.dummyAnchor){var a=ot({size:r.size,shapes:r.shapes,roundCorner:r.roundCorner,eyeRoundCorner:r.eyeRoundCorner,canvas:{size:t}}),i="".concat(window.SVG_CREDITS,'\n<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ').concat(t," ").concat(t,'">\n').concat(o.excludeBackground?"":'<path d="M0,0H'.concat(t,"V").concat(t,'H0z" fill="').concat(ct(r.backgroundColor),'" />'),'\n<path d="').concat(a,'" fill-rule="evenodd" fill="').concat(ct(r.foregroundColor),'" />\n</svg>').replace(/\n/g,""),c=n.dummyAnchor;c.download="QRCode.svg",c.href="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(i),c.click()}},disabled:!r.isValid},"SVG"))};function zn(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Hn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Hn(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Fn=function(t){var n=je.useContainer(),r=zn($e.useContainer(),1)[0],o=zn(Ze.useContainer(),1)[0];return(0,e.h)("div",{className:"button-download-png"},(0,e.h)("button",{className:"large orange",onClick:function(e){var t=o.size,a=ot({size:r.size,shapes:r.shapes,roundCorner:r.roundCorner,eyeRoundCorner:r.eyeRoundCorner,canvas:{size:t}}),i='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 '.concat(t," ").concat(t,'">\n').concat(window.SVG_CREDITS,"\n").concat(o.excludeBackground?"":'<path d="M0,0H'.concat(t,"V").concat(t,'H0z" fill="').concat(ct(r.backgroundColor),'" />'),'\n<path d="').concat(a,'" fill-rule="evenodd" fill="').concat(ct(r.foregroundColor),'" />\n</svg>').replace(/\n/g,"");navigator.clipboard.writeText(i),n.push("SVG code copied to clipboard !")},disabled:!r.isValid},"SVG"))};window.SVG_CREDITS="\x3c!-- Create at example.com --\x3e";(0,e.sY)((0,e.h)(je.Provider,null,(0,e.h)($e.Provider,null,(0,e.h)(Ze.Provider,null,(0,e.h)(Je,null),(0,e.h)((function(){return(0,e.h)("div",{className:Se("layout")},(0,e.h)("div",{className:Se("layout-preview")},(0,e.h)(et,null,(0,e.h)(st,null))),(0,e.h)("div",{className:"layout-options"},(0,e.h)("div",{className:"layout-options-body"},(0,e.h)(Ke,null,"Content"),(0,e.h)(qt,null),(0,e.h)(Ke,null,"Styles"),(0,e.h)(ln,null),(0,e.h)("div",{className:"h-16"}),(0,e.h)(fn,null),(0,e.h)("div",{className:"h-16"}),(0,e.h)(Ln,null),(0,e.h)("div",{className:"h-4"})),(0,e.h)("div",{className:"layout-options-footer"},(0,e.h)(Ke,null,"Export"),(0,e.h)(Nn,null),(0,e.h)("div",{className:"h-8"}),(0,e.h)(In,null),(0,e.h)("div",{className:"h-24"}),(0,e.h)("label",null,(0,e.h)("svg",{viewBox:"0 0 512 512"},(0,e.h)("path",{d:"M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"})),"Download"),(0,e.h)("div",{className:"h-12"}),(0,e.h)("div",{className:"row"},(0,e.h)("div",{className:"f-1"},(0,e.h)(Tn,null)),(0,e.h)("div",{className:"w-16 nw-16"}),(0,e.h)("div",{className:"f-1"},(0,e.h)(Un,null))),(0,e.h)("div",{className:"h-16"}),(0,e.h)("label",null,(0,e.h)("svg",{viewBox:"0 0 640 512"},(0,e.h)("path",{d:"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z"})),"Copy Code"),(0,e.h)("div",{className:"h-12"}),(0,e.h)(Fn,null))))}),null)))),document.querySelector("#app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,